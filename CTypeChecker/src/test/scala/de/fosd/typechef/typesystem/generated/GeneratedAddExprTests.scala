package de.fosd.typechef.typesystem.generated

import org.junit._
import de.fosd.typechef.typesystem._

class GeneratedAddExprTests extends TestHelperTS {

    @Test def test_conf0_0() {
        correct("""
              char foo();
              char bar();
              char x() {
                char a = foo();
                char b = bar();
                char c = a + b;
                return c;
              }
                """)
        correct("""
              char foo();
              char bar();
              char x() {
                char a = foo();
                char b = bar();
                char c = a + b;
                return c;
              }
                """)
        correct("""
              char foo();
              char x() {
                char a = foo();
                char b = foo();
                char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf0_1() {
        correct("""
              char foo();
              signed char bar();
              signed char x() {
                char a = foo();
                signed char b = bar();
                signed char c = a + b;
                return c;
              }
                """)
        correct("""
              char foo();
              signed char bar();
              char x() {
                char a = foo();
                signed char b = bar();
                char c = a + b;
                return c;
              }
                """)
        correct("""
              char foo();
              signed char x() {
                char a = foo();
                char b = foo();
                signed char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf0_2() {
        correct("""
              char foo();
              unsigned char bar();
              unsigned char x() {
                char a = foo();
                unsigned char b = bar();
                unsigned char c = a + b;
                return c;
              }
                """)
        correct("""
              char foo();
              unsigned char bar();
              char x() {
                char a = foo();
                unsigned char b = bar();
                char c = a + b;
                return c;
              }
                """)
        correct("""
              char foo();
              unsigned char x() {
                char a = foo();
                char b = foo();
                unsigned char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf0_3() {
        correct("""
              char foo();
              unsigned int bar();
              unsigned int x() {
                char a = foo();
                unsigned int b = bar();
                unsigned int c = a + b;
                return c;
              }
                """)
        correct("""
              char foo();
              unsigned int bar();
              char x() {
                char a = foo();
                unsigned int b = bar();
                char c = a + b;
                return c;
              }
                """)
        correct("""
              char foo();
              unsigned int x() {
                char a = foo();
                char b = foo();
                unsigned int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf0_4() {
        correct("""
              char foo();
              signed int bar();
              signed int x() {
                char a = foo();
                signed int b = bar();
                signed int c = a + b;
                return c;
              }
                """)
        correct("""
              char foo();
              signed int bar();
              char x() {
                char a = foo();
                signed int b = bar();
                char c = a + b;
                return c;
              }
                """)
        correct("""
              char foo();
              signed int x() {
                char a = foo();
                char b = foo();
                signed int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf0_5() {
        correct("""
              char foo();
              long bar();
              long x() {
                char a = foo();
                long b = bar();
                long c = a + b;
                return c;
              }
                """)
        correct("""
              char foo();
              long bar();
              char x() {
                char a = foo();
                long b = bar();
                char c = a + b;
                return c;
              }
                """)
        correct("""
              char foo();
              long x() {
                char a = foo();
                char b = foo();
                long c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf0_6() {
        correct("""
              char foo();
              float bar();
              float x() {
                char a = foo();
                float b = bar();
                float c = a + b;
                return c;
              }
                """)
        correct("""
              char foo();
              float bar();
              char x() {
                char a = foo();
                float b = bar();
                char c = a + b;
                return c;
              }
                """)
        correct("""
              char foo();
              float x() {
                char a = foo();
                char b = foo();
                float c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf0_7() {
        correct("""
              char foo();
              double bar();
              double x() {
                char a = foo();
                double b = bar();
                double c = a + b;
                return c;
              }
                """)
        correct("""
              char foo();
              double bar();
              char x() {
                char a = foo();
                double b = bar();
                char c = a + b;
                return c;
              }
                """)
        correct("""
              char foo();
              double x() {
                char a = foo();
                char b = foo();
                double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf0_8() {
        correct("""
              char foo();
              long double bar();
              long double x() {
                char a = foo();
                long double b = bar();
                long double c = a + b;
                return c;
              }
                """)
        correct("""
              char foo();
              long double bar();
              char x() {
                char a = foo();
                long double b = bar();
                char c = a + b;
                return c;
              }
                """)
        correct("""
              char foo();
              long double x() {
                char a = foo();
                char b = foo();
                long double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf0_9() {
        correct("""
              char foo();
              int * bar();
              int * x() {
                char a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf0_9749671220509631058.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf0_9749671220509631058.c:6:26: warning: initialization makes integer from pointer without a cast
                 char c = a + b;
                          ^

        */
        warning("""
              char foo();
              int * bar();
              char x() {
                char a = foo();
                int * b = bar();
                char c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf0_98194664243834449573.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf0_98194664243834449573.c:5:27: warning: initialization makes pointer from integer without a cast
                 int * c = a + b;
                           ^

        */
        warning("""
              char foo();
              int * x() {
                char a = foo();
                char b = foo();
                int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf0_10() {
        correct("""
              char foo();
              int ** bar();
              int ** x() {
                char a = foo();
                int ** b = bar();
                int ** c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf0_104776290825088868484.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf0_104776290825088868484.c:6:26: warning: initialization makes integer from pointer without a cast
                 char c = a + b;
                          ^

        */
        warning("""
              char foo();
              int ** bar();
              char x() {
                char a = foo();
                int ** b = bar();
                char c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf0_107554106448752227275.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf0_107554106448752227275.c:5:28: warning: initialization makes pointer from integer without a cast
                 int ** c = a + b;
                            ^

        */
        warning("""
              char foo();
              int ** x() {
                char a = foo();
                char b = foo();
                int ** c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf0_11() {
        correct("""
              char foo();
              char * bar();
              char * x() {
                char a = foo();
                char * b = bar();
                char * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf0_112163264286356355685.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf0_112163264286356355685.c:6:26: warning: initialization makes integer from pointer without a cast
                 char c = a + b;
                          ^

        */
        warning("""
              char foo();
              char * bar();
              char x() {
                char a = foo();
                char * b = bar();
                char c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf0_114760853898141907825.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf0_114760853898141907825.c:5:28: warning: initialization makes pointer from integer without a cast
                 char * c = a + b;
                            ^

        */
        warning("""
              char foo();
              char * x() {
                char a = foo();
                char b = foo();
                char * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf0_12() {
        correct("""
              char foo();
              double * bar();
              double * x() {
                char a = foo();
                double * b = bar();
                double * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf0_122519577928848959892.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf0_122519577928848959892.c:6:26: warning: initialization makes integer from pointer without a cast
                 char c = a + b;
                          ^

        */
        warning("""
              char foo();
              double * bar();
              char x() {
                char a = foo();
                double * b = bar();
                char c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf0_12766695520929474944.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf0_12766695520929474944.c:5:30: warning: initialization makes pointer from integer without a cast
                 double * c = a + b;
                              ^

        */
        warning("""
              char foo();
              double * x() {
                char a = foo();
                char b = foo();
                double * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf0_13() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf0_138479554718813453778.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf0_138479554718813453778.c:8:32: error: invalid operands to binary + (have 'int' and 'struct S')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              char foo();
              struct S bar();
              struct S x() {
                char a = foo();
                struct S b = bar();
                struct S c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf0_136373136899356731863.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf0_136373136899356731863.c:8:28: error: invalid operands to binary + (have 'int' and 'struct S')
                 char c = a + b;
                            ^

        */
        error("""
              struct S { int x; int y; };

              char foo();
              struct S bar();
              char x() {
                char a = foo();
                struct S b = bar();
                char c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf0_13598586845682292136.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf0_13598586845682292136.c:7:24: error: invalid initializer
                 struct S c = a + b;
                        ^

        */
        error("""
              struct S { int x; int y; };

              char foo();
              struct S x() {
                char a = foo();
                char b = foo();
                struct S c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf0_14() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf0_147504498298857956528.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf0_147504498298857956528.c:8:32: error: invalid operands to binary + (have 'int' and 'struct T')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              char foo();
              struct T bar();
              struct T x() {
                char a = foo();
                struct T b = bar();
                struct T c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf0_145358220177019898719.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf0_145358220177019898719.c:8:28: error: invalid operands to binary + (have 'int' and 'struct T')
                 char c = a + b;
                            ^

        */
        error("""
              struct T { int x; int y; int z; };

              char foo();
              struct T bar();
              char x() {
                char a = foo();
                struct T b = bar();
                char c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf0_141126164623570557366.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf0_141126164623570557366.c:7:24: error: invalid initializer
                 struct T c = a + b;
                        ^

        */
        error("""
              struct T { int x; int y; int z; };

              char foo();
              struct T x() {
                char a = foo();
                char b = foo();
                struct T c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf0_15() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf0_154720820726505516816.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf0_154720820726505516816.c:8:40: error: invalid operands to binary + (have 'int' and 'struct_anonymous')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              char foo();
              struct_anonymous bar();
              struct_anonymous x() {
                char a = foo();
                struct_anonymous b = bar();
                struct_anonymous c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf0_158756370787084372164.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf0_158756370787084372164.c:8:28: error: invalid operands to binary + (have 'int' and 'struct_anonymous')
                 char c = a + b;
                            ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              char foo();
              struct_anonymous bar();
              char x() {
                char a = foo();
                struct_anonymous b = bar();
                char c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf0_157418098567269920953.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf0_157418098567269920953.c:7:17: error: invalid initializer
                 struct_anonymous c = a + b;
                 ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              char foo();
              struct_anonymous x() {
                char a = foo();
                char b = foo();
                struct_anonymous c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf0_16() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf0_166726575441915523986.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf0_166726575441915523986.c:5:24: error: invalid initializer
                 struct { int a; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf0_166726575441915523986.c:6:41: error: invalid operands to binary + (have 'int' and 'struct <anonymous>')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf0_166726575441915523986.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              char foo();
              struct { int a; } bar();
              struct { int a; } x() {
                char a = foo();
                struct { int a; } b = bar();
                struct { int a; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf0_166122319530530589293.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf0_166122319530530589293.c:5:24: error: invalid initializer
                 struct { int a; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf0_166122319530530589293.c:6:28: error: invalid operands to binary + (have 'int' and 'struct <anonymous>')
                 char c = a + b;
                            ^

        */
        error("""
              char foo();
              struct { int a; } bar();
              char x() {
                char a = foo();
                struct { int a; } b = bar();
                char c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf0_16604393137182402376.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf0_16604393137182402376.c:5:24: error: invalid initializer
                 struct { int a; } c = a + b;
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf0_16604393137182402376.c:6:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              char foo();
              struct { int a; } x() {
                char a = foo();
                char b = foo();
                struct { int a; } c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf0_17() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf0_174742722195772431262.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf0_174742722195772431262.c:5:24: error: invalid initializer
                 struct { float b; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf0_174742722195772431262.c:6:43: error: invalid operands to binary + (have 'int' and 'struct <anonymous>')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf0_174742722195772431262.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              char foo();
              struct { float b; } bar();
              struct { float b; } x() {
                char a = foo();
                struct { float b; } b = bar();
                struct { float b; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf0_177186831710393970181.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf0_177186831710393970181.c:5:24: error: invalid initializer
                 struct { float b; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf0_177186831710393970181.c:6:28: error: invalid operands to binary + (have 'int' and 'struct <anonymous>')
                 char c = a + b;
                            ^

        */
        error("""
              char foo();
              struct { float b; } bar();
              char x() {
                char a = foo();
                struct { float b; } b = bar();
                char c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf0_178715996418350340633.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf0_178715996418350340633.c:5:24: error: invalid initializer
                 struct { float b; } c = a + b;
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf0_178715996418350340633.c:6:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              char foo();
              struct { float b; } x() {
                char a = foo();
                char b = foo();
                struct { float b; } c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf0_18() {
        correct("""
              char foo();
              volatile int bar();
              volatile int x() {
                char a = foo();
                volatile int b = bar();
                volatile int c = a + b;
                return c;
              }
                """)
        correct("""
              char foo();
              volatile int bar();
              char x() {
                char a = foo();
                volatile int b = bar();
                char c = a + b;
                return c;
              }
                """)
        correct("""
              char foo();
              volatile int x() {
                char a = foo();
                char b = foo();
                volatile int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf0_19() {
        correct("""
              char foo();
              const int bar();
              const int x() {
                char a = foo();
                const int b = bar();
                const int c = a + b;
                return c;
              }
                """)
        correct("""
              char foo();
              const int bar();
              char x() {
                char a = foo();
                const int b = bar();
                char c = a + b;
                return c;
              }
                """)
        correct("""
              char foo();
              const int x() {
                char a = foo();
                char b = foo();
                const int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf0_20() {
        correct("""
              char foo();
              const double bar();
              const double x() {
                char a = foo();
                const double b = bar();
                const double c = a + b;
                return c;
              }
                """)
        correct("""
              char foo();
              const double bar();
              char x() {
                char a = foo();
                const double b = bar();
                char c = a + b;
                return c;
              }
                """)
        correct("""
              char foo();
              const double x() {
                char a = foo();
                char b = foo();
                const double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf0_21() {
        correct("""
              char foo();
              volatile double bar();
              volatile double x() {
                char a = foo();
                volatile double b = bar();
                volatile double c = a + b;
                return c;
              }
                """)
        correct("""
              char foo();
              volatile double bar();
              char x() {
                char a = foo();
                volatile double b = bar();
                char c = a + b;
                return c;
              }
                """)
        correct("""
              char foo();
              volatile double x() {
                char a = foo();
                char b = foo();
                volatile double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf0_22() {
        correct("""
              char foo();
              int * bar();
              int * x() {
                char a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf0_226007152978491151170.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf0_226007152978491151170.c:6:26: warning: initialization makes integer from pointer without a cast
                 char c = a + b;
                          ^

        */
        warning("""
              char foo();
              int * bar();
              char x() {
                char a = foo();
                int * b = bar();
                char c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf0_22751826429760533338.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf0_22751826429760533338.c:5:27: warning: initialization makes pointer from integer without a cast
                 int * c = a + b;
                           ^

        */
        warning("""
              char foo();
              int * x() {
                char a = foo();
                char b = foo();
                int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf0_23() {
        correct("""
              char foo();
              const int * bar();
              const int * x() {
                char a = foo();
                const int * b = bar();
                const int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf0_238540829755650042378.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf0_238540829755650042378.c:6:26: warning: initialization makes integer from pointer without a cast
                 char c = a + b;
                          ^

        */
        warning("""
              char foo();
              const int * bar();
              char x() {
                char a = foo();
                const int * b = bar();
                char c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf0_23573117539555432067.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf0_23573117539555432067.c:5:33: warning: initialization makes pointer from integer without a cast
                 const int * c = a + b;
                                 ^

        */
        warning("""
              char foo();
              const int * x() {
                char a = foo();
                char b = foo();
                const int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf0_24() {
        correct("""
              char foo();
              volatile int * bar();
              volatile int * x() {
                char a = foo();
                volatile int * b = bar();
                volatile int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf0_246510074293057166241.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf0_246510074293057166241.c:6:26: warning: initialization makes integer from pointer without a cast
                 char c = a + b;
                          ^

        */
        warning("""
              char foo();
              volatile int * bar();
              char x() {
                char a = foo();
                volatile int * b = bar();
                char c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf0_246915626315635459617.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf0_246915626315635459617.c:5:36: warning: initialization makes pointer from integer without a cast
                 volatile int * c = a + b;
                                    ^

        */
        warning("""
              char foo();
              volatile int * x() {
                char a = foo();
                char b = foo();
                volatile int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf1_0() {
        correct("""
              signed char foo();
              char bar();
              char x() {
                signed char a = foo();
                char b = bar();
                char c = a + b;
                return c;
              }
                """)
        correct("""
              signed char foo();
              char bar();
              signed char x() {
                signed char a = foo();
                char b = bar();
                signed char c = a + b;
                return c;
              }
                """)
        correct("""
              signed char foo();
              char x() {
                signed char a = foo();
                signed char b = foo();
                char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf1_1() {
        correct("""
              signed char foo();
              signed char bar();
              signed char x() {
                signed char a = foo();
                signed char b = bar();
                signed char c = a + b;
                return c;
              }
                """)
        correct("""
              signed char foo();
              signed char bar();
              signed char x() {
                signed char a = foo();
                signed char b = bar();
                signed char c = a + b;
                return c;
              }
                """)
        correct("""
              signed char foo();
              signed char x() {
                signed char a = foo();
                signed char b = foo();
                signed char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf1_2() {
        correct("""
              signed char foo();
              unsigned char bar();
              unsigned char x() {
                signed char a = foo();
                unsigned char b = bar();
                unsigned char c = a + b;
                return c;
              }
                """)
        correct("""
              signed char foo();
              unsigned char bar();
              signed char x() {
                signed char a = foo();
                unsigned char b = bar();
                signed char c = a + b;
                return c;
              }
                """)
        correct("""
              signed char foo();
              unsigned char x() {
                signed char a = foo();
                signed char b = foo();
                unsigned char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf1_3() {
        correct("""
              signed char foo();
              unsigned int bar();
              unsigned int x() {
                signed char a = foo();
                unsigned int b = bar();
                unsigned int c = a + b;
                return c;
              }
                """)
        correct("""
              signed char foo();
              unsigned int bar();
              signed char x() {
                signed char a = foo();
                unsigned int b = bar();
                signed char c = a + b;
                return c;
              }
                """)
        correct("""
              signed char foo();
              unsigned int x() {
                signed char a = foo();
                signed char b = foo();
                unsigned int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf1_4() {
        correct("""
              signed char foo();
              signed int bar();
              signed int x() {
                signed char a = foo();
                signed int b = bar();
                signed int c = a + b;
                return c;
              }
                """)
        correct("""
              signed char foo();
              signed int bar();
              signed char x() {
                signed char a = foo();
                signed int b = bar();
                signed char c = a + b;
                return c;
              }
                """)
        correct("""
              signed char foo();
              signed int x() {
                signed char a = foo();
                signed char b = foo();
                signed int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf1_5() {
        correct("""
              signed char foo();
              long bar();
              long x() {
                signed char a = foo();
                long b = bar();
                long c = a + b;
                return c;
              }
                """)
        correct("""
              signed char foo();
              long bar();
              signed char x() {
                signed char a = foo();
                long b = bar();
                signed char c = a + b;
                return c;
              }
                """)
        correct("""
              signed char foo();
              long x() {
                signed char a = foo();
                signed char b = foo();
                long c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf1_6() {
        correct("""
              signed char foo();
              float bar();
              float x() {
                signed char a = foo();
                float b = bar();
                float c = a + b;
                return c;
              }
                """)
        correct("""
              signed char foo();
              float bar();
              signed char x() {
                signed char a = foo();
                float b = bar();
                signed char c = a + b;
                return c;
              }
                """)
        correct("""
              signed char foo();
              float x() {
                signed char a = foo();
                signed char b = foo();
                float c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf1_7() {
        correct("""
              signed char foo();
              double bar();
              double x() {
                signed char a = foo();
                double b = bar();
                double c = a + b;
                return c;
              }
                """)
        correct("""
              signed char foo();
              double bar();
              signed char x() {
                signed char a = foo();
                double b = bar();
                signed char c = a + b;
                return c;
              }
                """)
        correct("""
              signed char foo();
              double x() {
                signed char a = foo();
                signed char b = foo();
                double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf1_8() {
        correct("""
              signed char foo();
              long double bar();
              long double x() {
                signed char a = foo();
                long double b = bar();
                long double c = a + b;
                return c;
              }
                """)
        correct("""
              signed char foo();
              long double bar();
              signed char x() {
                signed char a = foo();
                long double b = bar();
                signed char c = a + b;
                return c;
              }
                """)
        correct("""
              signed char foo();
              long double x() {
                signed char a = foo();
                signed char b = foo();
                long double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf1_9() {
        correct("""
              signed char foo();
              int * bar();
              int * x() {
                signed char a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf1_96753224527208437645.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf1_96753224527208437645.c:6:33: warning: initialization makes integer from pointer without a cast
                 signed char c = a + b;
                                 ^

        */
        warning("""
              signed char foo();
              int * bar();
              signed char x() {
                signed char a = foo();
                int * b = bar();
                signed char c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf1_9511759137456289075.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf1_9511759137456289075.c:5:27: warning: initialization makes pointer from integer without a cast
                 int * c = a + b;
                           ^

        */
        warning("""
              signed char foo();
              int * x() {
                signed char a = foo();
                signed char b = foo();
                int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf1_10() {
        correct("""
              signed char foo();
              int ** bar();
              int ** x() {
                signed char a = foo();
                int ** b = bar();
                int ** c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf1_103579454681723456986.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf1_103579454681723456986.c:6:33: warning: initialization makes integer from pointer without a cast
                 signed char c = a + b;
                                 ^

        */
        warning("""
              signed char foo();
              int ** bar();
              signed char x() {
                signed char a = foo();
                int ** b = bar();
                signed char c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf1_104559106552155899865.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf1_104559106552155899865.c:5:28: warning: initialization makes pointer from integer without a cast
                 int ** c = a + b;
                            ^

        */
        warning("""
              signed char foo();
              int ** x() {
                signed char a = foo();
                signed char b = foo();
                int ** c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf1_11() {
        correct("""
              signed char foo();
              char * bar();
              char * x() {
                signed char a = foo();
                char * b = bar();
                char * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf1_112135146908502598552.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf1_112135146908502598552.c:6:33: warning: initialization makes integer from pointer without a cast
                 signed char c = a + b;
                                 ^

        */
        warning("""
              signed char foo();
              char * bar();
              signed char x() {
                signed char a = foo();
                char * b = bar();
                signed char c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf1_112556799680711429419.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf1_112556799680711429419.c:5:28: warning: initialization makes pointer from integer without a cast
                 char * c = a + b;
                            ^

        */
        warning("""
              signed char foo();
              char * x() {
                signed char a = foo();
                signed char b = foo();
                char * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf1_12() {
        correct("""
              signed char foo();
              double * bar();
              double * x() {
                signed char a = foo();
                double * b = bar();
                double * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf1_128572301642492971112.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf1_128572301642492971112.c:6:33: warning: initialization makes integer from pointer without a cast
                 signed char c = a + b;
                                 ^

        */
        warning("""
              signed char foo();
              double * bar();
              signed char x() {
                signed char a = foo();
                double * b = bar();
                signed char c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf1_121130057106889285117.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf1_121130057106889285117.c:5:30: warning: initialization makes pointer from integer without a cast
                 double * c = a + b;
                              ^

        */
        warning("""
              signed char foo();
              double * x() {
                signed char a = foo();
                signed char b = foo();
                double * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf1_13() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf1_135537053145366908602.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf1_135537053145366908602.c:8:32: error: invalid operands to binary + (have 'int' and 'struct S')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              signed char foo();
              struct S bar();
              struct S x() {
                signed char a = foo();
                struct S b = bar();
                struct S c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf1_131856688372879782585.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf1_131856688372879782585.c:8:35: error: invalid operands to binary + (have 'int' and 'struct S')
                 signed char c = a + b;
                                   ^

        */
        error("""
              struct S { int x; int y; };

              signed char foo();
              struct S bar();
              signed char x() {
                signed char a = foo();
                struct S b = bar();
                signed char c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf1_131200269040066460037.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf1_131200269040066460037.c:7:24: error: invalid initializer
                 struct S c = a + b;
                        ^

        */
        error("""
              struct S { int x; int y; };

              signed char foo();
              struct S x() {
                signed char a = foo();
                signed char b = foo();
                struct S c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf1_14() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf1_149158170199735188119.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf1_149158170199735188119.c:8:32: error: invalid operands to binary + (have 'int' and 'struct T')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              signed char foo();
              struct T bar();
              struct T x() {
                signed char a = foo();
                struct T b = bar();
                struct T c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf1_146163773510152871579.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf1_146163773510152871579.c:8:35: error: invalid operands to binary + (have 'int' and 'struct T')
                 signed char c = a + b;
                                   ^

        */
        error("""
              struct T { int x; int y; int z; };

              signed char foo();
              struct T bar();
              signed char x() {
                signed char a = foo();
                struct T b = bar();
                signed char c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf1_141012451580084468776.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf1_141012451580084468776.c:7:24: error: invalid initializer
                 struct T c = a + b;
                        ^

        */
        error("""
              struct T { int x; int y; int z; };

              signed char foo();
              struct T x() {
                signed char a = foo();
                signed char b = foo();
                struct T c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf1_15() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf1_156002282872538643124.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf1_156002282872538643124.c:8:40: error: invalid operands to binary + (have 'int' and 'struct_anonymous')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              signed char foo();
              struct_anonymous bar();
              struct_anonymous x() {
                signed char a = foo();
                struct_anonymous b = bar();
                struct_anonymous c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf1_158269772662030477662.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf1_158269772662030477662.c:8:35: error: invalid operands to binary + (have 'int' and 'struct_anonymous')
                 signed char c = a + b;
                                   ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              signed char foo();
              struct_anonymous bar();
              signed char x() {
                signed char a = foo();
                struct_anonymous b = bar();
                signed char c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf1_15687937231263009163.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf1_15687937231263009163.c:7:17: error: invalid initializer
                 struct_anonymous c = a + b;
                 ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              signed char foo();
              struct_anonymous x() {
                signed char a = foo();
                signed char b = foo();
                struct_anonymous c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf1_16() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf1_164131027249663103041.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf1_164131027249663103041.c:5:24: error: invalid initializer
                 struct { int a; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf1_164131027249663103041.c:6:41: error: invalid operands to binary + (have 'int' and 'struct <anonymous>')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf1_164131027249663103041.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              signed char foo();
              struct { int a; } bar();
              struct { int a; } x() {
                signed char a = foo();
                struct { int a; } b = bar();
                struct { int a; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf1_163003670112653917930.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf1_163003670112653917930.c:5:24: error: invalid initializer
                 struct { int a; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf1_163003670112653917930.c:6:35: error: invalid operands to binary + (have 'int' and 'struct <anonymous>')
                 signed char c = a + b;
                                   ^

        */
        error("""
              signed char foo();
              struct { int a; } bar();
              signed char x() {
                signed char a = foo();
                struct { int a; } b = bar();
                signed char c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf1_16997736310832954577.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf1_16997736310832954577.c:5:24: error: invalid initializer
                 struct { int a; } c = a + b;
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf1_16997736310832954577.c:6:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              signed char foo();
              struct { int a; } x() {
                signed char a = foo();
                signed char b = foo();
                struct { int a; } c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf1_17() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf1_174727595838681711249.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf1_174727595838681711249.c:5:24: error: invalid initializer
                 struct { float b; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf1_174727595838681711249.c:6:43: error: invalid operands to binary + (have 'int' and 'struct <anonymous>')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf1_174727595838681711249.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              signed char foo();
              struct { float b; } bar();
              struct { float b; } x() {
                signed char a = foo();
                struct { float b; } b = bar();
                struct { float b; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf1_177248287505145635314.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf1_177248287505145635314.c:5:24: error: invalid initializer
                 struct { float b; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf1_177248287505145635314.c:6:35: error: invalid operands to binary + (have 'int' and 'struct <anonymous>')
                 signed char c = a + b;
                                   ^

        */
        error("""
              signed char foo();
              struct { float b; } bar();
              signed char x() {
                signed char a = foo();
                struct { float b; } b = bar();
                signed char c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf1_178444989050388396459.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf1_178444989050388396459.c:5:24: error: invalid initializer
                 struct { float b; } c = a + b;
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf1_178444989050388396459.c:6:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              signed char foo();
              struct { float b; } x() {
                signed char a = foo();
                signed char b = foo();
                struct { float b; } c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf1_18() {
        correct("""
              signed char foo();
              volatile int bar();
              volatile int x() {
                signed char a = foo();
                volatile int b = bar();
                volatile int c = a + b;
                return c;
              }
                """)
        correct("""
              signed char foo();
              volatile int bar();
              signed char x() {
                signed char a = foo();
                volatile int b = bar();
                signed char c = a + b;
                return c;
              }
                """)
        correct("""
              signed char foo();
              volatile int x() {
                signed char a = foo();
                signed char b = foo();
                volatile int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf1_19() {
        correct("""
              signed char foo();
              const int bar();
              const int x() {
                signed char a = foo();
                const int b = bar();
                const int c = a + b;
                return c;
              }
                """)
        correct("""
              signed char foo();
              const int bar();
              signed char x() {
                signed char a = foo();
                const int b = bar();
                signed char c = a + b;
                return c;
              }
                """)
        correct("""
              signed char foo();
              const int x() {
                signed char a = foo();
                signed char b = foo();
                const int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf1_20() {
        correct("""
              signed char foo();
              const double bar();
              const double x() {
                signed char a = foo();
                const double b = bar();
                const double c = a + b;
                return c;
              }
                """)
        correct("""
              signed char foo();
              const double bar();
              signed char x() {
                signed char a = foo();
                const double b = bar();
                signed char c = a + b;
                return c;
              }
                """)
        correct("""
              signed char foo();
              const double x() {
                signed char a = foo();
                signed char b = foo();
                const double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf1_21() {
        correct("""
              signed char foo();
              volatile double bar();
              volatile double x() {
                signed char a = foo();
                volatile double b = bar();
                volatile double c = a + b;
                return c;
              }
                """)
        correct("""
              signed char foo();
              volatile double bar();
              signed char x() {
                signed char a = foo();
                volatile double b = bar();
                signed char c = a + b;
                return c;
              }
                """)
        correct("""
              signed char foo();
              volatile double x() {
                signed char a = foo();
                signed char b = foo();
                volatile double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf1_22() {
        correct("""
              signed char foo();
              int * bar();
              int * x() {
                signed char a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf1_221379820380147573150.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf1_221379820380147573150.c:6:33: warning: initialization makes integer from pointer without a cast
                 signed char c = a + b;
                                 ^

        */
        warning("""
              signed char foo();
              int * bar();
              signed char x() {
                signed char a = foo();
                int * b = bar();
                signed char c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf1_224410225017011219316.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf1_224410225017011219316.c:5:27: warning: initialization makes pointer from integer without a cast
                 int * c = a + b;
                           ^

        */
        warning("""
              signed char foo();
              int * x() {
                signed char a = foo();
                signed char b = foo();
                int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf1_23() {
        correct("""
              signed char foo();
              const int * bar();
              const int * x() {
                signed char a = foo();
                const int * b = bar();
                const int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf1_237051417879525300255.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf1_237051417879525300255.c:6:33: warning: initialization makes integer from pointer without a cast
                 signed char c = a + b;
                                 ^

        */
        warning("""
              signed char foo();
              const int * bar();
              signed char x() {
                signed char a = foo();
                const int * b = bar();
                signed char c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf1_232383802596441329353.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf1_232383802596441329353.c:5:33: warning: initialization makes pointer from integer without a cast
                 const int * c = a + b;
                                 ^

        */
        warning("""
              signed char foo();
              const int * x() {
                signed char a = foo();
                signed char b = foo();
                const int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf1_24() {
        correct("""
              signed char foo();
              volatile int * bar();
              volatile int * x() {
                signed char a = foo();
                volatile int * b = bar();
                volatile int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf1_248710149862699224994.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf1_248710149862699224994.c:6:33: warning: initialization makes integer from pointer without a cast
                 signed char c = a + b;
                                 ^

        */
        warning("""
              signed char foo();
              volatile int * bar();
              signed char x() {
                signed char a = foo();
                volatile int * b = bar();
                signed char c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf1_246999366044170097465.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf1_246999366044170097465.c:5:36: warning: initialization makes pointer from integer without a cast
                 volatile int * c = a + b;
                                    ^

        */
        warning("""
              signed char foo();
              volatile int * x() {
                signed char a = foo();
                signed char b = foo();
                volatile int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf2_0() {
        correct("""
              unsigned char foo();
              char bar();
              char x() {
                unsigned char a = foo();
                char b = bar();
                char c = a + b;
                return c;
              }
                """)
        correct("""
              unsigned char foo();
              char bar();
              unsigned char x() {
                unsigned char a = foo();
                char b = bar();
                unsigned char c = a + b;
                return c;
              }
                """)
        correct("""
              unsigned char foo();
              char x() {
                unsigned char a = foo();
                unsigned char b = foo();
                char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf2_1() {
        correct("""
              unsigned char foo();
              signed char bar();
              signed char x() {
                unsigned char a = foo();
                signed char b = bar();
                signed char c = a + b;
                return c;
              }
                """)
        correct("""
              unsigned char foo();
              signed char bar();
              unsigned char x() {
                unsigned char a = foo();
                signed char b = bar();
                unsigned char c = a + b;
                return c;
              }
                """)
        correct("""
              unsigned char foo();
              signed char x() {
                unsigned char a = foo();
                unsigned char b = foo();
                signed char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf2_2() {
        correct("""
              unsigned char foo();
              unsigned char bar();
              unsigned char x() {
                unsigned char a = foo();
                unsigned char b = bar();
                unsigned char c = a + b;
                return c;
              }
                """)
        correct("""
              unsigned char foo();
              unsigned char bar();
              unsigned char x() {
                unsigned char a = foo();
                unsigned char b = bar();
                unsigned char c = a + b;
                return c;
              }
                """)
        correct("""
              unsigned char foo();
              unsigned char x() {
                unsigned char a = foo();
                unsigned char b = foo();
                unsigned char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf2_3() {
        correct("""
              unsigned char foo();
              unsigned int bar();
              unsigned int x() {
                unsigned char a = foo();
                unsigned int b = bar();
                unsigned int c = a + b;
                return c;
              }
                """)
        correct("""
              unsigned char foo();
              unsigned int bar();
              unsigned char x() {
                unsigned char a = foo();
                unsigned int b = bar();
                unsigned char c = a + b;
                return c;
              }
                """)
        correct("""
              unsigned char foo();
              unsigned int x() {
                unsigned char a = foo();
                unsigned char b = foo();
                unsigned int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf2_4() {
        correct("""
              unsigned char foo();
              signed int bar();
              signed int x() {
                unsigned char a = foo();
                signed int b = bar();
                signed int c = a + b;
                return c;
              }
                """)
        correct("""
              unsigned char foo();
              signed int bar();
              unsigned char x() {
                unsigned char a = foo();
                signed int b = bar();
                unsigned char c = a + b;
                return c;
              }
                """)
        correct("""
              unsigned char foo();
              signed int x() {
                unsigned char a = foo();
                unsigned char b = foo();
                signed int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf2_5() {
        correct("""
              unsigned char foo();
              long bar();
              long x() {
                unsigned char a = foo();
                long b = bar();
                long c = a + b;
                return c;
              }
                """)
        correct("""
              unsigned char foo();
              long bar();
              unsigned char x() {
                unsigned char a = foo();
                long b = bar();
                unsigned char c = a + b;
                return c;
              }
                """)
        correct("""
              unsigned char foo();
              long x() {
                unsigned char a = foo();
                unsigned char b = foo();
                long c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf2_6() {
        correct("""
              unsigned char foo();
              float bar();
              float x() {
                unsigned char a = foo();
                float b = bar();
                float c = a + b;
                return c;
              }
                """)
        correct("""
              unsigned char foo();
              float bar();
              unsigned char x() {
                unsigned char a = foo();
                float b = bar();
                unsigned char c = a + b;
                return c;
              }
                """)
        correct("""
              unsigned char foo();
              float x() {
                unsigned char a = foo();
                unsigned char b = foo();
                float c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf2_7() {
        correct("""
              unsigned char foo();
              double bar();
              double x() {
                unsigned char a = foo();
                double b = bar();
                double c = a + b;
                return c;
              }
                """)
        correct("""
              unsigned char foo();
              double bar();
              unsigned char x() {
                unsigned char a = foo();
                double b = bar();
                unsigned char c = a + b;
                return c;
              }
                """)
        correct("""
              unsigned char foo();
              double x() {
                unsigned char a = foo();
                unsigned char b = foo();
                double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf2_8() {
        correct("""
              unsigned char foo();
              long double bar();
              long double x() {
                unsigned char a = foo();
                long double b = bar();
                long double c = a + b;
                return c;
              }
                """)
        correct("""
              unsigned char foo();
              long double bar();
              unsigned char x() {
                unsigned char a = foo();
                long double b = bar();
                unsigned char c = a + b;
                return c;
              }
                """)
        correct("""
              unsigned char foo();
              long double x() {
                unsigned char a = foo();
                unsigned char b = foo();
                long double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf2_9() {
        correct("""
              unsigned char foo();
              int * bar();
              int * x() {
                unsigned char a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf2_93747038070464654281.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf2_93747038070464654281.c:6:35: warning: initialization makes integer from pointer without a cast
                 unsigned char c = a + b;
                                   ^

        */
        warning("""
              unsigned char foo();
              int * bar();
              unsigned char x() {
                unsigned char a = foo();
                int * b = bar();
                unsigned char c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf2_94418809827388069740.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf2_94418809827388069740.c:5:27: warning: initialization makes pointer from integer without a cast
                 int * c = a + b;
                           ^

        */
        warning("""
              unsigned char foo();
              int * x() {
                unsigned char a = foo();
                unsigned char b = foo();
                int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf2_10() {
        correct("""
              unsigned char foo();
              int ** bar();
              int ** x() {
                unsigned char a = foo();
                int ** b = bar();
                int ** c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf2_101495972187156442431.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf2_101495972187156442431.c:6:35: warning: initialization makes integer from pointer without a cast
                 unsigned char c = a + b;
                                   ^

        */
        warning("""
              unsigned char foo();
              int ** bar();
              unsigned char x() {
                unsigned char a = foo();
                int ** b = bar();
                unsigned char c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf2_109000006413509324293.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf2_109000006413509324293.c:5:28: warning: initialization makes pointer from integer without a cast
                 int ** c = a + b;
                            ^

        */
        warning("""
              unsigned char foo();
              int ** x() {
                unsigned char a = foo();
                unsigned char b = foo();
                int ** c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf2_11() {
        correct("""
              unsigned char foo();
              char * bar();
              char * x() {
                unsigned char a = foo();
                char * b = bar();
                char * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf2_111422661510123816962.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf2_111422661510123816962.c:6:35: warning: initialization makes integer from pointer without a cast
                 unsigned char c = a + b;
                                   ^

        */
        warning("""
              unsigned char foo();
              char * bar();
              unsigned char x() {
                unsigned char a = foo();
                char * b = bar();
                unsigned char c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf2_115250937656354881794.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf2_115250937656354881794.c:5:28: warning: initialization makes pointer from integer without a cast
                 char * c = a + b;
                            ^

        */
        warning("""
              unsigned char foo();
              char * x() {
                unsigned char a = foo();
                unsigned char b = foo();
                char * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf2_12() {
        correct("""
              unsigned char foo();
              double * bar();
              double * x() {
                unsigned char a = foo();
                double * b = bar();
                double * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf2_128961265424294200812.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf2_128961265424294200812.c:6:35: warning: initialization makes integer from pointer without a cast
                 unsigned char c = a + b;
                                   ^

        */
        warning("""
              unsigned char foo();
              double * bar();
              unsigned char x() {
                unsigned char a = foo();
                double * b = bar();
                unsigned char c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf2_125928917515891435625.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf2_125928917515891435625.c:5:30: warning: initialization makes pointer from integer without a cast
                 double * c = a + b;
                              ^

        */
        warning("""
              unsigned char foo();
              double * x() {
                unsigned char a = foo();
                unsigned char b = foo();
                double * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf2_13() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf2_132979464565610329186.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf2_132979464565610329186.c:8:32: error: invalid operands to binary + (have 'int' and 'struct S')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              unsigned char foo();
              struct S bar();
              struct S x() {
                unsigned char a = foo();
                struct S b = bar();
                struct S c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf2_13261108429245468036.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf2_13261108429245468036.c:8:37: error: invalid operands to binary + (have 'int' and 'struct S')
                 unsigned char c = a + b;
                                     ^

        */
        error("""
              struct S { int x; int y; };

              unsigned char foo();
              struct S bar();
              unsigned char x() {
                unsigned char a = foo();
                struct S b = bar();
                unsigned char c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf2_139106625863749955792.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf2_139106625863749955792.c:7:24: error: invalid initializer
                 struct S c = a + b;
                        ^

        */
        error("""
              struct S { int x; int y; };

              unsigned char foo();
              struct S x() {
                unsigned char a = foo();
                unsigned char b = foo();
                struct S c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf2_14() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf2_144316910229332635445.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf2_144316910229332635445.c:8:32: error: invalid operands to binary + (have 'int' and 'struct T')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              unsigned char foo();
              struct T bar();
              struct T x() {
                unsigned char a = foo();
                struct T b = bar();
                struct T c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf2_142779903008463191414.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf2_142779903008463191414.c:8:37: error: invalid operands to binary + (have 'int' and 'struct T')
                 unsigned char c = a + b;
                                     ^

        */
        error("""
              struct T { int x; int y; int z; };

              unsigned char foo();
              struct T bar();
              unsigned char x() {
                unsigned char a = foo();
                struct T b = bar();
                unsigned char c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf2_145217847510425188567.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf2_145217847510425188567.c:7:24: error: invalid initializer
                 struct T c = a + b;
                        ^

        */
        error("""
              struct T { int x; int y; int z; };

              unsigned char foo();
              struct T x() {
                unsigned char a = foo();
                unsigned char b = foo();
                struct T c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf2_15() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf2_157155158201545267919.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf2_157155158201545267919.c:8:40: error: invalid operands to binary + (have 'int' and 'struct_anonymous')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              unsigned char foo();
              struct_anonymous bar();
              struct_anonymous x() {
                unsigned char a = foo();
                struct_anonymous b = bar();
                struct_anonymous c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf2_151595983562432106432.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf2_151595983562432106432.c:8:37: error: invalid operands to binary + (have 'int' and 'struct_anonymous')
                 unsigned char c = a + b;
                                     ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              unsigned char foo();
              struct_anonymous bar();
              unsigned char x() {
                unsigned char a = foo();
                struct_anonymous b = bar();
                unsigned char c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf2_157661809128801918727.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf2_157661809128801918727.c:7:17: error: invalid initializer
                 struct_anonymous c = a + b;
                 ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              unsigned char foo();
              struct_anonymous x() {
                unsigned char a = foo();
                unsigned char b = foo();
                struct_anonymous c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf2_16() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf2_164589882140670742988.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf2_164589882140670742988.c:5:24: error: invalid initializer
                 struct { int a; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf2_164589882140670742988.c:6:41: error: invalid operands to binary + (have 'int' and 'struct <anonymous>')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf2_164589882140670742988.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              unsigned char foo();
              struct { int a; } bar();
              struct { int a; } x() {
                unsigned char a = foo();
                struct { int a; } b = bar();
                struct { int a; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf2_168989862112515768608.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf2_168989862112515768608.c:5:24: error: invalid initializer
                 struct { int a; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf2_168989862112515768608.c:6:37: error: invalid operands to binary + (have 'int' and 'struct <anonymous>')
                 unsigned char c = a + b;
                                     ^

        */
        error("""
              unsigned char foo();
              struct { int a; } bar();
              unsigned char x() {
                unsigned char a = foo();
                struct { int a; } b = bar();
                unsigned char c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf2_168083057454209808447.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf2_168083057454209808447.c:5:24: error: invalid initializer
                 struct { int a; } c = a + b;
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf2_168083057454209808447.c:6:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              unsigned char foo();
              struct { int a; } x() {
                unsigned char a = foo();
                unsigned char b = foo();
                struct { int a; } c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf2_17() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf2_177279381551630587858.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf2_177279381551630587858.c:5:24: error: invalid initializer
                 struct { float b; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf2_177279381551630587858.c:6:43: error: invalid operands to binary + (have 'int' and 'struct <anonymous>')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf2_177279381551630587858.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              unsigned char foo();
              struct { float b; } bar();
              struct { float b; } x() {
                unsigned char a = foo();
                struct { float b; } b = bar();
                struct { float b; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf2_173321755206197434971.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf2_173321755206197434971.c:5:24: error: invalid initializer
                 struct { float b; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf2_173321755206197434971.c:6:37: error: invalid operands to binary + (have 'int' and 'struct <anonymous>')
                 unsigned char c = a + b;
                                     ^

        */
        error("""
              unsigned char foo();
              struct { float b; } bar();
              unsigned char x() {
                unsigned char a = foo();
                struct { float b; } b = bar();
                unsigned char c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf2_173183986785828682813.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf2_173183986785828682813.c:5:24: error: invalid initializer
                 struct { float b; } c = a + b;
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf2_173183986785828682813.c:6:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              unsigned char foo();
              struct { float b; } x() {
                unsigned char a = foo();
                unsigned char b = foo();
                struct { float b; } c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf2_18() {
        correct("""
              unsigned char foo();
              volatile int bar();
              volatile int x() {
                unsigned char a = foo();
                volatile int b = bar();
                volatile int c = a + b;
                return c;
              }
                """)
        correct("""
              unsigned char foo();
              volatile int bar();
              unsigned char x() {
                unsigned char a = foo();
                volatile int b = bar();
                unsigned char c = a + b;
                return c;
              }
                """)
        correct("""
              unsigned char foo();
              volatile int x() {
                unsigned char a = foo();
                unsigned char b = foo();
                volatile int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf2_19() {
        correct("""
              unsigned char foo();
              const int bar();
              const int x() {
                unsigned char a = foo();
                const int b = bar();
                const int c = a + b;
                return c;
              }
                """)
        correct("""
              unsigned char foo();
              const int bar();
              unsigned char x() {
                unsigned char a = foo();
                const int b = bar();
                unsigned char c = a + b;
                return c;
              }
                """)
        correct("""
              unsigned char foo();
              const int x() {
                unsigned char a = foo();
                unsigned char b = foo();
                const int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf2_20() {
        correct("""
              unsigned char foo();
              const double bar();
              const double x() {
                unsigned char a = foo();
                const double b = bar();
                const double c = a + b;
                return c;
              }
                """)
        correct("""
              unsigned char foo();
              const double bar();
              unsigned char x() {
                unsigned char a = foo();
                const double b = bar();
                unsigned char c = a + b;
                return c;
              }
                """)
        correct("""
              unsigned char foo();
              const double x() {
                unsigned char a = foo();
                unsigned char b = foo();
                const double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf2_21() {
        correct("""
              unsigned char foo();
              volatile double bar();
              volatile double x() {
                unsigned char a = foo();
                volatile double b = bar();
                volatile double c = a + b;
                return c;
              }
                """)
        correct("""
              unsigned char foo();
              volatile double bar();
              unsigned char x() {
                unsigned char a = foo();
                volatile double b = bar();
                unsigned char c = a + b;
                return c;
              }
                """)
        correct("""
              unsigned char foo();
              volatile double x() {
                unsigned char a = foo();
                unsigned char b = foo();
                volatile double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf2_22() {
        correct("""
              unsigned char foo();
              int * bar();
              int * x() {
                unsigned char a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf2_226949418191299064556.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf2_226949418191299064556.c:6:35: warning: initialization makes integer from pointer without a cast
                 unsigned char c = a + b;
                                   ^

        */
        warning("""
              unsigned char foo();
              int * bar();
              unsigned char x() {
                unsigned char a = foo();
                int * b = bar();
                unsigned char c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf2_223077473489970002993.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf2_223077473489970002993.c:5:27: warning: initialization makes pointer from integer without a cast
                 int * c = a + b;
                           ^

        */
        warning("""
              unsigned char foo();
              int * x() {
                unsigned char a = foo();
                unsigned char b = foo();
                int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf2_23() {
        correct("""
              unsigned char foo();
              const int * bar();
              const int * x() {
                unsigned char a = foo();
                const int * b = bar();
                const int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf2_232716473707211044494.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf2_232716473707211044494.c:6:35: warning: initialization makes integer from pointer without a cast
                 unsigned char c = a + b;
                                   ^

        */
        warning("""
              unsigned char foo();
              const int * bar();
              unsigned char x() {
                unsigned char a = foo();
                const int * b = bar();
                unsigned char c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf2_23930327871337534014.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf2_23930327871337534014.c:5:33: warning: initialization makes pointer from integer without a cast
                 const int * c = a + b;
                                 ^

        */
        warning("""
              unsigned char foo();
              const int * x() {
                unsigned char a = foo();
                unsigned char b = foo();
                const int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf2_24() {
        correct("""
              unsigned char foo();
              volatile int * bar();
              volatile int * x() {
                unsigned char a = foo();
                volatile int * b = bar();
                volatile int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf2_243776382687844687411.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf2_243776382687844687411.c:6:35: warning: initialization makes integer from pointer without a cast
                 unsigned char c = a + b;
                                   ^

        */
        warning("""
              unsigned char foo();
              volatile int * bar();
              unsigned char x() {
                unsigned char a = foo();
                volatile int * b = bar();
                unsigned char c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf2_241367638096577054348.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf2_241367638096577054348.c:5:36: warning: initialization makes pointer from integer without a cast
                 volatile int * c = a + b;
                                    ^

        */
        warning("""
              unsigned char foo();
              volatile int * x() {
                unsigned char a = foo();
                unsigned char b = foo();
                volatile int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf3_0() {
        correct("""
              unsigned int foo();
              char bar();
              char x() {
                unsigned int a = foo();
                char b = bar();
                char c = a + b;
                return c;
              }
                """)
        correct("""
              unsigned int foo();
              char bar();
              unsigned int x() {
                unsigned int a = foo();
                char b = bar();
                unsigned int c = a + b;
                return c;
              }
                """)
        correct("""
              unsigned int foo();
              char x() {
                unsigned int a = foo();
                unsigned int b = foo();
                char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf3_1() {
        correct("""
              unsigned int foo();
              signed char bar();
              signed char x() {
                unsigned int a = foo();
                signed char b = bar();
                signed char c = a + b;
                return c;
              }
                """)
        correct("""
              unsigned int foo();
              signed char bar();
              unsigned int x() {
                unsigned int a = foo();
                signed char b = bar();
                unsigned int c = a + b;
                return c;
              }
                """)
        correct("""
              unsigned int foo();
              signed char x() {
                unsigned int a = foo();
                unsigned int b = foo();
                signed char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf3_2() {
        correct("""
              unsigned int foo();
              unsigned char bar();
              unsigned char x() {
                unsigned int a = foo();
                unsigned char b = bar();
                unsigned char c = a + b;
                return c;
              }
                """)
        correct("""
              unsigned int foo();
              unsigned char bar();
              unsigned int x() {
                unsigned int a = foo();
                unsigned char b = bar();
                unsigned int c = a + b;
                return c;
              }
                """)
        correct("""
              unsigned int foo();
              unsigned char x() {
                unsigned int a = foo();
                unsigned int b = foo();
                unsigned char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf3_3() {
        correct("""
              unsigned int foo();
              unsigned int bar();
              unsigned int x() {
                unsigned int a = foo();
                unsigned int b = bar();
                unsigned int c = a + b;
                return c;
              }
                """)
        correct("""
              unsigned int foo();
              unsigned int bar();
              unsigned int x() {
                unsigned int a = foo();
                unsigned int b = bar();
                unsigned int c = a + b;
                return c;
              }
                """)
        correct("""
              unsigned int foo();
              unsigned int x() {
                unsigned int a = foo();
                unsigned int b = foo();
                unsigned int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf3_4() {
        correct("""
              unsigned int foo();
              signed int bar();
              signed int x() {
                unsigned int a = foo();
                signed int b = bar();
                signed int c = a + b;
                return c;
              }
                """)
        correct("""
              unsigned int foo();
              signed int bar();
              unsigned int x() {
                unsigned int a = foo();
                signed int b = bar();
                unsigned int c = a + b;
                return c;
              }
                """)
        correct("""
              unsigned int foo();
              signed int x() {
                unsigned int a = foo();
                unsigned int b = foo();
                signed int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf3_5() {
        correct("""
              unsigned int foo();
              long bar();
              long x() {
                unsigned int a = foo();
                long b = bar();
                long c = a + b;
                return c;
              }
                """)
        correct("""
              unsigned int foo();
              long bar();
              unsigned int x() {
                unsigned int a = foo();
                long b = bar();
                unsigned int c = a + b;
                return c;
              }
                """)
        correct("""
              unsigned int foo();
              long x() {
                unsigned int a = foo();
                unsigned int b = foo();
                long c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf3_6() {
        correct("""
              unsigned int foo();
              float bar();
              float x() {
                unsigned int a = foo();
                float b = bar();
                float c = a + b;
                return c;
              }
                """)
        correct("""
              unsigned int foo();
              float bar();
              unsigned int x() {
                unsigned int a = foo();
                float b = bar();
                unsigned int c = a + b;
                return c;
              }
                """)
        correct("""
              unsigned int foo();
              float x() {
                unsigned int a = foo();
                unsigned int b = foo();
                float c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf3_7() {
        correct("""
              unsigned int foo();
              double bar();
              double x() {
                unsigned int a = foo();
                double b = bar();
                double c = a + b;
                return c;
              }
                """)
        correct("""
              unsigned int foo();
              double bar();
              unsigned int x() {
                unsigned int a = foo();
                double b = bar();
                unsigned int c = a + b;
                return c;
              }
                """)
        correct("""
              unsigned int foo();
              double x() {
                unsigned int a = foo();
                unsigned int b = foo();
                double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf3_8() {
        correct("""
              unsigned int foo();
              long double bar();
              long double x() {
                unsigned int a = foo();
                long double b = bar();
                long double c = a + b;
                return c;
              }
                """)
        correct("""
              unsigned int foo();
              long double bar();
              unsigned int x() {
                unsigned int a = foo();
                long double b = bar();
                unsigned int c = a + b;
                return c;
              }
                """)
        correct("""
              unsigned int foo();
              long double x() {
                unsigned int a = foo();
                unsigned int b = foo();
                long double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf3_9() {
        correct("""
              unsigned int foo();
              int * bar();
              int * x() {
                unsigned int a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf3_96379723529742515237.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf3_96379723529742515237.c:6:34: warning: initialization makes integer from pointer without a cast
                 unsigned int c = a + b;
                                  ^

        */
        warning("""
              unsigned int foo();
              int * bar();
              unsigned int x() {
                unsigned int a = foo();
                int * b = bar();
                unsigned int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf3_93768439396763315054.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf3_93768439396763315054.c:5:27: warning: initialization makes pointer from integer without a cast
                 int * c = a + b;
                           ^

        */
        warning("""
              unsigned int foo();
              int * x() {
                unsigned int a = foo();
                unsigned int b = foo();
                int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf3_10() {
        correct("""
              unsigned int foo();
              int ** bar();
              int ** x() {
                unsigned int a = foo();
                int ** b = bar();
                int ** c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf3_102077845075422698497.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf3_102077845075422698497.c:6:34: warning: initialization makes integer from pointer without a cast
                 unsigned int c = a + b;
                                  ^

        */
        warning("""
              unsigned int foo();
              int ** bar();
              unsigned int x() {
                unsigned int a = foo();
                int ** b = bar();
                unsigned int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf3_101644527075460684401.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf3_101644527075460684401.c:5:28: warning: initialization makes pointer from integer without a cast
                 int ** c = a + b;
                            ^

        */
        warning("""
              unsigned int foo();
              int ** x() {
                unsigned int a = foo();
                unsigned int b = foo();
                int ** c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf3_11() {
        correct("""
              unsigned int foo();
              char * bar();
              char * x() {
                unsigned int a = foo();
                char * b = bar();
                char * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf3_111672696420526867014.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf3_111672696420526867014.c:6:34: warning: initialization makes integer from pointer without a cast
                 unsigned int c = a + b;
                                  ^

        */
        warning("""
              unsigned int foo();
              char * bar();
              unsigned int x() {
                unsigned int a = foo();
                char * b = bar();
                unsigned int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf3_112037305149204510102.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf3_112037305149204510102.c:5:28: warning: initialization makes pointer from integer without a cast
                 char * c = a + b;
                            ^

        */
        warning("""
              unsigned int foo();
              char * x() {
                unsigned int a = foo();
                unsigned int b = foo();
                char * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf3_12() {
        correct("""
              unsigned int foo();
              double * bar();
              double * x() {
                unsigned int a = foo();
                double * b = bar();
                double * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf3_122406970699545767740.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf3_122406970699545767740.c:6:34: warning: initialization makes integer from pointer without a cast
                 unsigned int c = a + b;
                                  ^

        */
        warning("""
              unsigned int foo();
              double * bar();
              unsigned int x() {
                unsigned int a = foo();
                double * b = bar();
                unsigned int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf3_126078684856198990594.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf3_126078684856198990594.c:5:30: warning: initialization makes pointer from integer without a cast
                 double * c = a + b;
                              ^

        */
        warning("""
              unsigned int foo();
              double * x() {
                unsigned int a = foo();
                unsigned int b = foo();
                double * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf3_13() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf3_13551130887860876160.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf3_13551130887860876160.c:8:32: error: invalid operands to binary + (have 'unsigned int' and 'struct S')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              unsigned int foo();
              struct S bar();
              struct S x() {
                unsigned int a = foo();
                struct S b = bar();
                struct S c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf3_138552926285035997479.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf3_138552926285035997479.c:8:36: error: invalid operands to binary + (have 'unsigned int' and 'struct S')
                 unsigned int c = a + b;
                                    ^

        */
        error("""
              struct S { int x; int y; };

              unsigned int foo();
              struct S bar();
              unsigned int x() {
                unsigned int a = foo();
                struct S b = bar();
                unsigned int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf3_133782852804845870775.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf3_133782852804845870775.c:7:24: error: invalid initializer
                 struct S c = a + b;
                        ^

        */
        error("""
              struct S { int x; int y; };

              unsigned int foo();
              struct S x() {
                unsigned int a = foo();
                unsigned int b = foo();
                struct S c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf3_14() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf3_142680091542882959168.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf3_142680091542882959168.c:8:32: error: invalid operands to binary + (have 'unsigned int' and 'struct T')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              unsigned int foo();
              struct T bar();
              struct T x() {
                unsigned int a = foo();
                struct T b = bar();
                struct T c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf3_147414627512653394631.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf3_147414627512653394631.c:8:36: error: invalid operands to binary + (have 'unsigned int' and 'struct T')
                 unsigned int c = a + b;
                                    ^

        */
        error("""
              struct T { int x; int y; int z; };

              unsigned int foo();
              struct T bar();
              unsigned int x() {
                unsigned int a = foo();
                struct T b = bar();
                unsigned int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf3_147940865434625421458.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf3_147940865434625421458.c:7:24: error: invalid initializer
                 struct T c = a + b;
                        ^

        */
        error("""
              struct T { int x; int y; int z; };

              unsigned int foo();
              struct T x() {
                unsigned int a = foo();
                unsigned int b = foo();
                struct T c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf3_15() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf3_157922156848469453507.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf3_157922156848469453507.c:8:40: error: invalid operands to binary + (have 'unsigned int' and 'struct_anonymous')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              unsigned int foo();
              struct_anonymous bar();
              struct_anonymous x() {
                unsigned int a = foo();
                struct_anonymous b = bar();
                struct_anonymous c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf3_151568772010976615923.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf3_151568772010976615923.c:8:36: error: invalid operands to binary + (have 'unsigned int' and 'struct_anonymous')
                 unsigned int c = a + b;
                                    ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              unsigned int foo();
              struct_anonymous bar();
              unsigned int x() {
                unsigned int a = foo();
                struct_anonymous b = bar();
                unsigned int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf3_155990529660262012033.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf3_155990529660262012033.c:7:17: error: invalid initializer
                 struct_anonymous c = a + b;
                 ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              unsigned int foo();
              struct_anonymous x() {
                unsigned int a = foo();
                unsigned int b = foo();
                struct_anonymous c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf3_16() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf3_169187361330073383066.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf3_169187361330073383066.c:5:24: error: invalid initializer
                 struct { int a; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf3_169187361330073383066.c:6:41: error: invalid operands to binary + (have 'unsigned int' and 'struct <anonymous>')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf3_169187361330073383066.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              unsigned int foo();
              struct { int a; } bar();
              struct { int a; } x() {
                unsigned int a = foo();
                struct { int a; } b = bar();
                struct { int a; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf3_167257300627229565131.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf3_167257300627229565131.c:5:24: error: invalid initializer
                 struct { int a; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf3_167257300627229565131.c:6:36: error: invalid operands to binary + (have 'unsigned int' and 'struct <anonymous>')
                 unsigned int c = a + b;
                                    ^

        */
        error("""
              unsigned int foo();
              struct { int a; } bar();
              unsigned int x() {
                unsigned int a = foo();
                struct { int a; } b = bar();
                unsigned int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf3_168077882127449486087.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf3_168077882127449486087.c:5:24: error: invalid initializer
                 struct { int a; } c = a + b;
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf3_168077882127449486087.c:6:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              unsigned int foo();
              struct { int a; } x() {
                unsigned int a = foo();
                unsigned int b = foo();
                struct { int a; } c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf3_17() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf3_176828624894979738594.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf3_176828624894979738594.c:5:24: error: invalid initializer
                 struct { float b; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf3_176828624894979738594.c:6:43: error: invalid operands to binary + (have 'unsigned int' and 'struct <anonymous>')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf3_176828624894979738594.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              unsigned int foo();
              struct { float b; } bar();
              struct { float b; } x() {
                unsigned int a = foo();
                struct { float b; } b = bar();
                struct { float b; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf3_171206469846493890551.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf3_171206469846493890551.c:5:24: error: invalid initializer
                 struct { float b; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf3_171206469846493890551.c:6:36: error: invalid operands to binary + (have 'unsigned int' and 'struct <anonymous>')
                 unsigned int c = a + b;
                                    ^

        */
        error("""
              unsigned int foo();
              struct { float b; } bar();
              unsigned int x() {
                unsigned int a = foo();
                struct { float b; } b = bar();
                unsigned int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf3_175736118032725547079.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf3_175736118032725547079.c:5:24: error: invalid initializer
                 struct { float b; } c = a + b;
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf3_175736118032725547079.c:6:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              unsigned int foo();
              struct { float b; } x() {
                unsigned int a = foo();
                unsigned int b = foo();
                struct { float b; } c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf3_18() {
        correct("""
              unsigned int foo();
              volatile int bar();
              volatile int x() {
                unsigned int a = foo();
                volatile int b = bar();
                volatile int c = a + b;
                return c;
              }
                """)
        correct("""
              unsigned int foo();
              volatile int bar();
              unsigned int x() {
                unsigned int a = foo();
                volatile int b = bar();
                unsigned int c = a + b;
                return c;
              }
                """)
        correct("""
              unsigned int foo();
              volatile int x() {
                unsigned int a = foo();
                unsigned int b = foo();
                volatile int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf3_19() {
        correct("""
              unsigned int foo();
              const int bar();
              const int x() {
                unsigned int a = foo();
                const int b = bar();
                const int c = a + b;
                return c;
              }
                """)
        correct("""
              unsigned int foo();
              const int bar();
              unsigned int x() {
                unsigned int a = foo();
                const int b = bar();
                unsigned int c = a + b;
                return c;
              }
                """)
        correct("""
              unsigned int foo();
              const int x() {
                unsigned int a = foo();
                unsigned int b = foo();
                const int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf3_20() {
        correct("""
              unsigned int foo();
              const double bar();
              const double x() {
                unsigned int a = foo();
                const double b = bar();
                const double c = a + b;
                return c;
              }
                """)
        correct("""
              unsigned int foo();
              const double bar();
              unsigned int x() {
                unsigned int a = foo();
                const double b = bar();
                unsigned int c = a + b;
                return c;
              }
                """)
        correct("""
              unsigned int foo();
              const double x() {
                unsigned int a = foo();
                unsigned int b = foo();
                const double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf3_21() {
        correct("""
              unsigned int foo();
              volatile double bar();
              volatile double x() {
                unsigned int a = foo();
                volatile double b = bar();
                volatile double c = a + b;
                return c;
              }
                """)
        correct("""
              unsigned int foo();
              volatile double bar();
              unsigned int x() {
                unsigned int a = foo();
                volatile double b = bar();
                unsigned int c = a + b;
                return c;
              }
                """)
        correct("""
              unsigned int foo();
              volatile double x() {
                unsigned int a = foo();
                unsigned int b = foo();
                volatile double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf3_22() {
        correct("""
              unsigned int foo();
              int * bar();
              int * x() {
                unsigned int a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf3_223998267040601843398.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf3_223998267040601843398.c:6:34: warning: initialization makes integer from pointer without a cast
                 unsigned int c = a + b;
                                  ^

        */
        warning("""
              unsigned int foo();
              int * bar();
              unsigned int x() {
                unsigned int a = foo();
                int * b = bar();
                unsigned int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf3_223943073077844232538.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf3_223943073077844232538.c:5:27: warning: initialization makes pointer from integer without a cast
                 int * c = a + b;
                           ^

        */
        warning("""
              unsigned int foo();
              int * x() {
                unsigned int a = foo();
                unsigned int b = foo();
                int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf3_23() {
        correct("""
              unsigned int foo();
              const int * bar();
              const int * x() {
                unsigned int a = foo();
                const int * b = bar();
                const int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf3_236715109025651815167.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf3_236715109025651815167.c:6:34: warning: initialization makes integer from pointer without a cast
                 unsigned int c = a + b;
                                  ^

        */
        warning("""
              unsigned int foo();
              const int * bar();
              unsigned int x() {
                unsigned int a = foo();
                const int * b = bar();
                unsigned int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf3_235242068906078979766.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf3_235242068906078979766.c:5:33: warning: initialization makes pointer from integer without a cast
                 const int * c = a + b;
                                 ^

        */
        warning("""
              unsigned int foo();
              const int * x() {
                unsigned int a = foo();
                unsigned int b = foo();
                const int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf3_24() {
        correct("""
              unsigned int foo();
              volatile int * bar();
              volatile int * x() {
                unsigned int a = foo();
                volatile int * b = bar();
                volatile int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf3_241335125549437469484.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf3_241335125549437469484.c:6:34: warning: initialization makes integer from pointer without a cast
                 unsigned int c = a + b;
                                  ^

        */
        warning("""
              unsigned int foo();
              volatile int * bar();
              unsigned int x() {
                unsigned int a = foo();
                volatile int * b = bar();
                unsigned int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf3_248179272208142466811.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf3_248179272208142466811.c:5:36: warning: initialization makes pointer from integer without a cast
                 volatile int * c = a + b;
                                    ^

        */
        warning("""
              unsigned int foo();
              volatile int * x() {
                unsigned int a = foo();
                unsigned int b = foo();
                volatile int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf4_0() {
        correct("""
              signed int foo();
              char bar();
              char x() {
                signed int a = foo();
                char b = bar();
                char c = a + b;
                return c;
              }
                """)
        correct("""
              signed int foo();
              char bar();
              signed int x() {
                signed int a = foo();
                char b = bar();
                signed int c = a + b;
                return c;
              }
                """)
        correct("""
              signed int foo();
              char x() {
                signed int a = foo();
                signed int b = foo();
                char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf4_1() {
        correct("""
              signed int foo();
              signed char bar();
              signed char x() {
                signed int a = foo();
                signed char b = bar();
                signed char c = a + b;
                return c;
              }
                """)
        correct("""
              signed int foo();
              signed char bar();
              signed int x() {
                signed int a = foo();
                signed char b = bar();
                signed int c = a + b;
                return c;
              }
                """)
        correct("""
              signed int foo();
              signed char x() {
                signed int a = foo();
                signed int b = foo();
                signed char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf4_2() {
        correct("""
              signed int foo();
              unsigned char bar();
              unsigned char x() {
                signed int a = foo();
                unsigned char b = bar();
                unsigned char c = a + b;
                return c;
              }
                """)
        correct("""
              signed int foo();
              unsigned char bar();
              signed int x() {
                signed int a = foo();
                unsigned char b = bar();
                signed int c = a + b;
                return c;
              }
                """)
        correct("""
              signed int foo();
              unsigned char x() {
                signed int a = foo();
                signed int b = foo();
                unsigned char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf4_3() {
        correct("""
              signed int foo();
              unsigned int bar();
              unsigned int x() {
                signed int a = foo();
                unsigned int b = bar();
                unsigned int c = a + b;
                return c;
              }
                """)
        correct("""
              signed int foo();
              unsigned int bar();
              signed int x() {
                signed int a = foo();
                unsigned int b = bar();
                signed int c = a + b;
                return c;
              }
                """)
        correct("""
              signed int foo();
              unsigned int x() {
                signed int a = foo();
                signed int b = foo();
                unsigned int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf4_4() {
        correct("""
              signed int foo();
              signed int bar();
              signed int x() {
                signed int a = foo();
                signed int b = bar();
                signed int c = a + b;
                return c;
              }
                """)
        correct("""
              signed int foo();
              signed int bar();
              signed int x() {
                signed int a = foo();
                signed int b = bar();
                signed int c = a + b;
                return c;
              }
                """)
        correct("""
              signed int foo();
              signed int x() {
                signed int a = foo();
                signed int b = foo();
                signed int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf4_5() {
        correct("""
              signed int foo();
              long bar();
              long x() {
                signed int a = foo();
                long b = bar();
                long c = a + b;
                return c;
              }
                """)
        correct("""
              signed int foo();
              long bar();
              signed int x() {
                signed int a = foo();
                long b = bar();
                signed int c = a + b;
                return c;
              }
                """)
        correct("""
              signed int foo();
              long x() {
                signed int a = foo();
                signed int b = foo();
                long c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf4_6() {
        correct("""
              signed int foo();
              float bar();
              float x() {
                signed int a = foo();
                float b = bar();
                float c = a + b;
                return c;
              }
                """)
        correct("""
              signed int foo();
              float bar();
              signed int x() {
                signed int a = foo();
                float b = bar();
                signed int c = a + b;
                return c;
              }
                """)
        correct("""
              signed int foo();
              float x() {
                signed int a = foo();
                signed int b = foo();
                float c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf4_7() {
        correct("""
              signed int foo();
              double bar();
              double x() {
                signed int a = foo();
                double b = bar();
                double c = a + b;
                return c;
              }
                """)
        correct("""
              signed int foo();
              double bar();
              signed int x() {
                signed int a = foo();
                double b = bar();
                signed int c = a + b;
                return c;
              }
                """)
        correct("""
              signed int foo();
              double x() {
                signed int a = foo();
                signed int b = foo();
                double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf4_8() {
        correct("""
              signed int foo();
              long double bar();
              long double x() {
                signed int a = foo();
                long double b = bar();
                long double c = a + b;
                return c;
              }
                """)
        correct("""
              signed int foo();
              long double bar();
              signed int x() {
                signed int a = foo();
                long double b = bar();
                signed int c = a + b;
                return c;
              }
                """)
        correct("""
              signed int foo();
              long double x() {
                signed int a = foo();
                signed int b = foo();
                long double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf4_9() {
        correct("""
              signed int foo();
              int * bar();
              int * x() {
                signed int a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf4_98759341160494028717.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf4_98759341160494028717.c:6:32: warning: initialization makes integer from pointer without a cast
                 signed int c = a + b;
                                ^

        */
        warning("""
              signed int foo();
              int * bar();
              signed int x() {
                signed int a = foo();
                int * b = bar();
                signed int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf4_92133786373365466646.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf4_92133786373365466646.c:5:27: warning: initialization makes pointer from integer without a cast
                 int * c = a + b;
                           ^

        */
        warning("""
              signed int foo();
              int * x() {
                signed int a = foo();
                signed int b = foo();
                int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf4_10() {
        correct("""
              signed int foo();
              int ** bar();
              int ** x() {
                signed int a = foo();
                int ** b = bar();
                int ** c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf4_10671303022391475286.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf4_10671303022391475286.c:6:32: warning: initialization makes integer from pointer without a cast
                 signed int c = a + b;
                                ^

        */
        warning("""
              signed int foo();
              int ** bar();
              signed int x() {
                signed int a = foo();
                int ** b = bar();
                signed int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf4_103311926960136961009.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf4_103311926960136961009.c:5:28: warning: initialization makes pointer from integer without a cast
                 int ** c = a + b;
                            ^

        */
        warning("""
              signed int foo();
              int ** x() {
                signed int a = foo();
                signed int b = foo();
                int ** c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf4_11() {
        correct("""
              signed int foo();
              char * bar();
              char * x() {
                signed int a = foo();
                char * b = bar();
                char * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf4_117744039147173798998.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf4_117744039147173798998.c:6:32: warning: initialization makes integer from pointer without a cast
                 signed int c = a + b;
                                ^

        */
        warning("""
              signed int foo();
              char * bar();
              signed int x() {
                signed int a = foo();
                char * b = bar();
                signed int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf4_118992711322532657190.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf4_118992711322532657190.c:5:28: warning: initialization makes pointer from integer without a cast
                 char * c = a + b;
                            ^

        */
        warning("""
              signed int foo();
              char * x() {
                signed int a = foo();
                signed int b = foo();
                char * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf4_12() {
        correct("""
              signed int foo();
              double * bar();
              double * x() {
                signed int a = foo();
                double * b = bar();
                double * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf4_121894255651214676125.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf4_121894255651214676125.c:6:32: warning: initialization makes integer from pointer without a cast
                 signed int c = a + b;
                                ^

        */
        warning("""
              signed int foo();
              double * bar();
              signed int x() {
                signed int a = foo();
                double * b = bar();
                signed int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf4_125723260668409293933.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf4_125723260668409293933.c:5:30: warning: initialization makes pointer from integer without a cast
                 double * c = a + b;
                              ^

        */
        warning("""
              signed int foo();
              double * x() {
                signed int a = foo();
                signed int b = foo();
                double * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf4_13() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf4_13725831496808266662.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf4_13725831496808266662.c:8:32: error: invalid operands to binary + (have 'int' and 'struct S')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              signed int foo();
              struct S bar();
              struct S x() {
                signed int a = foo();
                struct S b = bar();
                struct S c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf4_13213972295995358191.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf4_13213972295995358191.c:8:34: error: invalid operands to binary + (have 'int' and 'struct S')
                 signed int c = a + b;
                                  ^

        */
        error("""
              struct S { int x; int y; };

              signed int foo();
              struct S bar();
              signed int x() {
                signed int a = foo();
                struct S b = bar();
                signed int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf4_132980254441836357722.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf4_132980254441836357722.c:7:24: error: invalid initializer
                 struct S c = a + b;
                        ^

        */
        error("""
              struct S { int x; int y; };

              signed int foo();
              struct S x() {
                signed int a = foo();
                signed int b = foo();
                struct S c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf4_14() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf4_14789741422210447952.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf4_14789741422210447952.c:8:32: error: invalid operands to binary + (have 'int' and 'struct T')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              signed int foo();
              struct T bar();
              struct T x() {
                signed int a = foo();
                struct T b = bar();
                struct T c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf4_146810848184679189618.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf4_146810848184679189618.c:8:34: error: invalid operands to binary + (have 'int' and 'struct T')
                 signed int c = a + b;
                                  ^

        */
        error("""
              struct T { int x; int y; int z; };

              signed int foo();
              struct T bar();
              signed int x() {
                signed int a = foo();
                struct T b = bar();
                signed int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf4_143695527815478907076.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf4_143695527815478907076.c:7:24: error: invalid initializer
                 struct T c = a + b;
                        ^

        */
        error("""
              struct T { int x; int y; int z; };

              signed int foo();
              struct T x() {
                signed int a = foo();
                signed int b = foo();
                struct T c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf4_15() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf4_152764457432856445122.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf4_152764457432856445122.c:8:40: error: invalid operands to binary + (have 'int' and 'struct_anonymous')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              signed int foo();
              struct_anonymous bar();
              struct_anonymous x() {
                signed int a = foo();
                struct_anonymous b = bar();
                struct_anonymous c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf4_154653522879660634652.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf4_154653522879660634652.c:8:34: error: invalid operands to binary + (have 'int' and 'struct_anonymous')
                 signed int c = a + b;
                                  ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              signed int foo();
              struct_anonymous bar();
              signed int x() {
                signed int a = foo();
                struct_anonymous b = bar();
                signed int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf4_151763983491906542997.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf4_151763983491906542997.c:7:17: error: invalid initializer
                 struct_anonymous c = a + b;
                 ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              signed int foo();
              struct_anonymous x() {
                signed int a = foo();
                signed int b = foo();
                struct_anonymous c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf4_16() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf4_165616232236571505961.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf4_165616232236571505961.c:5:24: error: invalid initializer
                 struct { int a; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf4_165616232236571505961.c:6:41: error: invalid operands to binary + (have 'int' and 'struct <anonymous>')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf4_165616232236571505961.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              signed int foo();
              struct { int a; } bar();
              struct { int a; } x() {
                signed int a = foo();
                struct { int a; } b = bar();
                struct { int a; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf4_16930343158175651097.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf4_16930343158175651097.c:5:24: error: invalid initializer
                 struct { int a; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf4_16930343158175651097.c:6:34: error: invalid operands to binary + (have 'int' and 'struct <anonymous>')
                 signed int c = a + b;
                                  ^

        */
        error("""
              signed int foo();
              struct { int a; } bar();
              signed int x() {
                signed int a = foo();
                struct { int a; } b = bar();
                signed int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf4_169145679632150181338.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf4_169145679632150181338.c:5:24: error: invalid initializer
                 struct { int a; } c = a + b;
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf4_169145679632150181338.c:6:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              signed int foo();
              struct { int a; } x() {
                signed int a = foo();
                signed int b = foo();
                struct { int a; } c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf4_17() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf4_177633021844005194328.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf4_177633021844005194328.c:5:24: error: invalid initializer
                 struct { float b; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf4_177633021844005194328.c:6:43: error: invalid operands to binary + (have 'int' and 'struct <anonymous>')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf4_177633021844005194328.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              signed int foo();
              struct { float b; } bar();
              struct { float b; } x() {
                signed int a = foo();
                struct { float b; } b = bar();
                struct { float b; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf4_174948216770272162353.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf4_174948216770272162353.c:5:24: error: invalid initializer
                 struct { float b; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf4_174948216770272162353.c:6:34: error: invalid operands to binary + (have 'int' and 'struct <anonymous>')
                 signed int c = a + b;
                                  ^

        */
        error("""
              signed int foo();
              struct { float b; } bar();
              signed int x() {
                signed int a = foo();
                struct { float b; } b = bar();
                signed int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf4_175400674879481691825.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf4_175400674879481691825.c:5:24: error: invalid initializer
                 struct { float b; } c = a + b;
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf4_175400674879481691825.c:6:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              signed int foo();
              struct { float b; } x() {
                signed int a = foo();
                signed int b = foo();
                struct { float b; } c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf4_18() {
        correct("""
              signed int foo();
              volatile int bar();
              volatile int x() {
                signed int a = foo();
                volatile int b = bar();
                volatile int c = a + b;
                return c;
              }
                """)
        correct("""
              signed int foo();
              volatile int bar();
              signed int x() {
                signed int a = foo();
                volatile int b = bar();
                signed int c = a + b;
                return c;
              }
                """)
        correct("""
              signed int foo();
              volatile int x() {
                signed int a = foo();
                signed int b = foo();
                volatile int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf4_19() {
        correct("""
              signed int foo();
              const int bar();
              const int x() {
                signed int a = foo();
                const int b = bar();
                const int c = a + b;
                return c;
              }
                """)
        correct("""
              signed int foo();
              const int bar();
              signed int x() {
                signed int a = foo();
                const int b = bar();
                signed int c = a + b;
                return c;
              }
                """)
        correct("""
              signed int foo();
              const int x() {
                signed int a = foo();
                signed int b = foo();
                const int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf4_20() {
        correct("""
              signed int foo();
              const double bar();
              const double x() {
                signed int a = foo();
                const double b = bar();
                const double c = a + b;
                return c;
              }
                """)
        correct("""
              signed int foo();
              const double bar();
              signed int x() {
                signed int a = foo();
                const double b = bar();
                signed int c = a + b;
                return c;
              }
                """)
        correct("""
              signed int foo();
              const double x() {
                signed int a = foo();
                signed int b = foo();
                const double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf4_21() {
        correct("""
              signed int foo();
              volatile double bar();
              volatile double x() {
                signed int a = foo();
                volatile double b = bar();
                volatile double c = a + b;
                return c;
              }
                """)
        correct("""
              signed int foo();
              volatile double bar();
              signed int x() {
                signed int a = foo();
                volatile double b = bar();
                signed int c = a + b;
                return c;
              }
                """)
        correct("""
              signed int foo();
              volatile double x() {
                signed int a = foo();
                signed int b = foo();
                volatile double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf4_22() {
        correct("""
              signed int foo();
              int * bar();
              int * x() {
                signed int a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf4_228367477281205485801.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf4_228367477281205485801.c:6:32: warning: initialization makes integer from pointer without a cast
                 signed int c = a + b;
                                ^

        */
        warning("""
              signed int foo();
              int * bar();
              signed int x() {
                signed int a = foo();
                int * b = bar();
                signed int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf4_22115289203615097968.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf4_22115289203615097968.c:5:27: warning: initialization makes pointer from integer without a cast
                 int * c = a + b;
                           ^

        */
        warning("""
              signed int foo();
              int * x() {
                signed int a = foo();
                signed int b = foo();
                int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf4_23() {
        correct("""
              signed int foo();
              const int * bar();
              const int * x() {
                signed int a = foo();
                const int * b = bar();
                const int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf4_238425600827645281583.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf4_238425600827645281583.c:6:32: warning: initialization makes integer from pointer without a cast
                 signed int c = a + b;
                                ^

        */
        warning("""
              signed int foo();
              const int * bar();
              signed int x() {
                signed int a = foo();
                const int * b = bar();
                signed int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf4_239147181275792215691.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf4_239147181275792215691.c:5:33: warning: initialization makes pointer from integer without a cast
                 const int * c = a + b;
                                 ^

        */
        warning("""
              signed int foo();
              const int * x() {
                signed int a = foo();
                signed int b = foo();
                const int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf4_24() {
        correct("""
              signed int foo();
              volatile int * bar();
              volatile int * x() {
                signed int a = foo();
                volatile int * b = bar();
                volatile int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf4_244775712815330397382.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf4_244775712815330397382.c:6:32: warning: initialization makes integer from pointer without a cast
                 signed int c = a + b;
                                ^

        */
        warning("""
              signed int foo();
              volatile int * bar();
              signed int x() {
                signed int a = foo();
                volatile int * b = bar();
                signed int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf4_24494628290838792915.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf4_24494628290838792915.c:5:36: warning: initialization makes pointer from integer without a cast
                 volatile int * c = a + b;
                                    ^

        */
        warning("""
              signed int foo();
              volatile int * x() {
                signed int a = foo();
                signed int b = foo();
                volatile int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf5_0() {
        correct("""
              long foo();
              char bar();
              char x() {
                long a = foo();
                char b = bar();
                char c = a + b;
                return c;
              }
                """)
        correct("""
              long foo();
              char bar();
              long x() {
                long a = foo();
                char b = bar();
                long c = a + b;
                return c;
              }
                """)
        correct("""
              long foo();
              char x() {
                long a = foo();
                long b = foo();
                char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf5_1() {
        correct("""
              long foo();
              signed char bar();
              signed char x() {
                long a = foo();
                signed char b = bar();
                signed char c = a + b;
                return c;
              }
                """)
        correct("""
              long foo();
              signed char bar();
              long x() {
                long a = foo();
                signed char b = bar();
                long c = a + b;
                return c;
              }
                """)
        correct("""
              long foo();
              signed char x() {
                long a = foo();
                long b = foo();
                signed char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf5_2() {
        correct("""
              long foo();
              unsigned char bar();
              unsigned char x() {
                long a = foo();
                unsigned char b = bar();
                unsigned char c = a + b;
                return c;
              }
                """)
        correct("""
              long foo();
              unsigned char bar();
              long x() {
                long a = foo();
                unsigned char b = bar();
                long c = a + b;
                return c;
              }
                """)
        correct("""
              long foo();
              unsigned char x() {
                long a = foo();
                long b = foo();
                unsigned char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf5_3() {
        correct("""
              long foo();
              unsigned int bar();
              unsigned int x() {
                long a = foo();
                unsigned int b = bar();
                unsigned int c = a + b;
                return c;
              }
                """)
        correct("""
              long foo();
              unsigned int bar();
              long x() {
                long a = foo();
                unsigned int b = bar();
                long c = a + b;
                return c;
              }
                """)
        correct("""
              long foo();
              unsigned int x() {
                long a = foo();
                long b = foo();
                unsigned int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf5_4() {
        correct("""
              long foo();
              signed int bar();
              signed int x() {
                long a = foo();
                signed int b = bar();
                signed int c = a + b;
                return c;
              }
                """)
        correct("""
              long foo();
              signed int bar();
              long x() {
                long a = foo();
                signed int b = bar();
                long c = a + b;
                return c;
              }
                """)
        correct("""
              long foo();
              signed int x() {
                long a = foo();
                long b = foo();
                signed int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf5_5() {
        correct("""
              long foo();
              long bar();
              long x() {
                long a = foo();
                long b = bar();
                long c = a + b;
                return c;
              }
                """)
        correct("""
              long foo();
              long bar();
              long x() {
                long a = foo();
                long b = bar();
                long c = a + b;
                return c;
              }
                """)
        correct("""
              long foo();
              long x() {
                long a = foo();
                long b = foo();
                long c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf5_6() {
        correct("""
              long foo();
              float bar();
              float x() {
                long a = foo();
                float b = bar();
                float c = a + b;
                return c;
              }
                """)
        correct("""
              long foo();
              float bar();
              long x() {
                long a = foo();
                float b = bar();
                long c = a + b;
                return c;
              }
                """)
        correct("""
              long foo();
              float x() {
                long a = foo();
                long b = foo();
                float c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf5_7() {
        correct("""
              long foo();
              double bar();
              double x() {
                long a = foo();
                double b = bar();
                double c = a + b;
                return c;
              }
                """)
        correct("""
              long foo();
              double bar();
              long x() {
                long a = foo();
                double b = bar();
                long c = a + b;
                return c;
              }
                """)
        correct("""
              long foo();
              double x() {
                long a = foo();
                long b = foo();
                double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf5_8() {
        correct("""
              long foo();
              long double bar();
              long double x() {
                long a = foo();
                long double b = bar();
                long double c = a + b;
                return c;
              }
                """)
        correct("""
              long foo();
              long double bar();
              long x() {
                long a = foo();
                long double b = bar();
                long c = a + b;
                return c;
              }
                """)
        correct("""
              long foo();
              long double x() {
                long a = foo();
                long b = foo();
                long double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf5_9() {
        correct("""
              long foo();
              int * bar();
              int * x() {
                long a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf5_98056121926902119574.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf5_98056121926902119574.c:6:26: warning: initialization makes integer from pointer without a cast
                 long c = a + b;
                          ^

        */
        warning("""
              long foo();
              int * bar();
              long x() {
                long a = foo();
                int * b = bar();
                long c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf5_97614047197586562746.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf5_97614047197586562746.c:5:27: warning: initialization makes pointer from integer without a cast
                 int * c = a + b;
                           ^

        */
        warning("""
              long foo();
              int * x() {
                long a = foo();
                long b = foo();
                int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf5_10() {
        correct("""
              long foo();
              int ** bar();
              int ** x() {
                long a = foo();
                int ** b = bar();
                int ** c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf5_104037505672897198345.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf5_104037505672897198345.c:6:26: warning: initialization makes integer from pointer without a cast
                 long c = a + b;
                          ^

        */
        warning("""
              long foo();
              int ** bar();
              long x() {
                long a = foo();
                int ** b = bar();
                long c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf5_10910595977902759457.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf5_10910595977902759457.c:5:28: warning: initialization makes pointer from integer without a cast
                 int ** c = a + b;
                            ^

        */
        warning("""
              long foo();
              int ** x() {
                long a = foo();
                long b = foo();
                int ** c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf5_11() {
        correct("""
              long foo();
              char * bar();
              char * x() {
                long a = foo();
                char * b = bar();
                char * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf5_11435206847840493226.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf5_11435206847840493226.c:6:26: warning: initialization makes integer from pointer without a cast
                 long c = a + b;
                          ^

        */
        warning("""
              long foo();
              char * bar();
              long x() {
                long a = foo();
                char * b = bar();
                long c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf5_114201524371260021185.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf5_114201524371260021185.c:5:28: warning: initialization makes pointer from integer without a cast
                 char * c = a + b;
                            ^

        */
        warning("""
              long foo();
              char * x() {
                long a = foo();
                long b = foo();
                char * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf5_12() {
        correct("""
              long foo();
              double * bar();
              double * x() {
                long a = foo();
                double * b = bar();
                double * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf5_122148106381077609503.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf5_122148106381077609503.c:6:26: warning: initialization makes integer from pointer without a cast
                 long c = a + b;
                          ^

        */
        warning("""
              long foo();
              double * bar();
              long x() {
                long a = foo();
                double * b = bar();
                long c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf5_121685113523512136859.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf5_121685113523512136859.c:5:30: warning: initialization makes pointer from integer without a cast
                 double * c = a + b;
                              ^

        */
        warning("""
              long foo();
              double * x() {
                long a = foo();
                long b = foo();
                double * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf5_13() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf5_137376486238173447024.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf5_137376486238173447024.c:8:32: error: invalid operands to binary + (have 'long int' and 'struct S')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              long foo();
              struct S bar();
              struct S x() {
                long a = foo();
                struct S b = bar();
                struct S c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf5_137182809375860254892.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf5_137182809375860254892.c:8:28: error: invalid operands to binary + (have 'long int' and 'struct S')
                 long c = a + b;
                            ^

        */
        error("""
              struct S { int x; int y; };

              long foo();
              struct S bar();
              long x() {
                long a = foo();
                struct S b = bar();
                long c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf5_131708699182094981600.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf5_131708699182094981600.c:7:24: error: invalid initializer
                 struct S c = a + b;
                        ^

        */
        error("""
              struct S { int x; int y; };

              long foo();
              struct S x() {
                long a = foo();
                long b = foo();
                struct S c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf5_14() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf5_146295375084449638868.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf5_146295375084449638868.c:8:32: error: invalid operands to binary + (have 'long int' and 'struct T')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              long foo();
              struct T bar();
              struct T x() {
                long a = foo();
                struct T b = bar();
                struct T c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf5_141295810220017910025.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf5_141295810220017910025.c:8:28: error: invalid operands to binary + (have 'long int' and 'struct T')
                 long c = a + b;
                            ^

        */
        error("""
              struct T { int x; int y; int z; };

              long foo();
              struct T bar();
              long x() {
                long a = foo();
                struct T b = bar();
                long c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf5_141325025384926418168.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf5_141325025384926418168.c:7:24: error: invalid initializer
                 struct T c = a + b;
                        ^

        */
        error("""
              struct T { int x; int y; int z; };

              long foo();
              struct T x() {
                long a = foo();
                long b = foo();
                struct T c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf5_15() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf5_155719012729862025724.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf5_155719012729862025724.c:8:40: error: invalid operands to binary + (have 'long int' and 'struct_anonymous')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              long foo();
              struct_anonymous bar();
              struct_anonymous x() {
                long a = foo();
                struct_anonymous b = bar();
                struct_anonymous c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf5_15416360394567045608.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf5_15416360394567045608.c:8:28: error: invalid operands to binary + (have 'long int' and 'struct_anonymous')
                 long c = a + b;
                            ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              long foo();
              struct_anonymous bar();
              long x() {
                long a = foo();
                struct_anonymous b = bar();
                long c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf5_154567143488901324362.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf5_154567143488901324362.c:7:17: error: invalid initializer
                 struct_anonymous c = a + b;
                 ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              long foo();
              struct_anonymous x() {
                long a = foo();
                long b = foo();
                struct_anonymous c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf5_16() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf5_165792779414491524723.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf5_165792779414491524723.c:5:24: error: invalid initializer
                 struct { int a; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf5_165792779414491524723.c:6:41: error: invalid operands to binary + (have 'long int' and 'struct <anonymous>')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf5_165792779414491524723.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              long foo();
              struct { int a; } bar();
              struct { int a; } x() {
                long a = foo();
                struct { int a; } b = bar();
                struct { int a; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf5_162144067049658210934.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf5_162144067049658210934.c:5:24: error: invalid initializer
                 struct { int a; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf5_162144067049658210934.c:6:28: error: invalid operands to binary + (have 'long int' and 'struct <anonymous>')
                 long c = a + b;
                            ^

        */
        error("""
              long foo();
              struct { int a; } bar();
              long x() {
                long a = foo();
                struct { int a; } b = bar();
                long c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf5_161967637743063167020.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf5_161967637743063167020.c:5:24: error: invalid initializer
                 struct { int a; } c = a + b;
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf5_161967637743063167020.c:6:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              long foo();
              struct { int a; } x() {
                long a = foo();
                long b = foo();
                struct { int a; } c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf5_17() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf5_177360646711916270467.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf5_177360646711916270467.c:5:24: error: invalid initializer
                 struct { float b; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf5_177360646711916270467.c:6:43: error: invalid operands to binary + (have 'long int' and 'struct <anonymous>')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf5_177360646711916270467.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              long foo();
              struct { float b; } bar();
              struct { float b; } x() {
                long a = foo();
                struct { float b; } b = bar();
                struct { float b; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf5_173984336082097025693.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf5_173984336082097025693.c:5:24: error: invalid initializer
                 struct { float b; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf5_173984336082097025693.c:6:28: error: invalid operands to binary + (have 'long int' and 'struct <anonymous>')
                 long c = a + b;
                            ^

        */
        error("""
              long foo();
              struct { float b; } bar();
              long x() {
                long a = foo();
                struct { float b; } b = bar();
                long c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf5_171369913356377658212.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf5_171369913356377658212.c:5:24: error: invalid initializer
                 struct { float b; } c = a + b;
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf5_171369913356377658212.c:6:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              long foo();
              struct { float b; } x() {
                long a = foo();
                long b = foo();
                struct { float b; } c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf5_18() {
        correct("""
              long foo();
              volatile int bar();
              volatile int x() {
                long a = foo();
                volatile int b = bar();
                volatile int c = a + b;
                return c;
              }
                """)
        correct("""
              long foo();
              volatile int bar();
              long x() {
                long a = foo();
                volatile int b = bar();
                long c = a + b;
                return c;
              }
                """)
        correct("""
              long foo();
              volatile int x() {
                long a = foo();
                long b = foo();
                volatile int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf5_19() {
        correct("""
              long foo();
              const int bar();
              const int x() {
                long a = foo();
                const int b = bar();
                const int c = a + b;
                return c;
              }
                """)
        correct("""
              long foo();
              const int bar();
              long x() {
                long a = foo();
                const int b = bar();
                long c = a + b;
                return c;
              }
                """)
        correct("""
              long foo();
              const int x() {
                long a = foo();
                long b = foo();
                const int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf5_20() {
        correct("""
              long foo();
              const double bar();
              const double x() {
                long a = foo();
                const double b = bar();
                const double c = a + b;
                return c;
              }
                """)
        correct("""
              long foo();
              const double bar();
              long x() {
                long a = foo();
                const double b = bar();
                long c = a + b;
                return c;
              }
                """)
        correct("""
              long foo();
              const double x() {
                long a = foo();
                long b = foo();
                const double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf5_21() {
        correct("""
              long foo();
              volatile double bar();
              volatile double x() {
                long a = foo();
                volatile double b = bar();
                volatile double c = a + b;
                return c;
              }
                """)
        correct("""
              long foo();
              volatile double bar();
              long x() {
                long a = foo();
                volatile double b = bar();
                long c = a + b;
                return c;
              }
                """)
        correct("""
              long foo();
              volatile double x() {
                long a = foo();
                long b = foo();
                volatile double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf5_22() {
        correct("""
              long foo();
              int * bar();
              int * x() {
                long a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf5_225684954915482133220.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf5_225684954915482133220.c:6:26: warning: initialization makes integer from pointer without a cast
                 long c = a + b;
                          ^

        */
        warning("""
              long foo();
              int * bar();
              long x() {
                long a = foo();
                int * b = bar();
                long c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf5_221723806344870561504.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf5_221723806344870561504.c:5:27: warning: initialization makes pointer from integer without a cast
                 int * c = a + b;
                           ^

        */
        warning("""
              long foo();
              int * x() {
                long a = foo();
                long b = foo();
                int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf5_23() {
        correct("""
              long foo();
              const int * bar();
              const int * x() {
                long a = foo();
                const int * b = bar();
                const int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf5_237840487363841717312.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf5_237840487363841717312.c:6:26: warning: initialization makes integer from pointer without a cast
                 long c = a + b;
                          ^

        */
        warning("""
              long foo();
              const int * bar();
              long x() {
                long a = foo();
                const int * b = bar();
                long c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf5_234686803639533331226.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf5_234686803639533331226.c:5:33: warning: initialization makes pointer from integer without a cast
                 const int * c = a + b;
                                 ^

        */
        warning("""
              long foo();
              const int * x() {
                long a = foo();
                long b = foo();
                const int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf5_24() {
        correct("""
              long foo();
              volatile int * bar();
              volatile int * x() {
                long a = foo();
                volatile int * b = bar();
                volatile int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf5_24525416371842160688.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf5_24525416371842160688.c:6:26: warning: initialization makes integer from pointer without a cast
                 long c = a + b;
                          ^

        */
        warning("""
              long foo();
              volatile int * bar();
              long x() {
                long a = foo();
                volatile int * b = bar();
                long c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf5_2469856656346246767.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf5_2469856656346246767.c:5:36: warning: initialization makes pointer from integer without a cast
                 volatile int * c = a + b;
                                    ^

        */
        warning("""
              long foo();
              volatile int * x() {
                long a = foo();
                long b = foo();
                volatile int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf6_0() {
        correct("""
              float foo();
              char bar();
              char x() {
                float a = foo();
                char b = bar();
                char c = a + b;
                return c;
              }
                """)
        correct("""
              float foo();
              char bar();
              float x() {
                float a = foo();
                char b = bar();
                float c = a + b;
                return c;
              }
                """)
        correct("""
              float foo();
              char x() {
                float a = foo();
                float b = foo();
                char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf6_1() {
        correct("""
              float foo();
              signed char bar();
              signed char x() {
                float a = foo();
                signed char b = bar();
                signed char c = a + b;
                return c;
              }
                """)
        correct("""
              float foo();
              signed char bar();
              float x() {
                float a = foo();
                signed char b = bar();
                float c = a + b;
                return c;
              }
                """)
        correct("""
              float foo();
              signed char x() {
                float a = foo();
                float b = foo();
                signed char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf6_2() {
        correct("""
              float foo();
              unsigned char bar();
              unsigned char x() {
                float a = foo();
                unsigned char b = bar();
                unsigned char c = a + b;
                return c;
              }
                """)
        correct("""
              float foo();
              unsigned char bar();
              float x() {
                float a = foo();
                unsigned char b = bar();
                float c = a + b;
                return c;
              }
                """)
        correct("""
              float foo();
              unsigned char x() {
                float a = foo();
                float b = foo();
                unsigned char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf6_3() {
        correct("""
              float foo();
              unsigned int bar();
              unsigned int x() {
                float a = foo();
                unsigned int b = bar();
                unsigned int c = a + b;
                return c;
              }
                """)
        correct("""
              float foo();
              unsigned int bar();
              float x() {
                float a = foo();
                unsigned int b = bar();
                float c = a + b;
                return c;
              }
                """)
        correct("""
              float foo();
              unsigned int x() {
                float a = foo();
                float b = foo();
                unsigned int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf6_4() {
        correct("""
              float foo();
              signed int bar();
              signed int x() {
                float a = foo();
                signed int b = bar();
                signed int c = a + b;
                return c;
              }
                """)
        correct("""
              float foo();
              signed int bar();
              float x() {
                float a = foo();
                signed int b = bar();
                float c = a + b;
                return c;
              }
                """)
        correct("""
              float foo();
              signed int x() {
                float a = foo();
                float b = foo();
                signed int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf6_5() {
        correct("""
              float foo();
              long bar();
              long x() {
                float a = foo();
                long b = bar();
                long c = a + b;
                return c;
              }
                """)
        correct("""
              float foo();
              long bar();
              float x() {
                float a = foo();
                long b = bar();
                float c = a + b;
                return c;
              }
                """)
        correct("""
              float foo();
              long x() {
                float a = foo();
                float b = foo();
                long c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf6_6() {
        correct("""
              float foo();
              float bar();
              float x() {
                float a = foo();
                float b = bar();
                float c = a + b;
                return c;
              }
                """)
        correct("""
              float foo();
              float bar();
              float x() {
                float a = foo();
                float b = bar();
                float c = a + b;
                return c;
              }
                """)
        correct("""
              float foo();
              float x() {
                float a = foo();
                float b = foo();
                float c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf6_7() {
        correct("""
              float foo();
              double bar();
              double x() {
                float a = foo();
                double b = bar();
                double c = a + b;
                return c;
              }
                """)
        correct("""
              float foo();
              double bar();
              float x() {
                float a = foo();
                double b = bar();
                float c = a + b;
                return c;
              }
                """)
        correct("""
              float foo();
              double x() {
                float a = foo();
                float b = foo();
                double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf6_8() {
        correct("""
              float foo();
              long double bar();
              long double x() {
                float a = foo();
                long double b = bar();
                long double c = a + b;
                return c;
              }
                """)
        correct("""
              float foo();
              long double bar();
              float x() {
                float a = foo();
                long double b = bar();
                float c = a + b;
                return c;
              }
                """)
        correct("""
              float foo();
              long double x() {
                float a = foo();
                float b = foo();
                long double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf6_9() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf6_93878512878306721435.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf6_93878512878306721435.c:6:29: error: invalid operands to binary + (have 'float' and 'int *')
                 int * c = a + b;
                             ^

        */
        error("""
              float foo();
              int * bar();
              int * x() {
                float a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf6_95367441459735336442.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf6_95367441459735336442.c:6:29: error: invalid operands to binary + (have 'float' and 'int *')
                 float c = a + b;
                             ^

        */
        error("""
              float foo();
              int * bar();
              float x() {
                float a = foo();
                int * b = bar();
                float c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf6_94792496828239409972.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf6_94792496828239409972.c:5:27: error: incompatible types when initializing type 'int *' using type 'float'
                 int * c = a + b;
                           ^

        */
        error("""
              float foo();
              int * x() {
                float a = foo();
                float b = foo();
                int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf6_10() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf6_10789642021543103449.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf6_10789642021543103449.c:6:30: error: invalid operands to binary + (have 'float' and 'int **')
                 int ** c = a + b;
                              ^

        */
        error("""
              float foo();
              int ** bar();
              int ** x() {
                float a = foo();
                int ** b = bar();
                int ** c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf6_108973306742002241236.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf6_108973306742002241236.c:6:29: error: invalid operands to binary + (have 'float' and 'int **')
                 float c = a + b;
                             ^

        */
        error("""
              float foo();
              int ** bar();
              float x() {
                float a = foo();
                int ** b = bar();
                float c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf6_104098463836313147142.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf6_104098463836313147142.c:5:28: error: incompatible types when initializing type 'int **' using type 'float'
                 int ** c = a + b;
                            ^

        */
        error("""
              float foo();
              int ** x() {
                float a = foo();
                float b = foo();
                int ** c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf6_11() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf6_112158451665012583241.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf6_112158451665012583241.c:6:30: error: invalid operands to binary + (have 'float' and 'char *')
                 char * c = a + b;
                              ^

        */
        error("""
              float foo();
              char * bar();
              char * x() {
                float a = foo();
                char * b = bar();
                char * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf6_116343740370412868807.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf6_116343740370412868807.c:6:29: error: invalid operands to binary + (have 'float' and 'char *')
                 float c = a + b;
                             ^

        */
        error("""
              float foo();
              char * bar();
              float x() {
                float a = foo();
                char * b = bar();
                float c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf6_117811389000022039829.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf6_117811389000022039829.c:5:28: error: incompatible types when initializing type 'char *' using type 'float'
                 char * c = a + b;
                            ^

        */
        error("""
              float foo();
              char * x() {
                float a = foo();
                float b = foo();
                char * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf6_12() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf6_121782964864947667722.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf6_121782964864947667722.c:6:32: error: invalid operands to binary + (have 'float' and 'double *')
                 double * c = a + b;
                                ^

        */
        error("""
              float foo();
              double * bar();
              double * x() {
                float a = foo();
                double * b = bar();
                double * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf6_128487266179699867096.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf6_128487266179699867096.c:6:29: error: invalid operands to binary + (have 'float' and 'double *')
                 float c = a + b;
                             ^

        */
        error("""
              float foo();
              double * bar();
              float x() {
                float a = foo();
                double * b = bar();
                float c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf6_129201833737985789894.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf6_129201833737985789894.c:5:30: error: incompatible types when initializing type 'double *' using type 'float'
                 double * c = a + b;
                              ^

        */
        error("""
              float foo();
              double * x() {
                float a = foo();
                float b = foo();
                double * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf6_13() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf6_131409663210416099415.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf6_131409663210416099415.c:8:32: error: invalid operands to binary + (have 'float' and 'struct S')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              float foo();
              struct S bar();
              struct S x() {
                float a = foo();
                struct S b = bar();
                struct S c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf6_138413554455699055285.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf6_138413554455699055285.c:8:29: error: invalid operands to binary + (have 'float' and 'struct S')
                 float c = a + b;
                             ^

        */
        error("""
              struct S { int x; int y; };

              float foo();
              struct S bar();
              float x() {
                float a = foo();
                struct S b = bar();
                float c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf6_134591240826260166273.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf6_134591240826260166273.c:7:24: error: invalid initializer
                 struct S c = a + b;
                        ^

        */
        error("""
              struct S { int x; int y; };

              float foo();
              struct S x() {
                float a = foo();
                float b = foo();
                struct S c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf6_14() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf6_14328867168426803410.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf6_14328867168426803410.c:8:32: error: invalid operands to binary + (have 'float' and 'struct T')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              float foo();
              struct T bar();
              struct T x() {
                float a = foo();
                struct T b = bar();
                struct T c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf6_148815008241510803595.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf6_148815008241510803595.c:8:29: error: invalid operands to binary + (have 'float' and 'struct T')
                 float c = a + b;
                             ^

        */
        error("""
              struct T { int x; int y; int z; };

              float foo();
              struct T bar();
              float x() {
                float a = foo();
                struct T b = bar();
                float c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf6_141183885489265750145.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf6_141183885489265750145.c:7:24: error: invalid initializer
                 struct T c = a + b;
                        ^

        */
        error("""
              struct T { int x; int y; int z; };

              float foo();
              struct T x() {
                float a = foo();
                float b = foo();
                struct T c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf6_15() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf6_159127856641468567911.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf6_159127856641468567911.c:8:40: error: invalid operands to binary + (have 'float' and 'struct_anonymous')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              float foo();
              struct_anonymous bar();
              struct_anonymous x() {
                float a = foo();
                struct_anonymous b = bar();
                struct_anonymous c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf6_154621026179677808195.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf6_154621026179677808195.c:8:29: error: invalid operands to binary + (have 'float' and 'struct_anonymous')
                 float c = a + b;
                             ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              float foo();
              struct_anonymous bar();
              float x() {
                float a = foo();
                struct_anonymous b = bar();
                float c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf6_153450321798332307198.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf6_153450321798332307198.c:7:17: error: invalid initializer
                 struct_anonymous c = a + b;
                 ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              float foo();
              struct_anonymous x() {
                float a = foo();
                float b = foo();
                struct_anonymous c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf6_16() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf6_162479553438322410172.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf6_162479553438322410172.c:5:24: error: invalid initializer
                 struct { int a; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf6_162479553438322410172.c:6:41: error: invalid operands to binary + (have 'float' and 'struct <anonymous>')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf6_162479553438322410172.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              float foo();
              struct { int a; } bar();
              struct { int a; } x() {
                float a = foo();
                struct { int a; } b = bar();
                struct { int a; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf6_163612255869171661497.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf6_163612255869171661497.c:5:24: error: invalid initializer
                 struct { int a; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf6_163612255869171661497.c:6:29: error: invalid operands to binary + (have 'float' and 'struct <anonymous>')
                 float c = a + b;
                             ^

        */
        error("""
              float foo();
              struct { int a; } bar();
              float x() {
                float a = foo();
                struct { int a; } b = bar();
                float c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf6_166035050566852420153.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf6_166035050566852420153.c:5:24: error: invalid initializer
                 struct { int a; } c = a + b;
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf6_166035050566852420153.c:6:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              float foo();
              struct { int a; } x() {
                float a = foo();
                float b = foo();
                struct { int a; } c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf6_17() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf6_175910402001584104909.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf6_175910402001584104909.c:5:24: error: invalid initializer
                 struct { float b; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf6_175910402001584104909.c:6:43: error: invalid operands to binary + (have 'float' and 'struct <anonymous>')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf6_175910402001584104909.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              float foo();
              struct { float b; } bar();
              struct { float b; } x() {
                float a = foo();
                struct { float b; } b = bar();
                struct { float b; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf6_174764152480159147795.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf6_174764152480159147795.c:5:24: error: invalid initializer
                 struct { float b; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf6_174764152480159147795.c:6:29: error: invalid operands to binary + (have 'float' and 'struct <anonymous>')
                 float c = a + b;
                             ^

        */
        error("""
              float foo();
              struct { float b; } bar();
              float x() {
                float a = foo();
                struct { float b; } b = bar();
                float c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf6_176635472059544737308.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf6_176635472059544737308.c:5:24: error: invalid initializer
                 struct { float b; } c = a + b;
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf6_176635472059544737308.c:6:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              float foo();
              struct { float b; } x() {
                float a = foo();
                float b = foo();
                struct { float b; } c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf6_18() {
        correct("""
              float foo();
              volatile int bar();
              volatile int x() {
                float a = foo();
                volatile int b = bar();
                volatile int c = a + b;
                return c;
              }
                """)
        correct("""
              float foo();
              volatile int bar();
              float x() {
                float a = foo();
                volatile int b = bar();
                float c = a + b;
                return c;
              }
                """)
        correct("""
              float foo();
              volatile int x() {
                float a = foo();
                float b = foo();
                volatile int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf6_19() {
        correct("""
              float foo();
              const int bar();
              const int x() {
                float a = foo();
                const int b = bar();
                const int c = a + b;
                return c;
              }
                """)
        correct("""
              float foo();
              const int bar();
              float x() {
                float a = foo();
                const int b = bar();
                float c = a + b;
                return c;
              }
                """)
        correct("""
              float foo();
              const int x() {
                float a = foo();
                float b = foo();
                const int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf6_20() {
        correct("""
              float foo();
              const double bar();
              const double x() {
                float a = foo();
                const double b = bar();
                const double c = a + b;
                return c;
              }
                """)
        correct("""
              float foo();
              const double bar();
              float x() {
                float a = foo();
                const double b = bar();
                float c = a + b;
                return c;
              }
                """)
        correct("""
              float foo();
              const double x() {
                float a = foo();
                float b = foo();
                const double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf6_21() {
        correct("""
              float foo();
              volatile double bar();
              volatile double x() {
                float a = foo();
                volatile double b = bar();
                volatile double c = a + b;
                return c;
              }
                """)
        correct("""
              float foo();
              volatile double bar();
              float x() {
                float a = foo();
                volatile double b = bar();
                float c = a + b;
                return c;
              }
                """)
        correct("""
              float foo();
              volatile double x() {
                float a = foo();
                float b = foo();
                volatile double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf6_22() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf6_224542666463039811420.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf6_224542666463039811420.c:6:29: error: invalid operands to binary + (have 'float' and 'int *')
                 int * c = a + b;
                             ^

        */
        error("""
              float foo();
              int * bar();
              int * x() {
                float a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf6_222768486109319536052.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf6_222768486109319536052.c:6:29: error: invalid operands to binary + (have 'float' and 'int *')
                 float c = a + b;
                             ^

        */
        error("""
              float foo();
              int * bar();
              float x() {
                float a = foo();
                int * b = bar();
                float c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf6_22455383485929167176.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf6_22455383485929167176.c:5:27: error: incompatible types when initializing type 'int *' using type 'float'
                 int * c = a + b;
                           ^

        */
        error("""
              float foo();
              int * x() {
                float a = foo();
                float b = foo();
                int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf6_23() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf6_234559465940531986700.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf6_234559465940531986700.c:6:35: error: invalid operands to binary + (have 'float' and 'const int *')
                 const int * c = a + b;
                                   ^

        */
        error("""
              float foo();
              const int * bar();
              const int * x() {
                float a = foo();
                const int * b = bar();
                const int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf6_235210186522270187388.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf6_235210186522270187388.c:6:29: error: invalid operands to binary + (have 'float' and 'const int *')
                 float c = a + b;
                             ^

        */
        error("""
              float foo();
              const int * bar();
              float x() {
                float a = foo();
                const int * b = bar();
                float c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf6_231469113680310230065.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf6_231469113680310230065.c:5:33: error: incompatible types when initializing type 'const int *' using type 'float'
                 const int * c = a + b;
                                 ^

        */
        error("""
              float foo();
              const int * x() {
                float a = foo();
                float b = foo();
                const int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf6_24() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf6_241991008189535780810.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf6_241991008189535780810.c:6:38: error: invalid operands to binary + (have 'float' and 'volatile int *')
                 volatile int * c = a + b;
                                      ^

        */
        error("""
              float foo();
              volatile int * bar();
              volatile int * x() {
                float a = foo();
                volatile int * b = bar();
                volatile int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf6_248018116591050851375.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf6_248018116591050851375.c:6:29: error: invalid operands to binary + (have 'float' and 'volatile int *')
                 float c = a + b;
                             ^

        */
        error("""
              float foo();
              volatile int * bar();
              float x() {
                float a = foo();
                volatile int * b = bar();
                float c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf6_247469621575858154888.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf6_247469621575858154888.c:5:36: error: incompatible types when initializing type 'volatile int *' using type 'float'
                 volatile int * c = a + b;
                                    ^

        */
        error("""
              float foo();
              volatile int * x() {
                float a = foo();
                float b = foo();
                volatile int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf7_0() {
        correct("""
              double foo();
              char bar();
              char x() {
                double a = foo();
                char b = bar();
                char c = a + b;
                return c;
              }
                """)
        correct("""
              double foo();
              char bar();
              double x() {
                double a = foo();
                char b = bar();
                double c = a + b;
                return c;
              }
                """)
        correct("""
              double foo();
              char x() {
                double a = foo();
                double b = foo();
                char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf7_1() {
        correct("""
              double foo();
              signed char bar();
              signed char x() {
                double a = foo();
                signed char b = bar();
                signed char c = a + b;
                return c;
              }
                """)
        correct("""
              double foo();
              signed char bar();
              double x() {
                double a = foo();
                signed char b = bar();
                double c = a + b;
                return c;
              }
                """)
        correct("""
              double foo();
              signed char x() {
                double a = foo();
                double b = foo();
                signed char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf7_2() {
        correct("""
              double foo();
              unsigned char bar();
              unsigned char x() {
                double a = foo();
                unsigned char b = bar();
                unsigned char c = a + b;
                return c;
              }
                """)
        correct("""
              double foo();
              unsigned char bar();
              double x() {
                double a = foo();
                unsigned char b = bar();
                double c = a + b;
                return c;
              }
                """)
        correct("""
              double foo();
              unsigned char x() {
                double a = foo();
                double b = foo();
                unsigned char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf7_3() {
        correct("""
              double foo();
              unsigned int bar();
              unsigned int x() {
                double a = foo();
                unsigned int b = bar();
                unsigned int c = a + b;
                return c;
              }
                """)
        correct("""
              double foo();
              unsigned int bar();
              double x() {
                double a = foo();
                unsigned int b = bar();
                double c = a + b;
                return c;
              }
                """)
        correct("""
              double foo();
              unsigned int x() {
                double a = foo();
                double b = foo();
                unsigned int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf7_4() {
        correct("""
              double foo();
              signed int bar();
              signed int x() {
                double a = foo();
                signed int b = bar();
                signed int c = a + b;
                return c;
              }
                """)
        correct("""
              double foo();
              signed int bar();
              double x() {
                double a = foo();
                signed int b = bar();
                double c = a + b;
                return c;
              }
                """)
        correct("""
              double foo();
              signed int x() {
                double a = foo();
                double b = foo();
                signed int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf7_5() {
        correct("""
              double foo();
              long bar();
              long x() {
                double a = foo();
                long b = bar();
                long c = a + b;
                return c;
              }
                """)
        correct("""
              double foo();
              long bar();
              double x() {
                double a = foo();
                long b = bar();
                double c = a + b;
                return c;
              }
                """)
        correct("""
              double foo();
              long x() {
                double a = foo();
                double b = foo();
                long c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf7_6() {
        correct("""
              double foo();
              float bar();
              float x() {
                double a = foo();
                float b = bar();
                float c = a + b;
                return c;
              }
                """)
        correct("""
              double foo();
              float bar();
              double x() {
                double a = foo();
                float b = bar();
                double c = a + b;
                return c;
              }
                """)
        correct("""
              double foo();
              float x() {
                double a = foo();
                double b = foo();
                float c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf7_7() {
        correct("""
              double foo();
              double bar();
              double x() {
                double a = foo();
                double b = bar();
                double c = a + b;
                return c;
              }
                """)
        correct("""
              double foo();
              double bar();
              double x() {
                double a = foo();
                double b = bar();
                double c = a + b;
                return c;
              }
                """)
        correct("""
              double foo();
              double x() {
                double a = foo();
                double b = foo();
                double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf7_8() {
        correct("""
              double foo();
              long double bar();
              long double x() {
                double a = foo();
                long double b = bar();
                long double c = a + b;
                return c;
              }
                """)
        correct("""
              double foo();
              long double bar();
              double x() {
                double a = foo();
                long double b = bar();
                double c = a + b;
                return c;
              }
                """)
        correct("""
              double foo();
              long double x() {
                double a = foo();
                double b = foo();
                long double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf7_9() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf7_96062703272385905561.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf7_96062703272385905561.c:6:29: error: invalid operands to binary + (have 'double' and 'int *')
                 int * c = a + b;
                             ^

        */
        error("""
              double foo();
              int * bar();
              int * x() {
                double a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf7_97945931486087575180.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf7_97945931486087575180.c:6:30: error: invalid operands to binary + (have 'double' and 'int *')
                 double c = a + b;
                              ^

        */
        error("""
              double foo();
              int * bar();
              double x() {
                double a = foo();
                int * b = bar();
                double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf7_9561088290313836372.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf7_9561088290313836372.c:5:27: error: incompatible types when initializing type 'int *' using type 'double'
                 int * c = a + b;
                           ^

        */
        error("""
              double foo();
              int * x() {
                double a = foo();
                double b = foo();
                int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf7_10() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf7_10830635375169541132.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf7_10830635375169541132.c:6:30: error: invalid operands to binary + (have 'double' and 'int **')
                 int ** c = a + b;
                              ^

        */
        error("""
              double foo();
              int ** bar();
              int ** x() {
                double a = foo();
                int ** b = bar();
                int ** c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf7_106563711509494159756.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf7_106563711509494159756.c:6:30: error: invalid operands to binary + (have 'double' and 'int **')
                 double c = a + b;
                              ^

        */
        error("""
              double foo();
              int ** bar();
              double x() {
                double a = foo();
                int ** b = bar();
                double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf7_106364062606290445114.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf7_106364062606290445114.c:5:28: error: incompatible types when initializing type 'int **' using type 'double'
                 int ** c = a + b;
                            ^

        */
        error("""
              double foo();
              int ** x() {
                double a = foo();
                double b = foo();
                int ** c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf7_11() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf7_115642797263789684279.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf7_115642797263789684279.c:6:30: error: invalid operands to binary + (have 'double' and 'char *')
                 char * c = a + b;
                              ^

        */
        error("""
              double foo();
              char * bar();
              char * x() {
                double a = foo();
                char * b = bar();
                char * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf7_114422588492302894367.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf7_114422588492302894367.c:6:30: error: invalid operands to binary + (have 'double' and 'char *')
                 double c = a + b;
                              ^

        */
        error("""
              double foo();
              char * bar();
              double x() {
                double a = foo();
                char * b = bar();
                double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf7_116470539418617192478.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf7_116470539418617192478.c:5:28: error: incompatible types when initializing type 'char *' using type 'double'
                 char * c = a + b;
                            ^

        */
        error("""
              double foo();
              char * x() {
                double a = foo();
                double b = foo();
                char * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf7_12() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf7_125219341961185374360.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf7_125219341961185374360.c:6:32: error: invalid operands to binary + (have 'double' and 'double *')
                 double * c = a + b;
                                ^

        */
        error("""
              double foo();
              double * bar();
              double * x() {
                double a = foo();
                double * b = bar();
                double * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf7_125847761001434671193.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf7_125847761001434671193.c:6:30: error: invalid operands to binary + (have 'double' and 'double *')
                 double c = a + b;
                              ^

        */
        error("""
              double foo();
              double * bar();
              double x() {
                double a = foo();
                double * b = bar();
                double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf7_121461652703032343771.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf7_121461652703032343771.c:5:30: error: incompatible types when initializing type 'double *' using type 'double'
                 double * c = a + b;
                              ^

        */
        error("""
              double foo();
              double * x() {
                double a = foo();
                double b = foo();
                double * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf7_13() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf7_133814612378201124649.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf7_133814612378201124649.c:8:32: error: invalid operands to binary + (have 'double' and 'struct S')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              double foo();
              struct S bar();
              struct S x() {
                double a = foo();
                struct S b = bar();
                struct S c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf7_132964197899287352024.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf7_132964197899287352024.c:8:30: error: invalid operands to binary + (have 'double' and 'struct S')
                 double c = a + b;
                              ^

        */
        error("""
              struct S { int x; int y; };

              double foo();
              struct S bar();
              double x() {
                double a = foo();
                struct S b = bar();
                double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf7_131500004611248943396.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf7_131500004611248943396.c:7:24: error: invalid initializer
                 struct S c = a + b;
                        ^

        */
        error("""
              struct S { int x; int y; };

              double foo();
              struct S x() {
                double a = foo();
                double b = foo();
                struct S c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf7_14() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf7_149012810175923631291.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf7_149012810175923631291.c:8:32: error: invalid operands to binary + (have 'double' and 'struct T')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              double foo();
              struct T bar();
              struct T x() {
                double a = foo();
                struct T b = bar();
                struct T c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf7_145970556964733249690.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf7_145970556964733249690.c:8:30: error: invalid operands to binary + (have 'double' and 'struct T')
                 double c = a + b;
                              ^

        */
        error("""
              struct T { int x; int y; int z; };

              double foo();
              struct T bar();
              double x() {
                double a = foo();
                struct T b = bar();
                double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf7_147944036482287561571.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf7_147944036482287561571.c:7:24: error: invalid initializer
                 struct T c = a + b;
                        ^

        */
        error("""
              struct T { int x; int y; int z; };

              double foo();
              struct T x() {
                double a = foo();
                double b = foo();
                struct T c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf7_15() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf7_157126551145686847375.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf7_157126551145686847375.c:8:40: error: invalid operands to binary + (have 'double' and 'struct_anonymous')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              double foo();
              struct_anonymous bar();
              struct_anonymous x() {
                double a = foo();
                struct_anonymous b = bar();
                struct_anonymous c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf7_157775523108441121969.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf7_157775523108441121969.c:8:30: error: invalid operands to binary + (have 'double' and 'struct_anonymous')
                 double c = a + b;
                              ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              double foo();
              struct_anonymous bar();
              double x() {
                double a = foo();
                struct_anonymous b = bar();
                double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf7_152031380958153282260.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf7_152031380958153282260.c:7:17: error: invalid initializer
                 struct_anonymous c = a + b;
                 ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              double foo();
              struct_anonymous x() {
                double a = foo();
                double b = foo();
                struct_anonymous c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf7_16() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf7_164752286720259440950.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf7_164752286720259440950.c:5:24: error: invalid initializer
                 struct { int a; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf7_164752286720259440950.c:6:41: error: invalid operands to binary + (have 'double' and 'struct <anonymous>')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf7_164752286720259440950.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              double foo();
              struct { int a; } bar();
              struct { int a; } x() {
                double a = foo();
                struct { int a; } b = bar();
                struct { int a; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf7_168772695123749458452.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf7_168772695123749458452.c:5:24: error: invalid initializer
                 struct { int a; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf7_168772695123749458452.c:6:30: error: invalid operands to binary + (have 'double' and 'struct <anonymous>')
                 double c = a + b;
                              ^

        */
        error("""
              double foo();
              struct { int a; } bar();
              double x() {
                double a = foo();
                struct { int a; } b = bar();
                double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf7_16468086199909634920.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf7_16468086199909634920.c:5:24: error: invalid initializer
                 struct { int a; } c = a + b;
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf7_16468086199909634920.c:6:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              double foo();
              struct { int a; } x() {
                double a = foo();
                double b = foo();
                struct { int a; } c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf7_17() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf7_177311534393832001561.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf7_177311534393832001561.c:5:24: error: invalid initializer
                 struct { float b; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf7_177311534393832001561.c:6:43: error: invalid operands to binary + (have 'double' and 'struct <anonymous>')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf7_177311534393832001561.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              double foo();
              struct { float b; } bar();
              struct { float b; } x() {
                double a = foo();
                struct { float b; } b = bar();
                struct { float b; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf7_178882042122502128874.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf7_178882042122502128874.c:5:24: error: invalid initializer
                 struct { float b; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf7_178882042122502128874.c:6:30: error: invalid operands to binary + (have 'double' and 'struct <anonymous>')
                 double c = a + b;
                              ^

        */
        error("""
              double foo();
              struct { float b; } bar();
              double x() {
                double a = foo();
                struct { float b; } b = bar();
                double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf7_178200768613531763645.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf7_178200768613531763645.c:5:24: error: invalid initializer
                 struct { float b; } c = a + b;
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf7_178200768613531763645.c:6:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              double foo();
              struct { float b; } x() {
                double a = foo();
                double b = foo();
                struct { float b; } c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf7_18() {
        correct("""
              double foo();
              volatile int bar();
              volatile int x() {
                double a = foo();
                volatile int b = bar();
                volatile int c = a + b;
                return c;
              }
                """)
        correct("""
              double foo();
              volatile int bar();
              double x() {
                double a = foo();
                volatile int b = bar();
                double c = a + b;
                return c;
              }
                """)
        correct("""
              double foo();
              volatile int x() {
                double a = foo();
                double b = foo();
                volatile int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf7_19() {
        correct("""
              double foo();
              const int bar();
              const int x() {
                double a = foo();
                const int b = bar();
                const int c = a + b;
                return c;
              }
                """)
        correct("""
              double foo();
              const int bar();
              double x() {
                double a = foo();
                const int b = bar();
                double c = a + b;
                return c;
              }
                """)
        correct("""
              double foo();
              const int x() {
                double a = foo();
                double b = foo();
                const int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf7_20() {
        correct("""
              double foo();
              const double bar();
              const double x() {
                double a = foo();
                const double b = bar();
                const double c = a + b;
                return c;
              }
                """)
        correct("""
              double foo();
              const double bar();
              double x() {
                double a = foo();
                const double b = bar();
                double c = a + b;
                return c;
              }
                """)
        correct("""
              double foo();
              const double x() {
                double a = foo();
                double b = foo();
                const double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf7_21() {
        correct("""
              double foo();
              volatile double bar();
              volatile double x() {
                double a = foo();
                volatile double b = bar();
                volatile double c = a + b;
                return c;
              }
                """)
        correct("""
              double foo();
              volatile double bar();
              double x() {
                double a = foo();
                volatile double b = bar();
                double c = a + b;
                return c;
              }
                """)
        correct("""
              double foo();
              volatile double x() {
                double a = foo();
                double b = foo();
                volatile double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf7_22() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf7_228330895771998955125.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf7_228330895771998955125.c:6:29: error: invalid operands to binary + (have 'double' and 'int *')
                 int * c = a + b;
                             ^

        */
        error("""
              double foo();
              int * bar();
              int * x() {
                double a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf7_224847288484133348287.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf7_224847288484133348287.c:6:30: error: invalid operands to binary + (have 'double' and 'int *')
                 double c = a + b;
                              ^

        */
        error("""
              double foo();
              int * bar();
              double x() {
                double a = foo();
                int * b = bar();
                double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf7_228361855586325703202.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf7_228361855586325703202.c:5:27: error: incompatible types when initializing type 'int *' using type 'double'
                 int * c = a + b;
                           ^

        */
        error("""
              double foo();
              int * x() {
                double a = foo();
                double b = foo();
                int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf7_23() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf7_237131843790642056155.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf7_237131843790642056155.c:6:35: error: invalid operands to binary + (have 'double' and 'const int *')
                 const int * c = a + b;
                                   ^

        */
        error("""
              double foo();
              const int * bar();
              const int * x() {
                double a = foo();
                const int * b = bar();
                const int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf7_233192627783320975700.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf7_233192627783320975700.c:6:30: error: invalid operands to binary + (have 'double' and 'const int *')
                 double c = a + b;
                              ^

        */
        error("""
              double foo();
              const int * bar();
              double x() {
                double a = foo();
                const int * b = bar();
                double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf7_236244618931113685538.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf7_236244618931113685538.c:5:33: error: incompatible types when initializing type 'const int *' using type 'double'
                 const int * c = a + b;
                                 ^

        */
        error("""
              double foo();
              const int * x() {
                double a = foo();
                double b = foo();
                const int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf7_24() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf7_241377329990773055405.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf7_241377329990773055405.c:6:38: error: invalid operands to binary + (have 'double' and 'volatile int *')
                 volatile int * c = a + b;
                                      ^

        */
        error("""
              double foo();
              volatile int * bar();
              volatile int * x() {
                double a = foo();
                volatile int * b = bar();
                volatile int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf7_248143004674439414681.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf7_248143004674439414681.c:6:30: error: invalid operands to binary + (have 'double' and 'volatile int *')
                 double c = a + b;
                              ^

        */
        error("""
              double foo();
              volatile int * bar();
              double x() {
                double a = foo();
                volatile int * b = bar();
                double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf7_246244794766869216642.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf7_246244794766869216642.c:5:36: error: incompatible types when initializing type 'volatile int *' using type 'double'
                 volatile int * c = a + b;
                                    ^

        */
        error("""
              double foo();
              volatile int * x() {
                double a = foo();
                double b = foo();
                volatile int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf8_0() {
        correct("""
              long double foo();
              char bar();
              char x() {
                long double a = foo();
                char b = bar();
                char c = a + b;
                return c;
              }
                """)
        correct("""
              long double foo();
              char bar();
              long double x() {
                long double a = foo();
                char b = bar();
                long double c = a + b;
                return c;
              }
                """)
        correct("""
              long double foo();
              char x() {
                long double a = foo();
                long double b = foo();
                char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf8_1() {
        correct("""
              long double foo();
              signed char bar();
              signed char x() {
                long double a = foo();
                signed char b = bar();
                signed char c = a + b;
                return c;
              }
                """)
        correct("""
              long double foo();
              signed char bar();
              long double x() {
                long double a = foo();
                signed char b = bar();
                long double c = a + b;
                return c;
              }
                """)
        correct("""
              long double foo();
              signed char x() {
                long double a = foo();
                long double b = foo();
                signed char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf8_2() {
        correct("""
              long double foo();
              unsigned char bar();
              unsigned char x() {
                long double a = foo();
                unsigned char b = bar();
                unsigned char c = a + b;
                return c;
              }
                """)
        correct("""
              long double foo();
              unsigned char bar();
              long double x() {
                long double a = foo();
                unsigned char b = bar();
                long double c = a + b;
                return c;
              }
                """)
        correct("""
              long double foo();
              unsigned char x() {
                long double a = foo();
                long double b = foo();
                unsigned char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf8_3() {
        correct("""
              long double foo();
              unsigned int bar();
              unsigned int x() {
                long double a = foo();
                unsigned int b = bar();
                unsigned int c = a + b;
                return c;
              }
                """)
        correct("""
              long double foo();
              unsigned int bar();
              long double x() {
                long double a = foo();
                unsigned int b = bar();
                long double c = a + b;
                return c;
              }
                """)
        correct("""
              long double foo();
              unsigned int x() {
                long double a = foo();
                long double b = foo();
                unsigned int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf8_4() {
        correct("""
              long double foo();
              signed int bar();
              signed int x() {
                long double a = foo();
                signed int b = bar();
                signed int c = a + b;
                return c;
              }
                """)
        correct("""
              long double foo();
              signed int bar();
              long double x() {
                long double a = foo();
                signed int b = bar();
                long double c = a + b;
                return c;
              }
                """)
        correct("""
              long double foo();
              signed int x() {
                long double a = foo();
                long double b = foo();
                signed int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf8_5() {
        correct("""
              long double foo();
              long bar();
              long x() {
                long double a = foo();
                long b = bar();
                long c = a + b;
                return c;
              }
                """)
        correct("""
              long double foo();
              long bar();
              long double x() {
                long double a = foo();
                long b = bar();
                long double c = a + b;
                return c;
              }
                """)
        correct("""
              long double foo();
              long x() {
                long double a = foo();
                long double b = foo();
                long c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf8_6() {
        correct("""
              long double foo();
              float bar();
              float x() {
                long double a = foo();
                float b = bar();
                float c = a + b;
                return c;
              }
                """)
        correct("""
              long double foo();
              float bar();
              long double x() {
                long double a = foo();
                float b = bar();
                long double c = a + b;
                return c;
              }
                """)
        correct("""
              long double foo();
              float x() {
                long double a = foo();
                long double b = foo();
                float c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf8_7() {
        correct("""
              long double foo();
              double bar();
              double x() {
                long double a = foo();
                double b = bar();
                double c = a + b;
                return c;
              }
                """)
        correct("""
              long double foo();
              double bar();
              long double x() {
                long double a = foo();
                double b = bar();
                long double c = a + b;
                return c;
              }
                """)
        correct("""
              long double foo();
              double x() {
                long double a = foo();
                long double b = foo();
                double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf8_8() {
        correct("""
              long double foo();
              long double bar();
              long double x() {
                long double a = foo();
                long double b = bar();
                long double c = a + b;
                return c;
              }
                """)
        correct("""
              long double foo();
              long double bar();
              long double x() {
                long double a = foo();
                long double b = bar();
                long double c = a + b;
                return c;
              }
                """)
        correct("""
              long double foo();
              long double x() {
                long double a = foo();
                long double b = foo();
                long double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf8_9() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf8_92899391204083350605.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf8_92899391204083350605.c:6:29: error: invalid operands to binary + (have 'long double' and 'int *')
                 int * c = a + b;
                             ^

        */
        error("""
              long double foo();
              int * bar();
              int * x() {
                long double a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf8_91640311579611778560.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf8_91640311579611778560.c:6:35: error: invalid operands to binary + (have 'long double' and 'int *')
                 long double c = a + b;
                                   ^

        */
        error("""
              long double foo();
              int * bar();
              long double x() {
                long double a = foo();
                int * b = bar();
                long double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf8_91690010033361912803.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf8_91690010033361912803.c:5:27: error: incompatible types when initializing type 'int *' using type 'long double'
                 int * c = a + b;
                           ^

        */
        error("""
              long double foo();
              int * x() {
                long double a = foo();
                long double b = foo();
                int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf8_10() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf8_104486553732265883464.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf8_104486553732265883464.c:6:30: error: invalid operands to binary + (have 'long double' and 'int **')
                 int ** c = a + b;
                              ^

        */
        error("""
              long double foo();
              int ** bar();
              int ** x() {
                long double a = foo();
                int ** b = bar();
                int ** c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf8_101219239384314286865.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf8_101219239384314286865.c:6:35: error: invalid operands to binary + (have 'long double' and 'int **')
                 long double c = a + b;
                                   ^

        */
        error("""
              long double foo();
              int ** bar();
              long double x() {
                long double a = foo();
                int ** b = bar();
                long double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf8_108062332960601324705.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf8_108062332960601324705.c:5:28: error: incompatible types when initializing type 'int **' using type 'long double'
                 int ** c = a + b;
                            ^

        */
        error("""
              long double foo();
              int ** x() {
                long double a = foo();
                long double b = foo();
                int ** c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf8_11() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf8_11795164200116446474.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf8_11795164200116446474.c:6:30: error: invalid operands to binary + (have 'long double' and 'char *')
                 char * c = a + b;
                              ^

        */
        error("""
              long double foo();
              char * bar();
              char * x() {
                long double a = foo();
                char * b = bar();
                char * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf8_112026443482039976578.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf8_112026443482039976578.c:6:35: error: invalid operands to binary + (have 'long double' and 'char *')
                 long double c = a + b;
                                   ^

        */
        error("""
              long double foo();
              char * bar();
              long double x() {
                long double a = foo();
                char * b = bar();
                long double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf8_112277907203539611165.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf8_112277907203539611165.c:5:28: error: incompatible types when initializing type 'char *' using type 'long double'
                 char * c = a + b;
                            ^

        */
        error("""
              long double foo();
              char * x() {
                long double a = foo();
                long double b = foo();
                char * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf8_12() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf8_124367914105721949327.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf8_124367914105721949327.c:6:32: error: invalid operands to binary + (have 'long double' and 'double *')
                 double * c = a + b;
                                ^

        */
        error("""
              long double foo();
              double * bar();
              double * x() {
                long double a = foo();
                double * b = bar();
                double * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf8_122490423881590689402.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf8_122490423881590689402.c:6:35: error: invalid operands to binary + (have 'long double' and 'double *')
                 long double c = a + b;
                                   ^

        */
        error("""
              long double foo();
              double * bar();
              long double x() {
                long double a = foo();
                double * b = bar();
                long double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf8_127293925232218445981.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf8_127293925232218445981.c:5:30: error: incompatible types when initializing type 'double *' using type 'long double'
                 double * c = a + b;
                              ^

        */
        error("""
              long double foo();
              double * x() {
                long double a = foo();
                long double b = foo();
                double * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf8_13() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf8_132728944764006710652.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf8_132728944764006710652.c:8:32: error: invalid operands to binary + (have 'long double' and 'struct S')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              long double foo();
              struct S bar();
              struct S x() {
                long double a = foo();
                struct S b = bar();
                struct S c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf8_138309408413667106219.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf8_138309408413667106219.c:8:35: error: invalid operands to binary + (have 'long double' and 'struct S')
                 long double c = a + b;
                                   ^

        */
        error("""
              struct S { int x; int y; };

              long double foo();
              struct S bar();
              long double x() {
                long double a = foo();
                struct S b = bar();
                long double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf8_131877426601033774060.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf8_131877426601033774060.c:7:24: error: invalid initializer
                 struct S c = a + b;
                        ^

        */
        error("""
              struct S { int x; int y; };

              long double foo();
              struct S x() {
                long double a = foo();
                long double b = foo();
                struct S c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf8_14() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf8_144483836268825611896.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf8_144483836268825611896.c:8:32: error: invalid operands to binary + (have 'long double' and 'struct T')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              long double foo();
              struct T bar();
              struct T x() {
                long double a = foo();
                struct T b = bar();
                struct T c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf8_147161921553606315572.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf8_147161921553606315572.c:8:35: error: invalid operands to binary + (have 'long double' and 'struct T')
                 long double c = a + b;
                                   ^

        */
        error("""
              struct T { int x; int y; int z; };

              long double foo();
              struct T bar();
              long double x() {
                long double a = foo();
                struct T b = bar();
                long double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf8_141100931884505472957.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf8_141100931884505472957.c:7:24: error: invalid initializer
                 struct T c = a + b;
                        ^

        */
        error("""
              struct T { int x; int y; int z; };

              long double foo();
              struct T x() {
                long double a = foo();
                long double b = foo();
                struct T c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf8_15() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf8_156955543234165447363.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf8_156955543234165447363.c:8:40: error: invalid operands to binary + (have 'long double' and 'struct_anonymous')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              long double foo();
              struct_anonymous bar();
              struct_anonymous x() {
                long double a = foo();
                struct_anonymous b = bar();
                struct_anonymous c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf8_153410763464813332188.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf8_153410763464813332188.c:8:35: error: invalid operands to binary + (have 'long double' and 'struct_anonymous')
                 long double c = a + b;
                                   ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              long double foo();
              struct_anonymous bar();
              long double x() {
                long double a = foo();
                struct_anonymous b = bar();
                long double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf8_158091269786449100911.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf8_158091269786449100911.c:7:17: error: invalid initializer
                 struct_anonymous c = a + b;
                 ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              long double foo();
              struct_anonymous x() {
                long double a = foo();
                long double b = foo();
                struct_anonymous c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf8_16() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf8_166569274919630083973.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf8_166569274919630083973.c:5:24: error: invalid initializer
                 struct { int a; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf8_166569274919630083973.c:6:41: error: invalid operands to binary + (have 'long double' and 'struct <anonymous>')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf8_166569274919630083973.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              long double foo();
              struct { int a; } bar();
              struct { int a; } x() {
                long double a = foo();
                struct { int a; } b = bar();
                struct { int a; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf8_169083090097711540744.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf8_169083090097711540744.c:5:24: error: invalid initializer
                 struct { int a; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf8_169083090097711540744.c:6:35: error: invalid operands to binary + (have 'long double' and 'struct <anonymous>')
                 long double c = a + b;
                                   ^

        */
        error("""
              long double foo();
              struct { int a; } bar();
              long double x() {
                long double a = foo();
                struct { int a; } b = bar();
                long double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf8_164098835861592336658.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf8_164098835861592336658.c:5:24: error: invalid initializer
                 struct { int a; } c = a + b;
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf8_164098835861592336658.c:6:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              long double foo();
              struct { int a; } x() {
                long double a = foo();
                long double b = foo();
                struct { int a; } c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf8_17() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf8_174777556284722287644.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf8_174777556284722287644.c:5:24: error: invalid initializer
                 struct { float b; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf8_174777556284722287644.c:6:43: error: invalid operands to binary + (have 'long double' and 'struct <anonymous>')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf8_174777556284722287644.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              long double foo();
              struct { float b; } bar();
              struct { float b; } x() {
                long double a = foo();
                struct { float b; } b = bar();
                struct { float b; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf8_174846508089116718309.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf8_174846508089116718309.c:5:24: error: invalid initializer
                 struct { float b; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf8_174846508089116718309.c:6:35: error: invalid operands to binary + (have 'long double' and 'struct <anonymous>')
                 long double c = a + b;
                                   ^

        */
        error("""
              long double foo();
              struct { float b; } bar();
              long double x() {
                long double a = foo();
                struct { float b; } b = bar();
                long double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf8_175515016148784056218.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf8_175515016148784056218.c:5:24: error: invalid initializer
                 struct { float b; } c = a + b;
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf8_175515016148784056218.c:6:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              long double foo();
              struct { float b; } x() {
                long double a = foo();
                long double b = foo();
                struct { float b; } c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf8_18() {
        correct("""
              long double foo();
              volatile int bar();
              volatile int x() {
                long double a = foo();
                volatile int b = bar();
                volatile int c = a + b;
                return c;
              }
                """)
        correct("""
              long double foo();
              volatile int bar();
              long double x() {
                long double a = foo();
                volatile int b = bar();
                long double c = a + b;
                return c;
              }
                """)
        correct("""
              long double foo();
              volatile int x() {
                long double a = foo();
                long double b = foo();
                volatile int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf8_19() {
        correct("""
              long double foo();
              const int bar();
              const int x() {
                long double a = foo();
                const int b = bar();
                const int c = a + b;
                return c;
              }
                """)
        correct("""
              long double foo();
              const int bar();
              long double x() {
                long double a = foo();
                const int b = bar();
                long double c = a + b;
                return c;
              }
                """)
        correct("""
              long double foo();
              const int x() {
                long double a = foo();
                long double b = foo();
                const int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf8_20() {
        correct("""
              long double foo();
              const double bar();
              const double x() {
                long double a = foo();
                const double b = bar();
                const double c = a + b;
                return c;
              }
                """)
        correct("""
              long double foo();
              const double bar();
              long double x() {
                long double a = foo();
                const double b = bar();
                long double c = a + b;
                return c;
              }
                """)
        correct("""
              long double foo();
              const double x() {
                long double a = foo();
                long double b = foo();
                const double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf8_21() {
        correct("""
              long double foo();
              volatile double bar();
              volatile double x() {
                long double a = foo();
                volatile double b = bar();
                volatile double c = a + b;
                return c;
              }
                """)
        correct("""
              long double foo();
              volatile double bar();
              long double x() {
                long double a = foo();
                volatile double b = bar();
                long double c = a + b;
                return c;
              }
                """)
        correct("""
              long double foo();
              volatile double x() {
                long double a = foo();
                long double b = foo();
                volatile double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf8_22() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf8_225809664813428813698.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf8_225809664813428813698.c:6:29: error: invalid operands to binary + (have 'long double' and 'int *')
                 int * c = a + b;
                             ^

        */
        error("""
              long double foo();
              int * bar();
              int * x() {
                long double a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf8_222850527620169837311.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf8_222850527620169837311.c:6:35: error: invalid operands to binary + (have 'long double' and 'int *')
                 long double c = a + b;
                                   ^

        */
        error("""
              long double foo();
              int * bar();
              long double x() {
                long double a = foo();
                int * b = bar();
                long double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf8_224704932021021387382.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf8_224704932021021387382.c:5:27: error: incompatible types when initializing type 'int *' using type 'long double'
                 int * c = a + b;
                           ^

        */
        error("""
              long double foo();
              int * x() {
                long double a = foo();
                long double b = foo();
                int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf8_23() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf8_23993222201285378891.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf8_23993222201285378891.c:6:35: error: invalid operands to binary + (have 'long double' and 'const int *')
                 const int * c = a + b;
                                   ^

        */
        error("""
              long double foo();
              const int * bar();
              const int * x() {
                long double a = foo();
                const int * b = bar();
                const int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf8_239052278776953145507.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf8_239052278776953145507.c:6:35: error: invalid operands to binary + (have 'long double' and 'const int *')
                 long double c = a + b;
                                   ^

        */
        error("""
              long double foo();
              const int * bar();
              long double x() {
                long double a = foo();
                const int * b = bar();
                long double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf8_2360793772230288720.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf8_2360793772230288720.c:5:33: error: incompatible types when initializing type 'const int *' using type 'long double'
                 const int * c = a + b;
                                 ^

        */
        error("""
              long double foo();
              const int * x() {
                long double a = foo();
                long double b = foo();
                const int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf8_24() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf8_243432277767669658169.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf8_243432277767669658169.c:6:38: error: invalid operands to binary + (have 'long double' and 'volatile int *')
                 volatile int * c = a + b;
                                      ^

        */
        error("""
              long double foo();
              volatile int * bar();
              volatile int * x() {
                long double a = foo();
                volatile int * b = bar();
                volatile int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf8_245876549286802840151.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf8_245876549286802840151.c:6:35: error: invalid operands to binary + (have 'long double' and 'volatile int *')
                 long double c = a + b;
                                   ^

        */
        error("""
              long double foo();
              volatile int * bar();
              long double x() {
                long double a = foo();
                volatile int * b = bar();
                long double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf8_247921635705138664751.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf8_247921635705138664751.c:5:36: error: incompatible types when initializing type 'volatile int *' using type 'long double'
                 volatile int * c = a + b;
                                    ^

        */
        error("""
              long double foo();
              volatile int * x() {
                long double a = foo();
                long double b = foo();
                volatile int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf9_0() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_02001740662021036640.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_02001740662021036640.c:6:26: warning: initialization makes integer from pointer without a cast
                 char c = a + b;
                          ^

        */
        warning("""
              int * foo();
              char bar();
              char x() {
                int * a = foo();
                char b = bar();
                char c = a + b;
                return c;
              }
                """)
        correct("""
              int * foo();
              char bar();
              int * x() {
                int * a = foo();
                char b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_07643682803002868369.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_07643682803002868369.c:5:28: error: invalid operands to binary + (have 'int *' and 'int *')
                 char c = a + b;
                            ^

        */
        error("""
              int * foo();
              char x() {
                int * a = foo();
                int * b = foo();
                char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf9_1() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_14882893030435150698.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_14882893030435150698.c:6:33: warning: initialization makes integer from pointer without a cast
                 signed char c = a + b;
                                 ^

        */
        warning("""
              int * foo();
              signed char bar();
              signed char x() {
                int * a = foo();
                signed char b = bar();
                signed char c = a + b;
                return c;
              }
                """)
        correct("""
              int * foo();
              signed char bar();
              int * x() {
                int * a = foo();
                signed char b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_17878167482106549157.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_17878167482106549157.c:5:35: error: invalid operands to binary + (have 'int *' and 'int *')
                 signed char c = a + b;
                                   ^

        */
        error("""
              int * foo();
              signed char x() {
                int * a = foo();
                int * b = foo();
                signed char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf9_2() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_26400092963906976493.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_26400092963906976493.c:6:35: warning: initialization makes integer from pointer without a cast
                 unsigned char c = a + b;
                                   ^

        */
        warning("""
              int * foo();
              unsigned char bar();
              unsigned char x() {
                int * a = foo();
                unsigned char b = bar();
                unsigned char c = a + b;
                return c;
              }
                """)
        correct("""
              int * foo();
              unsigned char bar();
              int * x() {
                int * a = foo();
                unsigned char b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_23907243606650724180.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_23907243606650724180.c:5:37: error: invalid operands to binary + (have 'int *' and 'int *')
                 unsigned char c = a + b;
                                     ^

        */
        error("""
              int * foo();
              unsigned char x() {
                int * a = foo();
                int * b = foo();
                unsigned char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf9_3() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_36975320066615301200.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_36975320066615301200.c:6:34: warning: initialization makes integer from pointer without a cast
                 unsigned int c = a + b;
                                  ^

        */
        warning("""
              int * foo();
              unsigned int bar();
              unsigned int x() {
                int * a = foo();
                unsigned int b = bar();
                unsigned int c = a + b;
                return c;
              }
                """)
        correct("""
              int * foo();
              unsigned int bar();
              int * x() {
                int * a = foo();
                unsigned int b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_38933059988921707352.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_38933059988921707352.c:5:36: error: invalid operands to binary + (have 'int *' and 'int *')
                 unsigned int c = a + b;
                                    ^

        */
        error("""
              int * foo();
              unsigned int x() {
                int * a = foo();
                int * b = foo();
                unsigned int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf9_4() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_47766936453250912319.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_47766936453250912319.c:6:32: warning: initialization makes integer from pointer without a cast
                 signed int c = a + b;
                                ^

        */
        warning("""
              int * foo();
              signed int bar();
              signed int x() {
                int * a = foo();
                signed int b = bar();
                signed int c = a + b;
                return c;
              }
                """)
        correct("""
              int * foo();
              signed int bar();
              int * x() {
                int * a = foo();
                signed int b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_43519862194531306372.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_43519862194531306372.c:5:34: error: invalid operands to binary + (have 'int *' and 'int *')
                 signed int c = a + b;
                                  ^

        */
        error("""
              int * foo();
              signed int x() {
                int * a = foo();
                int * b = foo();
                signed int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf9_5() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_59062687759474228239.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_59062687759474228239.c:6:26: warning: initialization makes integer from pointer without a cast
                 long c = a + b;
                          ^

        */
        warning("""
              int * foo();
              long bar();
              long x() {
                int * a = foo();
                long b = bar();
                long c = a + b;
                return c;
              }
                """)
        correct("""
              int * foo();
              long bar();
              int * x() {
                int * a = foo();
                long b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_56123463836889026982.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_56123463836889026982.c:5:28: error: invalid operands to binary + (have 'int *' and 'int *')
                 long c = a + b;
                            ^

        */
        error("""
              int * foo();
              long x() {
                int * a = foo();
                int * b = foo();
                long c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf9_6() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_68011186849410398206.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_68011186849410398206.c:6:29: error: invalid operands to binary + (have 'int *' and 'float')
                 float c = a + b;
                             ^

        */
        error("""
              int * foo();
              float bar();
              float x() {
                int * a = foo();
                float b = bar();
                float c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_65104701147059647100.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_65104701147059647100.c:6:29: error: invalid operands to binary + (have 'int *' and 'float')
                 int * c = a + b;
                             ^

        */
        error("""
              int * foo();
              float bar();
              int * x() {
                int * a = foo();
                float b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_65129209515831186726.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_65129209515831186726.c:5:29: error: invalid operands to binary + (have 'int *' and 'int *')
                 float c = a + b;
                             ^

        */
        error("""
              int * foo();
              float x() {
                int * a = foo();
                int * b = foo();
                float c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf9_7() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_74264913974426488884.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_74264913974426488884.c:6:30: error: invalid operands to binary + (have 'int *' and 'double')
                 double c = a + b;
                              ^

        */
        error("""
              int * foo();
              double bar();
              double x() {
                int * a = foo();
                double b = bar();
                double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_72766195370208516487.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_72766195370208516487.c:6:29: error: invalid operands to binary + (have 'int *' and 'double')
                 int * c = a + b;
                             ^

        */
        error("""
              int * foo();
              double bar();
              int * x() {
                int * a = foo();
                double b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_78162109166931488819.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_78162109166931488819.c:5:30: error: invalid operands to binary + (have 'int *' and 'int *')
                 double c = a + b;
                              ^

        */
        error("""
              int * foo();
              double x() {
                int * a = foo();
                int * b = foo();
                double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf9_8() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_84650667126151783214.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_84650667126151783214.c:6:35: error: invalid operands to binary + (have 'int *' and 'long double')
                 long double c = a + b;
                                   ^

        */
        error("""
              int * foo();
              long double bar();
              long double x() {
                int * a = foo();
                long double b = bar();
                long double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_85220062882783414282.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_85220062882783414282.c:6:29: error: invalid operands to binary + (have 'int *' and 'long double')
                 int * c = a + b;
                             ^

        */
        error("""
              int * foo();
              long double bar();
              int * x() {
                int * a = foo();
                long double b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_88548966456102332322.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_88548966456102332322.c:5:35: error: invalid operands to binary + (have 'int *' and 'int *')
                 long double c = a + b;
                                   ^

        */
        error("""
              int * foo();
              long double x() {
                int * a = foo();
                int * b = foo();
                long double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf9_9() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_91412891882013804401.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_91412891882013804401.c:6:29: error: invalid operands to binary + (have 'int *' and 'int *')
                 int * c = a + b;
                             ^

        */
        error("""
              int * foo();
              int * bar();
              int * x() {
                int * a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_9911844438289474181.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_9911844438289474181.c:6:29: error: invalid operands to binary + (have 'int *' and 'int *')
                 int * c = a + b;
                             ^

        */
        error("""
              int * foo();
              int * bar();
              int * x() {
                int * a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_93363413908219829232.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_93363413908219829232.c:5:29: error: invalid operands to binary + (have 'int *' and 'int *')
                 int * c = a + b;
                             ^

        */
        error("""
              int * foo();
              int * x() {
                int * a = foo();
                int * b = foo();
                int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf9_10() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_108670737647538247873.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_108670737647538247873.c:6:30: error: invalid operands to binary + (have 'int *' and 'int **')
                 int ** c = a + b;
                              ^

        */
        error("""
              int * foo();
              int ** bar();
              int ** x() {
                int * a = foo();
                int ** b = bar();
                int ** c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_102608095411276063182.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_102608095411276063182.c:6:29: error: invalid operands to binary + (have 'int *' and 'int **')
                 int * c = a + b;
                             ^

        */
        error("""
              int * foo();
              int ** bar();
              int * x() {
                int * a = foo();
                int ** b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_103301760903343509599.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_103301760903343509599.c:5:30: error: invalid operands to binary + (have 'int *' and 'int *')
                 int ** c = a + b;
                              ^

        */
        error("""
              int * foo();
              int ** x() {
                int * a = foo();
                int * b = foo();
                int ** c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf9_11() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_111097899131210479747.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_111097899131210479747.c:6:30: error: invalid operands to binary + (have 'int *' and 'char *')
                 char * c = a + b;
                              ^

        */
        error("""
              int * foo();
              char * bar();
              char * x() {
                int * a = foo();
                char * b = bar();
                char * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_112477983782700025996.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_112477983782700025996.c:6:29: error: invalid operands to binary + (have 'int *' and 'char *')
                 int * c = a + b;
                             ^

        */
        error("""
              int * foo();
              char * bar();
              int * x() {
                int * a = foo();
                char * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_115801293948343216885.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_115801293948343216885.c:5:30: error: invalid operands to binary + (have 'int *' and 'int *')
                 char * c = a + b;
                              ^

        */
        error("""
              int * foo();
              char * x() {
                int * a = foo();
                int * b = foo();
                char * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf9_12() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_127084503973106998987.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_127084503973106998987.c:6:32: error: invalid operands to binary + (have 'int *' and 'double *')
                 double * c = a + b;
                                ^

        */
        error("""
              int * foo();
              double * bar();
              double * x() {
                int * a = foo();
                double * b = bar();
                double * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_122830261806593870510.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_122830261806593870510.c:6:29: error: invalid operands to binary + (have 'int *' and 'double *')
                 int * c = a + b;
                             ^

        */
        error("""
              int * foo();
              double * bar();
              int * x() {
                int * a = foo();
                double * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_129222170886029355780.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_129222170886029355780.c:5:32: error: invalid operands to binary + (have 'int *' and 'int *')
                 double * c = a + b;
                                ^

        */
        error("""
              int * foo();
              double * x() {
                int * a = foo();
                int * b = foo();
                double * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf9_13() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_13561542481969716897.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_13561542481969716897.c:8:32: error: invalid operands to binary + (have 'int *' and 'struct S')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              int * foo();
              struct S bar();
              struct S x() {
                int * a = foo();
                struct S b = bar();
                struct S c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_132978166453902477440.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_132978166453902477440.c:8:29: error: invalid operands to binary + (have 'int *' and 'struct S')
                 int * c = a + b;
                             ^

        */
        error("""
              struct S { int x; int y; };

              int * foo();
              struct S bar();
              int * x() {
                int * a = foo();
                struct S b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_13469687499068259745.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_13469687499068259745.c:7:32: error: invalid operands to binary + (have 'int *' and 'int *')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              int * foo();
              struct S x() {
                int * a = foo();
                int * b = foo();
                struct S c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf9_14() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_145477272289062841214.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_145477272289062841214.c:8:32: error: invalid operands to binary + (have 'int *' and 'struct T')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              int * foo();
              struct T bar();
              struct T x() {
                int * a = foo();
                struct T b = bar();
                struct T c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_14864483309170591543.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_14864483309170591543.c:8:29: error: invalid operands to binary + (have 'int *' and 'struct T')
                 int * c = a + b;
                             ^

        */
        error("""
              struct T { int x; int y; int z; };

              int * foo();
              struct T bar();
              int * x() {
                int * a = foo();
                struct T b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_149170883379352788453.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_149170883379352788453.c:7:32: error: invalid operands to binary + (have 'int *' and 'int *')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              int * foo();
              struct T x() {
                int * a = foo();
                int * b = foo();
                struct T c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf9_15() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_151720785527736824298.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_151720785527736824298.c:8:40: error: invalid operands to binary + (have 'int *' and 'struct_anonymous')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              int * foo();
              struct_anonymous bar();
              struct_anonymous x() {
                int * a = foo();
                struct_anonymous b = bar();
                struct_anonymous c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_158572525376223902675.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_158572525376223902675.c:8:29: error: invalid operands to binary + (have 'int *' and 'struct_anonymous')
                 int * c = a + b;
                             ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              int * foo();
              struct_anonymous bar();
              int * x() {
                int * a = foo();
                struct_anonymous b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_15807723583505309677.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_15807723583505309677.c:7:40: error: invalid operands to binary + (have 'int *' and 'int *')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              int * foo();
              struct_anonymous x() {
                int * a = foo();
                int * b = foo();
                struct_anonymous c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf9_16() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_165603872305433357628.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_165603872305433357628.c:5:24: error: invalid initializer
                 struct { int a; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf9_165603872305433357628.c:6:41: error: invalid operands to binary + (have 'int *' and 'struct <anonymous>')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf9_165603872305433357628.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              int * foo();
              struct { int a; } bar();
              struct { int a; } x() {
                int * a = foo();
                struct { int a; } b = bar();
                struct { int a; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_168500626573662459718.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_168500626573662459718.c:5:24: error: invalid initializer
                 struct { int a; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf9_168500626573662459718.c:6:29: error: invalid operands to binary + (have 'int *' and 'struct <anonymous>')
                 int * c = a + b;
                             ^

        */
        error("""
              int * foo();
              struct { int a; } bar();
              int * x() {
                int * a = foo();
                struct { int a; } b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_164615787397212998033.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_164615787397212998033.c:5:41: error: invalid operands to binary + (have 'int *' and 'int *')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf9_164615787397212998033.c:6:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              int * foo();
              struct { int a; } x() {
                int * a = foo();
                int * b = foo();
                struct { int a; } c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf9_17() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_177068784650518019048.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_177068784650518019048.c:5:24: error: invalid initializer
                 struct { float b; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf9_177068784650518019048.c:6:43: error: invalid operands to binary + (have 'int *' and 'struct <anonymous>')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf9_177068784650518019048.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              int * foo();
              struct { float b; } bar();
              struct { float b; } x() {
                int * a = foo();
                struct { float b; } b = bar();
                struct { float b; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_175835969184653970550.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_175835969184653970550.c:5:24: error: invalid initializer
                 struct { float b; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf9_175835969184653970550.c:6:29: error: invalid operands to binary + (have 'int *' and 'struct <anonymous>')
                 int * c = a + b;
                             ^

        */
        error("""
              int * foo();
              struct { float b; } bar();
              int * x() {
                int * a = foo();
                struct { float b; } b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_178214389425228790502.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_178214389425228790502.c:5:43: error: invalid operands to binary + (have 'int *' and 'int *')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf9_178214389425228790502.c:6:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              int * foo();
              struct { float b; } x() {
                int * a = foo();
                int * b = foo();
                struct { float b; } c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf9_18() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_184428371066056132371.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_184428371066056132371.c:6:34: warning: initialization makes integer from pointer without a cast
                 volatile int c = a + b;
                                  ^

        */
        warning("""
              int * foo();
              volatile int bar();
              volatile int x() {
                int * a = foo();
                volatile int b = bar();
                volatile int c = a + b;
                return c;
              }
                """)
        correct("""
              int * foo();
              volatile int bar();
              int * x() {
                int * a = foo();
                volatile int b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_181017535273297343269.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_181017535273297343269.c:5:36: error: invalid operands to binary + (have 'int *' and 'int *')
                 volatile int c = a + b;
                                    ^

        */
        error("""
              int * foo();
              volatile int x() {
                int * a = foo();
                int * b = foo();
                volatile int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf9_19() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_193500957405043679222.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_193500957405043679222.c:6:31: warning: initialization makes integer from pointer without a cast
                 const int c = a + b;
                               ^

        */
        warning("""
              int * foo();
              const int bar();
              const int x() {
                int * a = foo();
                const int b = bar();
                const int c = a + b;
                return c;
              }
                """)
        correct("""
              int * foo();
              const int bar();
              int * x() {
                int * a = foo();
                const int b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_196300410482069615531.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_196300410482069615531.c:5:33: error: invalid operands to binary + (have 'int *' and 'int *')
                 const int c = a + b;
                                 ^

        */
        error("""
              int * foo();
              const int x() {
                int * a = foo();
                int * b = foo();
                const int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf9_20() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_207614574399257896585.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_207614574399257896585.c:6:36: error: invalid operands to binary + (have 'int *' and 'double')
                 const double c = a + b;
                                    ^

        */
        error("""
              int * foo();
              const double bar();
              const double x() {
                int * a = foo();
                const double b = bar();
                const double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_201406130062684834885.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_201406130062684834885.c:6:29: error: invalid operands to binary + (have 'int *' and 'double')
                 int * c = a + b;
                             ^

        */
        error("""
              int * foo();
              const double bar();
              int * x() {
                int * a = foo();
                const double b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_201016479284334696864.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_201016479284334696864.c:5:36: error: invalid operands to binary + (have 'int *' and 'int *')
                 const double c = a + b;
                                    ^

        */
        error("""
              int * foo();
              const double x() {
                int * a = foo();
                int * b = foo();
                const double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf9_21() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_214467826559354008061.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_214467826559354008061.c:6:39: error: invalid operands to binary + (have 'int *' and 'double')
                 volatile double c = a + b;
                                       ^

        */
        error("""
              int * foo();
              volatile double bar();
              volatile double x() {
                int * a = foo();
                volatile double b = bar();
                volatile double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_214080309073136863148.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_214080309073136863148.c:6:29: error: invalid operands to binary + (have 'int *' and 'double')
                 int * c = a + b;
                             ^

        */
        error("""
              int * foo();
              volatile double bar();
              int * x() {
                int * a = foo();
                volatile double b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_21565847890590029006.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_21565847890590029006.c:5:39: error: invalid operands to binary + (have 'int *' and 'int *')
                 volatile double c = a + b;
                                       ^

        */
        error("""
              int * foo();
              volatile double x() {
                int * a = foo();
                int * b = foo();
                volatile double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf9_22() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_22499342586826671403.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_22499342586826671403.c:6:29: error: invalid operands to binary + (have 'int *' and 'int *')
                 int * c = a + b;
                             ^

        */
        error("""
              int * foo();
              int * bar();
              int * x() {
                int * a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_223100414420634636242.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_223100414420634636242.c:6:29: error: invalid operands to binary + (have 'int *' and 'int *')
                 int * c = a + b;
                             ^

        */
        error("""
              int * foo();
              int * bar();
              int * x() {
                int * a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_22256477342108884986.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_22256477342108884986.c:5:29: error: invalid operands to binary + (have 'int *' and 'int *')
                 int * c = a + b;
                             ^

        */
        error("""
              int * foo();
              int * x() {
                int * a = foo();
                int * b = foo();
                int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf9_23() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_23359985930308658124.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_23359985930308658124.c:6:35: error: invalid operands to binary + (have 'int *' and 'const int *')
                 const int * c = a + b;
                                   ^

        */
        error("""
              int * foo();
              const int * bar();
              const int * x() {
                int * a = foo();
                const int * b = bar();
                const int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_23760864490406209475.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_23760864490406209475.c:6:29: error: invalid operands to binary + (have 'int *' and 'const int *')
                 int * c = a + b;
                             ^

        */
        error("""
              int * foo();
              const int * bar();
              int * x() {
                int * a = foo();
                const int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_239218616920329598076.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_239218616920329598076.c:5:35: error: invalid operands to binary + (have 'int *' and 'int *')
                 const int * c = a + b;
                                   ^

        */
        error("""
              int * foo();
              const int * x() {
                int * a = foo();
                int * b = foo();
                const int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf9_24() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_241795555310732341537.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_241795555310732341537.c:6:38: error: invalid operands to binary + (have 'int *' and 'volatile int *')
                 volatile int * c = a + b;
                                      ^

        */
        error("""
              int * foo();
              volatile int * bar();
              volatile int * x() {
                int * a = foo();
                volatile int * b = bar();
                volatile int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_242518726515832385662.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_242518726515832385662.c:6:29: error: invalid operands to binary + (have 'int *' and 'volatile int *')
                 int * c = a + b;
                             ^

        */
        error("""
              int * foo();
              volatile int * bar();
              int * x() {
                int * a = foo();
                volatile int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf9_246857496197376294717.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf9_246857496197376294717.c:5:38: error: invalid operands to binary + (have 'int *' and 'int *')
                 volatile int * c = a + b;
                                      ^

        */
        error("""
              int * foo();
              volatile int * x() {
                int * a = foo();
                int * b = foo();
                volatile int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf10_0() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_07577676340459378380.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_07577676340459378380.c:6:26: warning: initialization makes integer from pointer without a cast
                 char c = a + b;
                          ^

        */
        warning("""
              int ** foo();
              char bar();
              char x() {
                int ** a = foo();
                char b = bar();
                char c = a + b;
                return c;
              }
                """)
        correct("""
              int ** foo();
              char bar();
              int ** x() {
                int ** a = foo();
                char b = bar();
                int ** c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_04608512655237932095.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_04608512655237932095.c:5:28: error: invalid operands to binary + (have 'int **' and 'int **')
                 char c = a + b;
                            ^

        */
        error("""
              int ** foo();
              char x() {
                int ** a = foo();
                int ** b = foo();
                char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf10_1() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_1311297317045099205.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_1311297317045099205.c:6:33: warning: initialization makes integer from pointer without a cast
                 signed char c = a + b;
                                 ^

        */
        warning("""
              int ** foo();
              signed char bar();
              signed char x() {
                int ** a = foo();
                signed char b = bar();
                signed char c = a + b;
                return c;
              }
                """)
        correct("""
              int ** foo();
              signed char bar();
              int ** x() {
                int ** a = foo();
                signed char b = bar();
                int ** c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_13821185940125117067.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_13821185940125117067.c:5:35: error: invalid operands to binary + (have 'int **' and 'int **')
                 signed char c = a + b;
                                   ^

        */
        error("""
              int ** foo();
              signed char x() {
                int ** a = foo();
                int ** b = foo();
                signed char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf10_2() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_21852144268210752513.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_21852144268210752513.c:6:35: warning: initialization makes integer from pointer without a cast
                 unsigned char c = a + b;
                                   ^

        */
        warning("""
              int ** foo();
              unsigned char bar();
              unsigned char x() {
                int ** a = foo();
                unsigned char b = bar();
                unsigned char c = a + b;
                return c;
              }
                """)
        correct("""
              int ** foo();
              unsigned char bar();
              int ** x() {
                int ** a = foo();
                unsigned char b = bar();
                int ** c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_21755044794496126454.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_21755044794496126454.c:5:37: error: invalid operands to binary + (have 'int **' and 'int **')
                 unsigned char c = a + b;
                                     ^

        */
        error("""
              int ** foo();
              unsigned char x() {
                int ** a = foo();
                int ** b = foo();
                unsigned char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf10_3() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_36670692614428464469.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_36670692614428464469.c:6:34: warning: initialization makes integer from pointer without a cast
                 unsigned int c = a + b;
                                  ^

        */
        warning("""
              int ** foo();
              unsigned int bar();
              unsigned int x() {
                int ** a = foo();
                unsigned int b = bar();
                unsigned int c = a + b;
                return c;
              }
                """)
        correct("""
              int ** foo();
              unsigned int bar();
              int ** x() {
                int ** a = foo();
                unsigned int b = bar();
                int ** c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_38583773355209202198.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_38583773355209202198.c:5:36: error: invalid operands to binary + (have 'int **' and 'int **')
                 unsigned int c = a + b;
                                    ^

        */
        error("""
              int ** foo();
              unsigned int x() {
                int ** a = foo();
                int ** b = foo();
                unsigned int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf10_4() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_45538770065031850100.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_45538770065031850100.c:6:32: warning: initialization makes integer from pointer without a cast
                 signed int c = a + b;
                                ^

        */
        warning("""
              int ** foo();
              signed int bar();
              signed int x() {
                int ** a = foo();
                signed int b = bar();
                signed int c = a + b;
                return c;
              }
                """)
        correct("""
              int ** foo();
              signed int bar();
              int ** x() {
                int ** a = foo();
                signed int b = bar();
                int ** c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_41543575231430928699.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_41543575231430928699.c:5:34: error: invalid operands to binary + (have 'int **' and 'int **')
                 signed int c = a + b;
                                  ^

        */
        error("""
              int ** foo();
              signed int x() {
                int ** a = foo();
                int ** b = foo();
                signed int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf10_5() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_55763111874794105873.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_55763111874794105873.c:6:26: warning: initialization makes integer from pointer without a cast
                 long c = a + b;
                          ^

        */
        warning("""
              int ** foo();
              long bar();
              long x() {
                int ** a = foo();
                long b = bar();
                long c = a + b;
                return c;
              }
                """)
        correct("""
              int ** foo();
              long bar();
              int ** x() {
                int ** a = foo();
                long b = bar();
                int ** c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_53587568973374860392.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_53587568973374860392.c:5:28: error: invalid operands to binary + (have 'int **' and 'int **')
                 long c = a + b;
                            ^

        */
        error("""
              int ** foo();
              long x() {
                int ** a = foo();
                int ** b = foo();
                long c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf10_6() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_69042747636210960966.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_69042747636210960966.c:6:29: error: invalid operands to binary + (have 'int **' and 'float')
                 float c = a + b;
                             ^

        */
        error("""
              int ** foo();
              float bar();
              float x() {
                int ** a = foo();
                float b = bar();
                float c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_63378454336006254159.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_63378454336006254159.c:6:30: error: invalid operands to binary + (have 'int **' and 'float')
                 int ** c = a + b;
                              ^

        */
        error("""
              int ** foo();
              float bar();
              int ** x() {
                int ** a = foo();
                float b = bar();
                int ** c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_61496434371325111374.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_61496434371325111374.c:5:29: error: invalid operands to binary + (have 'int **' and 'int **')
                 float c = a + b;
                             ^

        */
        error("""
              int ** foo();
              float x() {
                int ** a = foo();
                int ** b = foo();
                float c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf10_7() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_72610083881920349444.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_72610083881920349444.c:6:30: error: invalid operands to binary + (have 'int **' and 'double')
                 double c = a + b;
                              ^

        */
        error("""
              int ** foo();
              double bar();
              double x() {
                int ** a = foo();
                double b = bar();
                double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_72326162753236376914.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_72326162753236376914.c:6:30: error: invalid operands to binary + (have 'int **' and 'double')
                 int ** c = a + b;
                              ^

        */
        error("""
              int ** foo();
              double bar();
              int ** x() {
                int ** a = foo();
                double b = bar();
                int ** c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_73001071001724744681.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_73001071001724744681.c:5:30: error: invalid operands to binary + (have 'int **' and 'int **')
                 double c = a + b;
                              ^

        */
        error("""
              int ** foo();
              double x() {
                int ** a = foo();
                int ** b = foo();
                double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf10_8() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_8112411194093625862.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_8112411194093625862.c:6:35: error: invalid operands to binary + (have 'int **' and 'long double')
                 long double c = a + b;
                                   ^

        */
        error("""
              int ** foo();
              long double bar();
              long double x() {
                int ** a = foo();
                long double b = bar();
                long double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_87169761192618510279.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_87169761192618510279.c:6:30: error: invalid operands to binary + (have 'int **' and 'long double')
                 int ** c = a + b;
                              ^

        */
        error("""
              int ** foo();
              long double bar();
              int ** x() {
                int ** a = foo();
                long double b = bar();
                int ** c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_87435826427949414797.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_87435826427949414797.c:5:35: error: invalid operands to binary + (have 'int **' and 'int **')
                 long double c = a + b;
                                   ^

        */
        error("""
              int ** foo();
              long double x() {
                int ** a = foo();
                int ** b = foo();
                long double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf10_9() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_98949906044047096408.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_98949906044047096408.c:6:29: error: invalid operands to binary + (have 'int **' and 'int *')
                 int * c = a + b;
                             ^

        */
        error("""
              int ** foo();
              int * bar();
              int * x() {
                int ** a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_93955646231750874365.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_93955646231750874365.c:6:30: error: invalid operands to binary + (have 'int **' and 'int *')
                 int ** c = a + b;
                              ^

        */
        error("""
              int ** foo();
              int * bar();
              int ** x() {
                int ** a = foo();
                int * b = bar();
                int ** c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_9655740867591687174.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_9655740867591687174.c:5:29: error: invalid operands to binary + (have 'int **' and 'int **')
                 int * c = a + b;
                             ^

        */
        error("""
              int ** foo();
              int * x() {
                int ** a = foo();
                int ** b = foo();
                int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf10_10() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_10812310395103804265.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_10812310395103804265.c:6:30: error: invalid operands to binary + (have 'int **' and 'int **')
                 int ** c = a + b;
                              ^

        */
        error("""
              int ** foo();
              int ** bar();
              int ** x() {
                int ** a = foo();
                int ** b = bar();
                int ** c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_10113692377394148181.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_10113692377394148181.c:6:30: error: invalid operands to binary + (have 'int **' and 'int **')
                 int ** c = a + b;
                              ^

        */
        error("""
              int ** foo();
              int ** bar();
              int ** x() {
                int ** a = foo();
                int ** b = bar();
                int ** c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_102553241215149788154.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_102553241215149788154.c:5:30: error: invalid operands to binary + (have 'int **' and 'int **')
                 int ** c = a + b;
                              ^

        */
        error("""
              int ** foo();
              int ** x() {
                int ** a = foo();
                int ** b = foo();
                int ** c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf10_11() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_112897879134783536807.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_112897879134783536807.c:6:30: error: invalid operands to binary + (have 'int **' and 'char *')
                 char * c = a + b;
                              ^

        */
        error("""
              int ** foo();
              char * bar();
              char * x() {
                int ** a = foo();
                char * b = bar();
                char * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_114357348527253393623.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_114357348527253393623.c:6:30: error: invalid operands to binary + (have 'int **' and 'char *')
                 int ** c = a + b;
                              ^

        */
        error("""
              int ** foo();
              char * bar();
              int ** x() {
                int ** a = foo();
                char * b = bar();
                int ** c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_116087491176044851477.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_116087491176044851477.c:5:30: error: invalid operands to binary + (have 'int **' and 'int **')
                 char * c = a + b;
                              ^

        */
        error("""
              int ** foo();
              char * x() {
                int ** a = foo();
                int ** b = foo();
                char * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf10_12() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_124607047405629676619.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_124607047405629676619.c:6:32: error: invalid operands to binary + (have 'int **' and 'double *')
                 double * c = a + b;
                                ^

        */
        error("""
              int ** foo();
              double * bar();
              double * x() {
                int ** a = foo();
                double * b = bar();
                double * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_124722585314586362401.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_124722585314586362401.c:6:30: error: invalid operands to binary + (have 'int **' and 'double *')
                 int ** c = a + b;
                              ^

        */
        error("""
              int ** foo();
              double * bar();
              int ** x() {
                int ** a = foo();
                double * b = bar();
                int ** c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_124437257185387486979.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_124437257185387486979.c:5:32: error: invalid operands to binary + (have 'int **' and 'int **')
                 double * c = a + b;
                                ^

        */
        error("""
              int ** foo();
              double * x() {
                int ** a = foo();
                int ** b = foo();
                double * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf10_13() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_133935678390658162561.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_133935678390658162561.c:8:32: error: invalid operands to binary + (have 'int **' and 'struct S')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              int ** foo();
              struct S bar();
              struct S x() {
                int ** a = foo();
                struct S b = bar();
                struct S c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_138142591579500386390.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_138142591579500386390.c:8:30: error: invalid operands to binary + (have 'int **' and 'struct S')
                 int ** c = a + b;
                              ^

        */
        error("""
              struct S { int x; int y; };

              int ** foo();
              struct S bar();
              int ** x() {
                int ** a = foo();
                struct S b = bar();
                int ** c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_137091272307826077191.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_137091272307826077191.c:7:32: error: invalid operands to binary + (have 'int **' and 'int **')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              int ** foo();
              struct S x() {
                int ** a = foo();
                int ** b = foo();
                struct S c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf10_14() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_14798890619261504590.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_14798890619261504590.c:8:32: error: invalid operands to binary + (have 'int **' and 'struct T')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              int ** foo();
              struct T bar();
              struct T x() {
                int ** a = foo();
                struct T b = bar();
                struct T c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_147243767670778543810.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_147243767670778543810.c:8:30: error: invalid operands to binary + (have 'int **' and 'struct T')
                 int ** c = a + b;
                              ^

        */
        error("""
              struct T { int x; int y; int z; };

              int ** foo();
              struct T bar();
              int ** x() {
                int ** a = foo();
                struct T b = bar();
                int ** c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_141807812624140996739.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_141807812624140996739.c:7:32: error: invalid operands to binary + (have 'int **' and 'int **')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              int ** foo();
              struct T x() {
                int ** a = foo();
                int ** b = foo();
                struct T c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf10_15() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_152006248033049450009.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_152006248033049450009.c:8:40: error: invalid operands to binary + (have 'int **' and 'struct_anonymous')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              int ** foo();
              struct_anonymous bar();
              struct_anonymous x() {
                int ** a = foo();
                struct_anonymous b = bar();
                struct_anonymous c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_156180569282318068956.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_156180569282318068956.c:8:30: error: invalid operands to binary + (have 'int **' and 'struct_anonymous')
                 int ** c = a + b;
                              ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              int ** foo();
              struct_anonymous bar();
              int ** x() {
                int ** a = foo();
                struct_anonymous b = bar();
                int ** c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_151727794921699068027.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_151727794921699068027.c:7:40: error: invalid operands to binary + (have 'int **' and 'int **')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              int ** foo();
              struct_anonymous x() {
                int ** a = foo();
                int ** b = foo();
                struct_anonymous c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf10_16() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_165084015543351023795.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_165084015543351023795.c:5:24: error: invalid initializer
                 struct { int a; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf10_165084015543351023795.c:6:41: error: invalid operands to binary + (have 'int **' and 'struct <anonymous>')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf10_165084015543351023795.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              int ** foo();
              struct { int a; } bar();
              struct { int a; } x() {
                int ** a = foo();
                struct { int a; } b = bar();
                struct { int a; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_164287440607609874229.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_164287440607609874229.c:5:24: error: invalid initializer
                 struct { int a; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf10_164287440607609874229.c:6:30: error: invalid operands to binary + (have 'int **' and 'struct <anonymous>')
                 int ** c = a + b;
                              ^

        */
        error("""
              int ** foo();
              struct { int a; } bar();
              int ** x() {
                int ** a = foo();
                struct { int a; } b = bar();
                int ** c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_161034552090063665498.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_161034552090063665498.c:5:41: error: invalid operands to binary + (have 'int **' and 'int **')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf10_161034552090063665498.c:6:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              int ** foo();
              struct { int a; } x() {
                int ** a = foo();
                int ** b = foo();
                struct { int a; } c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf10_17() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_172116650738576862303.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_172116650738576862303.c:5:24: error: invalid initializer
                 struct { float b; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf10_172116650738576862303.c:6:43: error: invalid operands to binary + (have 'int **' and 'struct <anonymous>')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf10_172116650738576862303.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              int ** foo();
              struct { float b; } bar();
              struct { float b; } x() {
                int ** a = foo();
                struct { float b; } b = bar();
                struct { float b; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_179065928619529079561.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_179065928619529079561.c:5:24: error: invalid initializer
                 struct { float b; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf10_179065928619529079561.c:6:30: error: invalid operands to binary + (have 'int **' and 'struct <anonymous>')
                 int ** c = a + b;
                              ^

        */
        error("""
              int ** foo();
              struct { float b; } bar();
              int ** x() {
                int ** a = foo();
                struct { float b; } b = bar();
                int ** c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_175524166373033850097.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_175524166373033850097.c:5:43: error: invalid operands to binary + (have 'int **' and 'int **')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf10_175524166373033850097.c:6:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              int ** foo();
              struct { float b; } x() {
                int ** a = foo();
                int ** b = foo();
                struct { float b; } c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf10_18() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_184669600548828488628.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_184669600548828488628.c:6:34: warning: initialization makes integer from pointer without a cast
                 volatile int c = a + b;
                                  ^

        */
        warning("""
              int ** foo();
              volatile int bar();
              volatile int x() {
                int ** a = foo();
                volatile int b = bar();
                volatile int c = a + b;
                return c;
              }
                """)
        correct("""
              int ** foo();
              volatile int bar();
              int ** x() {
                int ** a = foo();
                volatile int b = bar();
                int ** c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_182056350041074936394.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_182056350041074936394.c:5:36: error: invalid operands to binary + (have 'int **' and 'int **')
                 volatile int c = a + b;
                                    ^

        */
        error("""
              int ** foo();
              volatile int x() {
                int ** a = foo();
                int ** b = foo();
                volatile int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf10_19() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_199206502645133666530.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_199206502645133666530.c:6:31: warning: initialization makes integer from pointer without a cast
                 const int c = a + b;
                               ^

        */
        warning("""
              int ** foo();
              const int bar();
              const int x() {
                int ** a = foo();
                const int b = bar();
                const int c = a + b;
                return c;
              }
                """)
        correct("""
              int ** foo();
              const int bar();
              int ** x() {
                int ** a = foo();
                const int b = bar();
                int ** c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_192552842752927921777.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_192552842752927921777.c:5:33: error: invalid operands to binary + (have 'int **' and 'int **')
                 const int c = a + b;
                                 ^

        */
        error("""
              int ** foo();
              const int x() {
                int ** a = foo();
                int ** b = foo();
                const int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf10_20() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_203366338378453986976.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_203366338378453986976.c:6:36: error: invalid operands to binary + (have 'int **' and 'double')
                 const double c = a + b;
                                    ^

        */
        error("""
              int ** foo();
              const double bar();
              const double x() {
                int ** a = foo();
                const double b = bar();
                const double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_203189504562413196095.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_203189504562413196095.c:6:30: error: invalid operands to binary + (have 'int **' and 'double')
                 int ** c = a + b;
                              ^

        */
        error("""
              int ** foo();
              const double bar();
              int ** x() {
                int ** a = foo();
                const double b = bar();
                int ** c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_207834474940421147326.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_207834474940421147326.c:5:36: error: invalid operands to binary + (have 'int **' and 'int **')
                 const double c = a + b;
                                    ^

        */
        error("""
              int ** foo();
              const double x() {
                int ** a = foo();
                int ** b = foo();
                const double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf10_21() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_212470524236004893788.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_212470524236004893788.c:6:39: error: invalid operands to binary + (have 'int **' and 'double')
                 volatile double c = a + b;
                                       ^

        */
        error("""
              int ** foo();
              volatile double bar();
              volatile double x() {
                int ** a = foo();
                volatile double b = bar();
                volatile double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_21431271240554752666.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_21431271240554752666.c:6:30: error: invalid operands to binary + (have 'int **' and 'double')
                 int ** c = a + b;
                              ^

        */
        error("""
              int ** foo();
              volatile double bar();
              int ** x() {
                int ** a = foo();
                volatile double b = bar();
                int ** c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_216201692227722761964.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_216201692227722761964.c:5:39: error: invalid operands to binary + (have 'int **' and 'int **')
                 volatile double c = a + b;
                                       ^

        */
        error("""
              int ** foo();
              volatile double x() {
                int ** a = foo();
                int ** b = foo();
                volatile double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf10_22() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_222831365651365318364.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_222831365651365318364.c:6:29: error: invalid operands to binary + (have 'int **' and 'int *')
                 int * c = a + b;
                             ^

        */
        error("""
              int ** foo();
              int * bar();
              int * x() {
                int ** a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_226814484229284764815.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_226814484229284764815.c:6:30: error: invalid operands to binary + (have 'int **' and 'int *')
                 int ** c = a + b;
                              ^

        */
        error("""
              int ** foo();
              int * bar();
              int ** x() {
                int ** a = foo();
                int * b = bar();
                int ** c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_22752161063867174623.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_22752161063867174623.c:5:29: error: invalid operands to binary + (have 'int **' and 'int **')
                 int * c = a + b;
                             ^

        */
        error("""
              int ** foo();
              int * x() {
                int ** a = foo();
                int ** b = foo();
                int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf10_23() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_235112271483296082103.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_235112271483296082103.c:6:35: error: invalid operands to binary + (have 'int **' and 'const int *')
                 const int * c = a + b;
                                   ^

        */
        error("""
              int ** foo();
              const int * bar();
              const int * x() {
                int ** a = foo();
                const int * b = bar();
                const int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_235881835843591976960.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_235881835843591976960.c:6:30: error: invalid operands to binary + (have 'int **' and 'const int *')
                 int ** c = a + b;
                              ^

        */
        error("""
              int ** foo();
              const int * bar();
              int ** x() {
                int ** a = foo();
                const int * b = bar();
                int ** c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_239125635601128559027.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_239125635601128559027.c:5:35: error: invalid operands to binary + (have 'int **' and 'int **')
                 const int * c = a + b;
                                   ^

        */
        error("""
              int ** foo();
              const int * x() {
                int ** a = foo();
                int ** b = foo();
                const int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf10_24() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_243125133721445741864.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_243125133721445741864.c:6:38: error: invalid operands to binary + (have 'int **' and 'volatile int *')
                 volatile int * c = a + b;
                                      ^

        */
        error("""
              int ** foo();
              volatile int * bar();
              volatile int * x() {
                int ** a = foo();
                volatile int * b = bar();
                volatile int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_243678234461357427828.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_243678234461357427828.c:6:30: error: invalid operands to binary + (have 'int **' and 'volatile int *')
                 int ** c = a + b;
                              ^

        */
        error("""
              int ** foo();
              volatile int * bar();
              int ** x() {
                int ** a = foo();
                volatile int * b = bar();
                int ** c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf10_241768230645185555122.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf10_241768230645185555122.c:5:38: error: invalid operands to binary + (have 'int **' and 'int **')
                 volatile int * c = a + b;
                                      ^

        */
        error("""
              int ** foo();
              volatile int * x() {
                int ** a = foo();
                int ** b = foo();
                volatile int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf11_0() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_06232417105474325457.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_06232417105474325457.c:6:26: warning: initialization makes integer from pointer without a cast
                 char c = a + b;
                          ^

        */
        warning("""
              char * foo();
              char bar();
              char x() {
                char * a = foo();
                char b = bar();
                char c = a + b;
                return c;
              }
                """)
        correct("""
              char * foo();
              char bar();
              char * x() {
                char * a = foo();
                char b = bar();
                char * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_04306421431516695069.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_04306421431516695069.c:5:28: error: invalid operands to binary + (have 'char *' and 'char *')
                 char c = a + b;
                            ^

        */
        error("""
              char * foo();
              char x() {
                char * a = foo();
                char * b = foo();
                char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf11_1() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_15036040200630266828.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_15036040200630266828.c:6:33: warning: initialization makes integer from pointer without a cast
                 signed char c = a + b;
                                 ^

        */
        warning("""
              char * foo();
              signed char bar();
              signed char x() {
                char * a = foo();
                signed char b = bar();
                signed char c = a + b;
                return c;
              }
                """)
        correct("""
              char * foo();
              signed char bar();
              char * x() {
                char * a = foo();
                signed char b = bar();
                char * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_18319791898370216230.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_18319791898370216230.c:5:35: error: invalid operands to binary + (have 'char *' and 'char *')
                 signed char c = a + b;
                                   ^

        */
        error("""
              char * foo();
              signed char x() {
                char * a = foo();
                char * b = foo();
                signed char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf11_2() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_29164590713991895178.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_29164590713991895178.c:6:35: warning: initialization makes integer from pointer without a cast
                 unsigned char c = a + b;
                                   ^

        */
        warning("""
              char * foo();
              unsigned char bar();
              unsigned char x() {
                char * a = foo();
                unsigned char b = bar();
                unsigned char c = a + b;
                return c;
              }
                """)
        correct("""
              char * foo();
              unsigned char bar();
              char * x() {
                char * a = foo();
                unsigned char b = bar();
                char * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_27066862460553782305.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_27066862460553782305.c:5:37: error: invalid operands to binary + (have 'char *' and 'char *')
                 unsigned char c = a + b;
                                     ^

        */
        error("""
              char * foo();
              unsigned char x() {
                char * a = foo();
                char * b = foo();
                unsigned char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf11_3() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_3226095880470435478.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_3226095880470435478.c:6:34: warning: initialization makes integer from pointer without a cast
                 unsigned int c = a + b;
                                  ^

        */
        warning("""
              char * foo();
              unsigned int bar();
              unsigned int x() {
                char * a = foo();
                unsigned int b = bar();
                unsigned int c = a + b;
                return c;
              }
                """)
        correct("""
              char * foo();
              unsigned int bar();
              char * x() {
                char * a = foo();
                unsigned int b = bar();
                char * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_31720004595190462126.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_31720004595190462126.c:5:36: error: invalid operands to binary + (have 'char *' and 'char *')
                 unsigned int c = a + b;
                                    ^

        */
        error("""
              char * foo();
              unsigned int x() {
                char * a = foo();
                char * b = foo();
                unsigned int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf11_4() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_47254562118415162403.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_47254562118415162403.c:6:32: warning: initialization makes integer from pointer without a cast
                 signed int c = a + b;
                                ^

        */
        warning("""
              char * foo();
              signed int bar();
              signed int x() {
                char * a = foo();
                signed int b = bar();
                signed int c = a + b;
                return c;
              }
                """)
        correct("""
              char * foo();
              signed int bar();
              char * x() {
                char * a = foo();
                signed int b = bar();
                char * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_45844980511106678145.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_45844980511106678145.c:5:34: error: invalid operands to binary + (have 'char *' and 'char *')
                 signed int c = a + b;
                                  ^

        */
        error("""
              char * foo();
              signed int x() {
                char * a = foo();
                char * b = foo();
                signed int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf11_5() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_57354993104900579778.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_57354993104900579778.c:6:26: warning: initialization makes integer from pointer without a cast
                 long c = a + b;
                          ^

        */
        warning("""
              char * foo();
              long bar();
              long x() {
                char * a = foo();
                long b = bar();
                long c = a + b;
                return c;
              }
                """)
        correct("""
              char * foo();
              long bar();
              char * x() {
                char * a = foo();
                long b = bar();
                char * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_5156739117036903045.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_5156739117036903045.c:5:28: error: invalid operands to binary + (have 'char *' and 'char *')
                 long c = a + b;
                            ^

        */
        error("""
              char * foo();
              long x() {
                char * a = foo();
                char * b = foo();
                long c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf11_6() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_68241766980369556256.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_68241766980369556256.c:6:29: error: invalid operands to binary + (have 'char *' and 'float')
                 float c = a + b;
                             ^

        */
        error("""
              char * foo();
              float bar();
              float x() {
                char * a = foo();
                float b = bar();
                float c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_64581287122989616889.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_64581287122989616889.c:6:30: error: invalid operands to binary + (have 'char *' and 'float')
                 char * c = a + b;
                              ^

        */
        error("""
              char * foo();
              float bar();
              char * x() {
                char * a = foo();
                float b = bar();
                char * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_69142658737834314317.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_69142658737834314317.c:5:29: error: invalid operands to binary + (have 'char *' and 'char *')
                 float c = a + b;
                             ^

        */
        error("""
              char * foo();
              float x() {
                char * a = foo();
                char * b = foo();
                float c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf11_7() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_77916739398196481022.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_77916739398196481022.c:6:30: error: invalid operands to binary + (have 'char *' and 'double')
                 double c = a + b;
                              ^

        */
        error("""
              char * foo();
              double bar();
              double x() {
                char * a = foo();
                double b = bar();
                double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_74310625488839785701.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_74310625488839785701.c:6:30: error: invalid operands to binary + (have 'char *' and 'double')
                 char * c = a + b;
                              ^

        */
        error("""
              char * foo();
              double bar();
              char * x() {
                char * a = foo();
                double b = bar();
                char * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_76720341851282918491.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_76720341851282918491.c:5:30: error: invalid operands to binary + (have 'char *' and 'char *')
                 double c = a + b;
                              ^

        */
        error("""
              char * foo();
              double x() {
                char * a = foo();
                char * b = foo();
                double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf11_8() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_87427720702342222098.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_87427720702342222098.c:6:35: error: invalid operands to binary + (have 'char *' and 'long double')
                 long double c = a + b;
                                   ^

        */
        error("""
              char * foo();
              long double bar();
              long double x() {
                char * a = foo();
                long double b = bar();
                long double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_85257526858820918188.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_85257526858820918188.c:6:30: error: invalid operands to binary + (have 'char *' and 'long double')
                 char * c = a + b;
                              ^

        */
        error("""
              char * foo();
              long double bar();
              char * x() {
                char * a = foo();
                long double b = bar();
                char * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_87355842997726029845.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_87355842997726029845.c:5:35: error: invalid operands to binary + (have 'char *' and 'char *')
                 long double c = a + b;
                                   ^

        */
        error("""
              char * foo();
              long double x() {
                char * a = foo();
                char * b = foo();
                long double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf11_9() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_95798253177734496922.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_95798253177734496922.c:6:29: error: invalid operands to binary + (have 'char *' and 'int *')
                 int * c = a + b;
                             ^

        */
        error("""
              char * foo();
              int * bar();
              int * x() {
                char * a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_93294051822240664452.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_93294051822240664452.c:6:30: error: invalid operands to binary + (have 'char *' and 'int *')
                 char * c = a + b;
                              ^

        */
        error("""
              char * foo();
              int * bar();
              char * x() {
                char * a = foo();
                int * b = bar();
                char * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_91401321165314028220.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_91401321165314028220.c:5:29: error: invalid operands to binary + (have 'char *' and 'char *')
                 int * c = a + b;
                             ^

        */
        error("""
              char * foo();
              int * x() {
                char * a = foo();
                char * b = foo();
                int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf11_10() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_104732386127833749732.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_104732386127833749732.c:6:30: error: invalid operands to binary + (have 'char *' and 'int **')
                 int ** c = a + b;
                              ^

        */
        error("""
              char * foo();
              int ** bar();
              int ** x() {
                char * a = foo();
                int ** b = bar();
                int ** c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_105257305541664425521.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_105257305541664425521.c:6:30: error: invalid operands to binary + (have 'char *' and 'int **')
                 char * c = a + b;
                              ^

        */
        error("""
              char * foo();
              int ** bar();
              char * x() {
                char * a = foo();
                int ** b = bar();
                char * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_107298950236923278734.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_107298950236923278734.c:5:30: error: invalid operands to binary + (have 'char *' and 'char *')
                 int ** c = a + b;
                              ^

        */
        error("""
              char * foo();
              int ** x() {
                char * a = foo();
                char * b = foo();
                int ** c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf11_11() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_112443308801431899136.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_112443308801431899136.c:6:30: error: invalid operands to binary + (have 'char *' and 'char *')
                 char * c = a + b;
                              ^

        */
        error("""
              char * foo();
              char * bar();
              char * x() {
                char * a = foo();
                char * b = bar();
                char * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_113821358849764215260.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_113821358849764215260.c:6:30: error: invalid operands to binary + (have 'char *' and 'char *')
                 char * c = a + b;
                              ^

        */
        error("""
              char * foo();
              char * bar();
              char * x() {
                char * a = foo();
                char * b = bar();
                char * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_118676222862848368579.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_118676222862848368579.c:5:30: error: invalid operands to binary + (have 'char *' and 'char *')
                 char * c = a + b;
                              ^

        */
        error("""
              char * foo();
              char * x() {
                char * a = foo();
                char * b = foo();
                char * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf11_12() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_126751411192263260851.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_126751411192263260851.c:6:32: error: invalid operands to binary + (have 'char *' and 'double *')
                 double * c = a + b;
                                ^

        */
        error("""
              char * foo();
              double * bar();
              double * x() {
                char * a = foo();
                double * b = bar();
                double * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_125988869963182197873.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_125988869963182197873.c:6:30: error: invalid operands to binary + (have 'char *' and 'double *')
                 char * c = a + b;
                              ^

        */
        error("""
              char * foo();
              double * bar();
              char * x() {
                char * a = foo();
                double * b = bar();
                char * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_123646985770379644558.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_123646985770379644558.c:5:32: error: invalid operands to binary + (have 'char *' and 'char *')
                 double * c = a + b;
                                ^

        */
        error("""
              char * foo();
              double * x() {
                char * a = foo();
                char * b = foo();
                double * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf11_13() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_13819238532780032710.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_13819238532780032710.c:8:32: error: invalid operands to binary + (have 'char *' and 'struct S')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              char * foo();
              struct S bar();
              struct S x() {
                char * a = foo();
                struct S b = bar();
                struct S c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_133798952911990789567.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_133798952911990789567.c:8:30: error: invalid operands to binary + (have 'char *' and 'struct S')
                 char * c = a + b;
                              ^

        */
        error("""
              struct S { int x; int y; };

              char * foo();
              struct S bar();
              char * x() {
                char * a = foo();
                struct S b = bar();
                char * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_131303818012928950185.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_131303818012928950185.c:7:32: error: invalid operands to binary + (have 'char *' and 'char *')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              char * foo();
              struct S x() {
                char * a = foo();
                char * b = foo();
                struct S c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf11_14() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_141719139869813048879.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_141719139869813048879.c:8:32: error: invalid operands to binary + (have 'char *' and 'struct T')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              char * foo();
              struct T bar();
              struct T x() {
                char * a = foo();
                struct T b = bar();
                struct T c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_148651164674589675423.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_148651164674589675423.c:8:30: error: invalid operands to binary + (have 'char *' and 'struct T')
                 char * c = a + b;
                              ^

        */
        error("""
              struct T { int x; int y; int z; };

              char * foo();
              struct T bar();
              char * x() {
                char * a = foo();
                struct T b = bar();
                char * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_145030905023515345372.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_145030905023515345372.c:7:32: error: invalid operands to binary + (have 'char *' and 'char *')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              char * foo();
              struct T x() {
                char * a = foo();
                char * b = foo();
                struct T c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf11_15() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_151543553513138831006.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_151543553513138831006.c:8:40: error: invalid operands to binary + (have 'char *' and 'struct_anonymous')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              char * foo();
              struct_anonymous bar();
              struct_anonymous x() {
                char * a = foo();
                struct_anonymous b = bar();
                struct_anonymous c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_151692410895058745607.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_151692410895058745607.c:8:30: error: invalid operands to binary + (have 'char *' and 'struct_anonymous')
                 char * c = a + b;
                              ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              char * foo();
              struct_anonymous bar();
              char * x() {
                char * a = foo();
                struct_anonymous b = bar();
                char * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_154843760880427475359.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_154843760880427475359.c:7:40: error: invalid operands to binary + (have 'char *' and 'char *')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              char * foo();
              struct_anonymous x() {
                char * a = foo();
                char * b = foo();
                struct_anonymous c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf11_16() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_168290789064957252364.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_168290789064957252364.c:5:24: error: invalid initializer
                 struct { int a; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf11_168290789064957252364.c:6:41: error: invalid operands to binary + (have 'char *' and 'struct <anonymous>')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf11_168290789064957252364.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              char * foo();
              struct { int a; } bar();
              struct { int a; } x() {
                char * a = foo();
                struct { int a; } b = bar();
                struct { int a; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_168177605337466270185.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_168177605337466270185.c:5:24: error: invalid initializer
                 struct { int a; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf11_168177605337466270185.c:6:30: error: invalid operands to binary + (have 'char *' and 'struct <anonymous>')
                 char * c = a + b;
                              ^

        */
        error("""
              char * foo();
              struct { int a; } bar();
              char * x() {
                char * a = foo();
                struct { int a; } b = bar();
                char * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_163950141792702832669.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_163950141792702832669.c:5:41: error: invalid operands to binary + (have 'char *' and 'char *')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf11_163950141792702832669.c:6:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              char * foo();
              struct { int a; } x() {
                char * a = foo();
                char * b = foo();
                struct { int a; } c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf11_17() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_172058217988377355792.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_172058217988377355792.c:5:24: error: invalid initializer
                 struct { float b; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf11_172058217988377355792.c:6:43: error: invalid operands to binary + (have 'char *' and 'struct <anonymous>')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf11_172058217988377355792.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              char * foo();
              struct { float b; } bar();
              struct { float b; } x() {
                char * a = foo();
                struct { float b; } b = bar();
                struct { float b; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_176344145898065206907.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_176344145898065206907.c:5:24: error: invalid initializer
                 struct { float b; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf11_176344145898065206907.c:6:30: error: invalid operands to binary + (have 'char *' and 'struct <anonymous>')
                 char * c = a + b;
                              ^

        */
        error("""
              char * foo();
              struct { float b; } bar();
              char * x() {
                char * a = foo();
                struct { float b; } b = bar();
                char * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_176634449393655687626.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_176634449393655687626.c:5:43: error: invalid operands to binary + (have 'char *' and 'char *')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf11_176634449393655687626.c:6:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              char * foo();
              struct { float b; } x() {
                char * a = foo();
                char * b = foo();
                struct { float b; } c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf11_18() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_185931311175217299667.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_185931311175217299667.c:6:34: warning: initialization makes integer from pointer without a cast
                 volatile int c = a + b;
                                  ^

        */
        warning("""
              char * foo();
              volatile int bar();
              volatile int x() {
                char * a = foo();
                volatile int b = bar();
                volatile int c = a + b;
                return c;
              }
                """)
        correct("""
              char * foo();
              volatile int bar();
              char * x() {
                char * a = foo();
                volatile int b = bar();
                char * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_181728524034703916350.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_181728524034703916350.c:5:36: error: invalid operands to binary + (have 'char *' and 'char *')
                 volatile int c = a + b;
                                    ^

        */
        error("""
              char * foo();
              volatile int x() {
                char * a = foo();
                char * b = foo();
                volatile int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf11_19() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_191583236467225790995.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_191583236467225790995.c:6:31: warning: initialization makes integer from pointer without a cast
                 const int c = a + b;
                               ^

        */
        warning("""
              char * foo();
              const int bar();
              const int x() {
                char * a = foo();
                const int b = bar();
                const int c = a + b;
                return c;
              }
                """)
        correct("""
              char * foo();
              const int bar();
              char * x() {
                char * a = foo();
                const int b = bar();
                char * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_191383593726901311824.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_191383593726901311824.c:5:33: error: invalid operands to binary + (have 'char *' and 'char *')
                 const int c = a + b;
                                 ^

        */
        error("""
              char * foo();
              const int x() {
                char * a = foo();
                char * b = foo();
                const int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf11_20() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_202196376264230984175.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_202196376264230984175.c:6:36: error: invalid operands to binary + (have 'char *' and 'double')
                 const double c = a + b;
                                    ^

        */
        error("""
              char * foo();
              const double bar();
              const double x() {
                char * a = foo();
                const double b = bar();
                const double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_203711081639060900869.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_203711081639060900869.c:6:30: error: invalid operands to binary + (have 'char *' and 'double')
                 char * c = a + b;
                              ^

        */
        error("""
              char * foo();
              const double bar();
              char * x() {
                char * a = foo();
                const double b = bar();
                char * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_201730512662946064420.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_201730512662946064420.c:5:36: error: invalid operands to binary + (have 'char *' and 'char *')
                 const double c = a + b;
                                    ^

        */
        error("""
              char * foo();
              const double x() {
                char * a = foo();
                char * b = foo();
                const double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf11_21() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_213587118467454276916.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_213587118467454276916.c:6:39: error: invalid operands to binary + (have 'char *' and 'double')
                 volatile double c = a + b;
                                       ^

        */
        error("""
              char * foo();
              volatile double bar();
              volatile double x() {
                char * a = foo();
                volatile double b = bar();
                volatile double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_211767206575417250547.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_211767206575417250547.c:6:30: error: invalid operands to binary + (have 'char *' and 'double')
                 char * c = a + b;
                              ^

        */
        error("""
              char * foo();
              volatile double bar();
              char * x() {
                char * a = foo();
                volatile double b = bar();
                char * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_213902223951097792334.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_213902223951097792334.c:5:39: error: invalid operands to binary + (have 'char *' and 'char *')
                 volatile double c = a + b;
                                       ^

        */
        error("""
              char * foo();
              volatile double x() {
                char * a = foo();
                char * b = foo();
                volatile double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf11_22() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_224627627878114022518.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_224627627878114022518.c:6:29: error: invalid operands to binary + (have 'char *' and 'int *')
                 int * c = a + b;
                             ^

        */
        error("""
              char * foo();
              int * bar();
              int * x() {
                char * a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_227892516364725446538.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_227892516364725446538.c:6:30: error: invalid operands to binary + (have 'char *' and 'int *')
                 char * c = a + b;
                              ^

        */
        error("""
              char * foo();
              int * bar();
              char * x() {
                char * a = foo();
                int * b = bar();
                char * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_22572246591593829969.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_22572246591593829969.c:5:29: error: invalid operands to binary + (have 'char *' and 'char *')
                 int * c = a + b;
                             ^

        */
        error("""
              char * foo();
              int * x() {
                char * a = foo();
                char * b = foo();
                int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf11_23() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_236718112650107600846.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_236718112650107600846.c:6:35: error: invalid operands to binary + (have 'char *' and 'const int *')
                 const int * c = a + b;
                                   ^

        */
        error("""
              char * foo();
              const int * bar();
              const int * x() {
                char * a = foo();
                const int * b = bar();
                const int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_23245082654536421870.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_23245082654536421870.c:6:30: error: invalid operands to binary + (have 'char *' and 'const int *')
                 char * c = a + b;
                              ^

        */
        error("""
              char * foo();
              const int * bar();
              char * x() {
                char * a = foo();
                const int * b = bar();
                char * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_238134981191704501347.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_238134981191704501347.c:5:35: error: invalid operands to binary + (have 'char *' and 'char *')
                 const int * c = a + b;
                                   ^

        */
        error("""
              char * foo();
              const int * x() {
                char * a = foo();
                char * b = foo();
                const int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf11_24() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_248492396341597691462.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_248492396341597691462.c:6:38: error: invalid operands to binary + (have 'char *' and 'volatile int *')
                 volatile int * c = a + b;
                                      ^

        */
        error("""
              char * foo();
              volatile int * bar();
              volatile int * x() {
                char * a = foo();
                volatile int * b = bar();
                volatile int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_244199294656344407903.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_244199294656344407903.c:6:30: error: invalid operands to binary + (have 'char *' and 'volatile int *')
                 char * c = a + b;
                              ^

        */
        error("""
              char * foo();
              volatile int * bar();
              char * x() {
                char * a = foo();
                volatile int * b = bar();
                char * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf11_248057969430082051009.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf11_248057969430082051009.c:5:38: error: invalid operands to binary + (have 'char *' and 'char *')
                 volatile int * c = a + b;
                                      ^

        */
        error("""
              char * foo();
              volatile int * x() {
                char * a = foo();
                char * b = foo();
                volatile int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf12_0() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_02363706566630609583.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_02363706566630609583.c:6:26: warning: initialization makes integer from pointer without a cast
                 char c = a + b;
                          ^

        */
        warning("""
              double * foo();
              char bar();
              char x() {
                double * a = foo();
                char b = bar();
                char c = a + b;
                return c;
              }
                """)
        correct("""
              double * foo();
              char bar();
              double * x() {
                double * a = foo();
                char b = bar();
                double * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_07078700718983994839.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_07078700718983994839.c:5:28: error: invalid operands to binary + (have 'double *' and 'double *')
                 char c = a + b;
                            ^

        */
        error("""
              double * foo();
              char x() {
                double * a = foo();
                double * b = foo();
                char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf12_1() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_18229519221300863936.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_18229519221300863936.c:6:33: warning: initialization makes integer from pointer without a cast
                 signed char c = a + b;
                                 ^

        */
        warning("""
              double * foo();
              signed char bar();
              signed char x() {
                double * a = foo();
                signed char b = bar();
                signed char c = a + b;
                return c;
              }
                """)
        correct("""
              double * foo();
              signed char bar();
              double * x() {
                double * a = foo();
                signed char b = bar();
                double * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_19219188887328798238.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_19219188887328798238.c:5:35: error: invalid operands to binary + (have 'double *' and 'double *')
                 signed char c = a + b;
                                   ^

        */
        error("""
              double * foo();
              signed char x() {
                double * a = foo();
                double * b = foo();
                signed char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf12_2() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_2161275187948619161.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_2161275187948619161.c:6:35: warning: initialization makes integer from pointer without a cast
                 unsigned char c = a + b;
                                   ^

        */
        warning("""
              double * foo();
              unsigned char bar();
              unsigned char x() {
                double * a = foo();
                unsigned char b = bar();
                unsigned char c = a + b;
                return c;
              }
                """)
        correct("""
              double * foo();
              unsigned char bar();
              double * x() {
                double * a = foo();
                unsigned char b = bar();
                double * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_22601765427036056355.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_22601765427036056355.c:5:37: error: invalid operands to binary + (have 'double *' and 'double *')
                 unsigned char c = a + b;
                                     ^

        */
        error("""
              double * foo();
              unsigned char x() {
                double * a = foo();
                double * b = foo();
                unsigned char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf12_3() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_34037063183291865859.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_34037063183291865859.c:6:34: warning: initialization makes integer from pointer without a cast
                 unsigned int c = a + b;
                                  ^

        */
        warning("""
              double * foo();
              unsigned int bar();
              unsigned int x() {
                double * a = foo();
                unsigned int b = bar();
                unsigned int c = a + b;
                return c;
              }
                """)
        correct("""
              double * foo();
              unsigned int bar();
              double * x() {
                double * a = foo();
                unsigned int b = bar();
                double * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_35240853174047266017.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_35240853174047266017.c:5:36: error: invalid operands to binary + (have 'double *' and 'double *')
                 unsigned int c = a + b;
                                    ^

        */
        error("""
              double * foo();
              unsigned int x() {
                double * a = foo();
                double * b = foo();
                unsigned int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf12_4() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_44067826140731161283.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_44067826140731161283.c:6:32: warning: initialization makes integer from pointer without a cast
                 signed int c = a + b;
                                ^

        */
        warning("""
              double * foo();
              signed int bar();
              signed int x() {
                double * a = foo();
                signed int b = bar();
                signed int c = a + b;
                return c;
              }
                """)
        correct("""
              double * foo();
              signed int bar();
              double * x() {
                double * a = foo();
                signed int b = bar();
                double * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_44438373832699715365.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_44438373832699715365.c:5:34: error: invalid operands to binary + (have 'double *' and 'double *')
                 signed int c = a + b;
                                  ^

        */
        error("""
              double * foo();
              signed int x() {
                double * a = foo();
                double * b = foo();
                signed int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf12_5() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_56671486787966622767.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_56671486787966622767.c:6:26: warning: initialization makes integer from pointer without a cast
                 long c = a + b;
                          ^

        */
        warning("""
              double * foo();
              long bar();
              long x() {
                double * a = foo();
                long b = bar();
                long c = a + b;
                return c;
              }
                """)
        correct("""
              double * foo();
              long bar();
              double * x() {
                double * a = foo();
                long b = bar();
                double * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_58705175346331556592.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_58705175346331556592.c:5:28: error: invalid operands to binary + (have 'double *' and 'double *')
                 long c = a + b;
                            ^

        */
        error("""
              double * foo();
              long x() {
                double * a = foo();
                double * b = foo();
                long c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf12_6() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_62760389990207693063.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_62760389990207693063.c:6:29: error: invalid operands to binary + (have 'double *' and 'float')
                 float c = a + b;
                             ^

        */
        error("""
              double * foo();
              float bar();
              float x() {
                double * a = foo();
                float b = bar();
                float c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_62282639854610814104.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_62282639854610814104.c:6:32: error: invalid operands to binary + (have 'double *' and 'float')
                 double * c = a + b;
                                ^

        */
        error("""
              double * foo();
              float bar();
              double * x() {
                double * a = foo();
                float b = bar();
                double * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_66675571935322347296.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_66675571935322347296.c:5:29: error: invalid operands to binary + (have 'double *' and 'double *')
                 float c = a + b;
                             ^

        */
        error("""
              double * foo();
              float x() {
                double * a = foo();
                double * b = foo();
                float c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf12_7() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_74285822699924453414.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_74285822699924453414.c:6:30: error: invalid operands to binary + (have 'double *' and 'double')
                 double c = a + b;
                              ^

        */
        error("""
              double * foo();
              double bar();
              double x() {
                double * a = foo();
                double b = bar();
                double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_77152656673139575560.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_77152656673139575560.c:6:32: error: invalid operands to binary + (have 'double *' and 'double')
                 double * c = a + b;
                                ^

        */
        error("""
              double * foo();
              double bar();
              double * x() {
                double * a = foo();
                double b = bar();
                double * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_78436303121110048893.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_78436303121110048893.c:5:30: error: invalid operands to binary + (have 'double *' and 'double *')
                 double c = a + b;
                              ^

        */
        error("""
              double * foo();
              double x() {
                double * a = foo();
                double * b = foo();
                double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf12_8() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_88050596241760866439.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_88050596241760866439.c:6:35: error: invalid operands to binary + (have 'double *' and 'long double')
                 long double c = a + b;
                                   ^

        */
        error("""
              double * foo();
              long double bar();
              long double x() {
                double * a = foo();
                long double b = bar();
                long double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_85105229225366802944.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_85105229225366802944.c:6:32: error: invalid operands to binary + (have 'double *' and 'long double')
                 double * c = a + b;
                                ^

        */
        error("""
              double * foo();
              long double bar();
              double * x() {
                double * a = foo();
                long double b = bar();
                double * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_85344227036954803138.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_85344227036954803138.c:5:35: error: invalid operands to binary + (have 'double *' and 'double *')
                 long double c = a + b;
                                   ^

        */
        error("""
              double * foo();
              long double x() {
                double * a = foo();
                double * b = foo();
                long double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf12_9() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_9562787199847079899.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_9562787199847079899.c:6:29: error: invalid operands to binary + (have 'double *' and 'int *')
                 int * c = a + b;
                             ^

        */
        error("""
              double * foo();
              int * bar();
              int * x() {
                double * a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_96943295527261737177.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_96943295527261737177.c:6:32: error: invalid operands to binary + (have 'double *' and 'int *')
                 double * c = a + b;
                                ^

        */
        error("""
              double * foo();
              int * bar();
              double * x() {
                double * a = foo();
                int * b = bar();
                double * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_91964883640065252282.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_91964883640065252282.c:5:29: error: invalid operands to binary + (have 'double *' and 'double *')
                 int * c = a + b;
                             ^

        */
        error("""
              double * foo();
              int * x() {
                double * a = foo();
                double * b = foo();
                int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf12_10() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_10367497751937910360.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_10367497751937910360.c:6:30: error: invalid operands to binary + (have 'double *' and 'int **')
                 int ** c = a + b;
                              ^

        */
        error("""
              double * foo();
              int ** bar();
              int ** x() {
                double * a = foo();
                int ** b = bar();
                int ** c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_108175544933094094633.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_108175544933094094633.c:6:32: error: invalid operands to binary + (have 'double *' and 'int **')
                 double * c = a + b;
                                ^

        */
        error("""
              double * foo();
              int ** bar();
              double * x() {
                double * a = foo();
                int ** b = bar();
                double * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_101125167383118899870.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_101125167383118899870.c:5:30: error: invalid operands to binary + (have 'double *' and 'double *')
                 int ** c = a + b;
                              ^

        */
        error("""
              double * foo();
              int ** x() {
                double * a = foo();
                double * b = foo();
                int ** c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf12_11() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_115234497794158822631.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_115234497794158822631.c:6:30: error: invalid operands to binary + (have 'double *' and 'char *')
                 char * c = a + b;
                              ^

        */
        error("""
              double * foo();
              char * bar();
              char * x() {
                double * a = foo();
                char * b = bar();
                char * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_114307523989705606795.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_114307523989705606795.c:6:32: error: invalid operands to binary + (have 'double *' and 'char *')
                 double * c = a + b;
                                ^

        */
        error("""
              double * foo();
              char * bar();
              double * x() {
                double * a = foo();
                char * b = bar();
                double * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_114812804546804855977.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_114812804546804855977.c:5:30: error: invalid operands to binary + (have 'double *' and 'double *')
                 char * c = a + b;
                              ^

        */
        error("""
              double * foo();
              char * x() {
                double * a = foo();
                double * b = foo();
                char * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf12_12() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_1276659698908970998.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_1276659698908970998.c:6:32: error: invalid operands to binary + (have 'double *' and 'double *')
                 double * c = a + b;
                                ^

        */
        error("""
              double * foo();
              double * bar();
              double * x() {
                double * a = foo();
                double * b = bar();
                double * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_126525792146993377448.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_126525792146993377448.c:6:32: error: invalid operands to binary + (have 'double *' and 'double *')
                 double * c = a + b;
                                ^

        */
        error("""
              double * foo();
              double * bar();
              double * x() {
                double * a = foo();
                double * b = bar();
                double * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_128678684498470854408.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_128678684498470854408.c:5:32: error: invalid operands to binary + (have 'double *' and 'double *')
                 double * c = a + b;
                                ^

        */
        error("""
              double * foo();
              double * x() {
                double * a = foo();
                double * b = foo();
                double * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf12_13() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_138738621350068520898.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_138738621350068520898.c:8:32: error: invalid operands to binary + (have 'double *' and 'struct S')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              double * foo();
              struct S bar();
              struct S x() {
                double * a = foo();
                struct S b = bar();
                struct S c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_133417726138798113369.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_133417726138798113369.c:8:32: error: invalid operands to binary + (have 'double *' and 'struct S')
                 double * c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              double * foo();
              struct S bar();
              double * x() {
                double * a = foo();
                struct S b = bar();
                double * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_138341092277234261739.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_138341092277234261739.c:7:32: error: invalid operands to binary + (have 'double *' and 'double *')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              double * foo();
              struct S x() {
                double * a = foo();
                double * b = foo();
                struct S c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf12_14() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_142790984090836193832.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_142790984090836193832.c:8:32: error: invalid operands to binary + (have 'double *' and 'struct T')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              double * foo();
              struct T bar();
              struct T x() {
                double * a = foo();
                struct T b = bar();
                struct T c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_142057138288832875642.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_142057138288832875642.c:8:32: error: invalid operands to binary + (have 'double *' and 'struct T')
                 double * c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              double * foo();
              struct T bar();
              double * x() {
                double * a = foo();
                struct T b = bar();
                double * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_144830884499963653500.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_144830884499963653500.c:7:32: error: invalid operands to binary + (have 'double *' and 'double *')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              double * foo();
              struct T x() {
                double * a = foo();
                double * b = foo();
                struct T c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf12_15() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_153301998425891708912.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_153301998425891708912.c:8:40: error: invalid operands to binary + (have 'double *' and 'struct_anonymous')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              double * foo();
              struct_anonymous bar();
              struct_anonymous x() {
                double * a = foo();
                struct_anonymous b = bar();
                struct_anonymous c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_151254589174824152050.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_151254589174824152050.c:8:32: error: invalid operands to binary + (have 'double *' and 'struct_anonymous')
                 double * c = a + b;
                                ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              double * foo();
              struct_anonymous bar();
              double * x() {
                double * a = foo();
                struct_anonymous b = bar();
                double * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_157896868322745445706.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_157896868322745445706.c:7:40: error: invalid operands to binary + (have 'double *' and 'double *')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              double * foo();
              struct_anonymous x() {
                double * a = foo();
                double * b = foo();
                struct_anonymous c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf12_16() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_166107562667329226107.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_166107562667329226107.c:5:24: error: invalid initializer
                 struct { int a; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf12_166107562667329226107.c:6:41: error: invalid operands to binary + (have 'double *' and 'struct <anonymous>')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf12_166107562667329226107.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              double * foo();
              struct { int a; } bar();
              struct { int a; } x() {
                double * a = foo();
                struct { int a; } b = bar();
                struct { int a; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_166610000651290266766.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_166610000651290266766.c:5:24: error: invalid initializer
                 struct { int a; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf12_166610000651290266766.c:6:32: error: invalid operands to binary + (have 'double *' and 'struct <anonymous>')
                 double * c = a + b;
                                ^

        */
        error("""
              double * foo();
              struct { int a; } bar();
              double * x() {
                double * a = foo();
                struct { int a; } b = bar();
                double * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_165222997246484938333.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_165222997246484938333.c:5:41: error: invalid operands to binary + (have 'double *' and 'double *')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf12_165222997246484938333.c:6:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              double * foo();
              struct { int a; } x() {
                double * a = foo();
                double * b = foo();
                struct { int a; } c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf12_17() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_178229318032642662299.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_178229318032642662299.c:5:24: error: invalid initializer
                 struct { float b; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf12_178229318032642662299.c:6:43: error: invalid operands to binary + (have 'double *' and 'struct <anonymous>')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf12_178229318032642662299.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              double * foo();
              struct { float b; } bar();
              struct { float b; } x() {
                double * a = foo();
                struct { float b; } b = bar();
                struct { float b; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_174656048914824372307.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_174656048914824372307.c:5:24: error: invalid initializer
                 struct { float b; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf12_174656048914824372307.c:6:32: error: invalid operands to binary + (have 'double *' and 'struct <anonymous>')
                 double * c = a + b;
                                ^

        */
        error("""
              double * foo();
              struct { float b; } bar();
              double * x() {
                double * a = foo();
                struct { float b; } b = bar();
                double * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_17212646450640642949.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_17212646450640642949.c:5:43: error: invalid operands to binary + (have 'double *' and 'double *')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf12_17212646450640642949.c:6:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              double * foo();
              struct { float b; } x() {
                double * a = foo();
                double * b = foo();
                struct { float b; } c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf12_18() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_185669915892863825927.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_185669915892863825927.c:6:34: warning: initialization makes integer from pointer without a cast
                 volatile int c = a + b;
                                  ^

        */
        warning("""
              double * foo();
              volatile int bar();
              volatile int x() {
                double * a = foo();
                volatile int b = bar();
                volatile int c = a + b;
                return c;
              }
                """)
        correct("""
              double * foo();
              volatile int bar();
              double * x() {
                double * a = foo();
                volatile int b = bar();
                double * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_181785104770256408056.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_181785104770256408056.c:5:36: error: invalid operands to binary + (have 'double *' and 'double *')
                 volatile int c = a + b;
                                    ^

        */
        error("""
              double * foo();
              volatile int x() {
                double * a = foo();
                double * b = foo();
                volatile int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf12_19() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_198106327188926737.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_198106327188926737.c:6:31: warning: initialization makes integer from pointer without a cast
                 const int c = a + b;
                               ^

        */
        warning("""
              double * foo();
              const int bar();
              const int x() {
                double * a = foo();
                const int b = bar();
                const int c = a + b;
                return c;
              }
                """)
        correct("""
              double * foo();
              const int bar();
              double * x() {
                double * a = foo();
                const int b = bar();
                double * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_194151727970238624200.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_194151727970238624200.c:5:33: error: invalid operands to binary + (have 'double *' and 'double *')
                 const int c = a + b;
                                 ^

        */
        error("""
              double * foo();
              const int x() {
                double * a = foo();
                double * b = foo();
                const int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf12_20() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_207448680787174855857.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_207448680787174855857.c:6:36: error: invalid operands to binary + (have 'double *' and 'double')
                 const double c = a + b;
                                    ^

        */
        error("""
              double * foo();
              const double bar();
              const double x() {
                double * a = foo();
                const double b = bar();
                const double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_207519355376945031671.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_207519355376945031671.c:6:32: error: invalid operands to binary + (have 'double *' and 'double')
                 double * c = a + b;
                                ^

        */
        error("""
              double * foo();
              const double bar();
              double * x() {
                double * a = foo();
                const double b = bar();
                double * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_206343776645802572924.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_206343776645802572924.c:5:36: error: invalid operands to binary + (have 'double *' and 'double *')
                 const double c = a + b;
                                    ^

        */
        error("""
              double * foo();
              const double x() {
                double * a = foo();
                double * b = foo();
                const double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf12_21() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_2111107672060644009.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_2111107672060644009.c:6:39: error: invalid operands to binary + (have 'double *' and 'double')
                 volatile double c = a + b;
                                       ^

        */
        error("""
              double * foo();
              volatile double bar();
              volatile double x() {
                double * a = foo();
                volatile double b = bar();
                volatile double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_212381566573026728333.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_212381566573026728333.c:6:32: error: invalid operands to binary + (have 'double *' and 'double')
                 double * c = a + b;
                                ^

        */
        error("""
              double * foo();
              volatile double bar();
              double * x() {
                double * a = foo();
                volatile double b = bar();
                double * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_217000179689678200559.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_217000179689678200559.c:5:39: error: invalid operands to binary + (have 'double *' and 'double *')
                 volatile double c = a + b;
                                       ^

        */
        error("""
              double * foo();
              volatile double x() {
                double * a = foo();
                double * b = foo();
                volatile double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf12_22() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_223335681848260287187.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_223335681848260287187.c:6:29: error: invalid operands to binary + (have 'double *' and 'int *')
                 int * c = a + b;
                             ^

        */
        error("""
              double * foo();
              int * bar();
              int * x() {
                double * a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_227940290114930251261.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_227940290114930251261.c:6:32: error: invalid operands to binary + (have 'double *' and 'int *')
                 double * c = a + b;
                                ^

        */
        error("""
              double * foo();
              int * bar();
              double * x() {
                double * a = foo();
                int * b = bar();
                double * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_227264761133181494863.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_227264761133181494863.c:5:29: error: invalid operands to binary + (have 'double *' and 'double *')
                 int * c = a + b;
                             ^

        */
        error("""
              double * foo();
              int * x() {
                double * a = foo();
                double * b = foo();
                int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf12_23() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_237024015747552762510.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_237024015747552762510.c:6:35: error: invalid operands to binary + (have 'double *' and 'const int *')
                 const int * c = a + b;
                                   ^

        */
        error("""
              double * foo();
              const int * bar();
              const int * x() {
                double * a = foo();
                const int * b = bar();
                const int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_235184475934387386527.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_235184475934387386527.c:6:32: error: invalid operands to binary + (have 'double *' and 'const int *')
                 double * c = a + b;
                                ^

        */
        error("""
              double * foo();
              const int * bar();
              double * x() {
                double * a = foo();
                const int * b = bar();
                double * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_235290769273789216054.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_235290769273789216054.c:5:35: error: invalid operands to binary + (have 'double *' and 'double *')
                 const int * c = a + b;
                                   ^

        */
        error("""
              double * foo();
              const int * x() {
                double * a = foo();
                double * b = foo();
                const int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf12_24() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_243451567982355526414.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_243451567982355526414.c:6:38: error: invalid operands to binary + (have 'double *' and 'volatile int *')
                 volatile int * c = a + b;
                                      ^

        */
        error("""
              double * foo();
              volatile int * bar();
              volatile int * x() {
                double * a = foo();
                volatile int * b = bar();
                volatile int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_241526666654331136145.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_241526666654331136145.c:6:32: error: invalid operands to binary + (have 'double *' and 'volatile int *')
                 double * c = a + b;
                                ^

        */
        error("""
              double * foo();
              volatile int * bar();
              double * x() {
                double * a = foo();
                volatile int * b = bar();
                double * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf12_243970805523318888664.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf12_243970805523318888664.c:5:38: error: invalid operands to binary + (have 'double *' and 'double *')
                 volatile int * c = a + b;
                                      ^

        */
        error("""
              double * foo();
              volatile int * x() {
                double * a = foo();
                double * b = foo();
                volatile int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf13_0() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_0868796217776285167.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_0868796217776285167.c:8:28: error: invalid operands to binary + (have 'struct S' and 'int')
                 char c = a + b;
                            ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              char bar();
              char x() {
                struct S a = foo();
                char b = bar();
                char c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_02301495325841798138.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_02301495325841798138.c:8:32: error: invalid operands to binary + (have 'struct S' and 'int')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              char bar();
              struct S x() {
                struct S a = foo();
                char b = bar();
                struct S c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_08979413560218028086.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_08979413560218028086.c:7:28: error: invalid operands to binary + (have 'struct S' and 'struct S')
                 char c = a + b;
                            ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              char x() {
                struct S a = foo();
                struct S b = foo();
                char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf13_1() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_17542244664593080985.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_17542244664593080985.c:8:35: error: invalid operands to binary + (have 'struct S' and 'int')
                 signed char c = a + b;
                                   ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              signed char bar();
              signed char x() {
                struct S a = foo();
                signed char b = bar();
                signed char c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_13954357649099499775.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_13954357649099499775.c:8:32: error: invalid operands to binary + (have 'struct S' and 'int')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              signed char bar();
              struct S x() {
                struct S a = foo();
                signed char b = bar();
                struct S c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_1843997676212866543.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_1843997676212866543.c:7:35: error: invalid operands to binary + (have 'struct S' and 'struct S')
                 signed char c = a + b;
                                   ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              signed char x() {
                struct S a = foo();
                struct S b = foo();
                signed char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf13_2() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_23826375874063986060.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_23826375874063986060.c:8:37: error: invalid operands to binary + (have 'struct S' and 'int')
                 unsigned char c = a + b;
                                     ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              unsigned char bar();
              unsigned char x() {
                struct S a = foo();
                unsigned char b = bar();
                unsigned char c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_25488354361439390741.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_25488354361439390741.c:8:32: error: invalid operands to binary + (have 'struct S' and 'int')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              unsigned char bar();
              struct S x() {
                struct S a = foo();
                unsigned char b = bar();
                struct S c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_27048990098623907400.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_27048990098623907400.c:7:37: error: invalid operands to binary + (have 'struct S' and 'struct S')
                 unsigned char c = a + b;
                                     ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              unsigned char x() {
                struct S a = foo();
                struct S b = foo();
                unsigned char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf13_3() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_33273340067531778207.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_33273340067531778207.c:8:36: error: invalid operands to binary + (have 'struct S' and 'unsigned int')
                 unsigned int c = a + b;
                                    ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              unsigned int bar();
              unsigned int x() {
                struct S a = foo();
                unsigned int b = bar();
                unsigned int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_38820242096382264148.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_38820242096382264148.c:8:32: error: invalid operands to binary + (have 'struct S' and 'unsigned int')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              unsigned int bar();
              struct S x() {
                struct S a = foo();
                unsigned int b = bar();
                struct S c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_34900833409121977211.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_34900833409121977211.c:7:36: error: invalid operands to binary + (have 'struct S' and 'struct S')
                 unsigned int c = a + b;
                                    ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              unsigned int x() {
                struct S a = foo();
                struct S b = foo();
                unsigned int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf13_4() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_45777069020377756786.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_45777069020377756786.c:8:34: error: invalid operands to binary + (have 'struct S' and 'int')
                 signed int c = a + b;
                                  ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              signed int bar();
              signed int x() {
                struct S a = foo();
                signed int b = bar();
                signed int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_4847515407030402518.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_4847515407030402518.c:8:32: error: invalid operands to binary + (have 'struct S' and 'int')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              signed int bar();
              struct S x() {
                struct S a = foo();
                signed int b = bar();
                struct S c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_44306365121050181294.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_44306365121050181294.c:7:34: error: invalid operands to binary + (have 'struct S' and 'struct S')
                 signed int c = a + b;
                                  ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              signed int x() {
                struct S a = foo();
                struct S b = foo();
                signed int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf13_5() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_5148593023019529959.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_5148593023019529959.c:8:28: error: invalid operands to binary + (have 'struct S' and 'long int')
                 long c = a + b;
                            ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              long bar();
              long x() {
                struct S a = foo();
                long b = bar();
                long c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_53531384522119184501.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_53531384522119184501.c:8:32: error: invalid operands to binary + (have 'struct S' and 'long int')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              long bar();
              struct S x() {
                struct S a = foo();
                long b = bar();
                struct S c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_54712483784987073291.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_54712483784987073291.c:7:28: error: invalid operands to binary + (have 'struct S' and 'struct S')
                 long c = a + b;
                            ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              long x() {
                struct S a = foo();
                struct S b = foo();
                long c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf13_6() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_65587928129109345790.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_65587928129109345790.c:8:29: error: invalid operands to binary + (have 'struct S' and 'float')
                 float c = a + b;
                             ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              float bar();
              float x() {
                struct S a = foo();
                float b = bar();
                float c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_67961403798972419561.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_67961403798972419561.c:8:32: error: invalid operands to binary + (have 'struct S' and 'float')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              float bar();
              struct S x() {
                struct S a = foo();
                float b = bar();
                struct S c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_63790330646575016481.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_63790330646575016481.c:7:29: error: invalid operands to binary + (have 'struct S' and 'struct S')
                 float c = a + b;
                             ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              float x() {
                struct S a = foo();
                struct S b = foo();
                float c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf13_7() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_76435324196905485316.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_76435324196905485316.c:8:30: error: invalid operands to binary + (have 'struct S' and 'double')
                 double c = a + b;
                              ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              double bar();
              double x() {
                struct S a = foo();
                double b = bar();
                double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_75892579824390174264.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_75892579824390174264.c:8:32: error: invalid operands to binary + (have 'struct S' and 'double')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              double bar();
              struct S x() {
                struct S a = foo();
                double b = bar();
                struct S c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_76329057323411112067.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_76329057323411112067.c:7:30: error: invalid operands to binary + (have 'struct S' and 'struct S')
                 double c = a + b;
                              ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              double x() {
                struct S a = foo();
                struct S b = foo();
                double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf13_8() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_81391019869973688022.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_81391019869973688022.c:8:35: error: invalid operands to binary + (have 'struct S' and 'long double')
                 long double c = a + b;
                                   ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              long double bar();
              long double x() {
                struct S a = foo();
                long double b = bar();
                long double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_82886276543574551668.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_82886276543574551668.c:8:32: error: invalid operands to binary + (have 'struct S' and 'long double')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              long double bar();
              struct S x() {
                struct S a = foo();
                long double b = bar();
                struct S c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_84603725146513749594.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_84603725146513749594.c:7:35: error: invalid operands to binary + (have 'struct S' and 'struct S')
                 long double c = a + b;
                                   ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              long double x() {
                struct S a = foo();
                struct S b = foo();
                long double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf13_9() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_93171220415142889984.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_93171220415142889984.c:8:29: error: invalid operands to binary + (have 'struct S' and 'int *')
                 int * c = a + b;
                             ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              int * bar();
              int * x() {
                struct S a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_97667509555335759227.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_97667509555335759227.c:8:32: error: invalid operands to binary + (have 'struct S' and 'int *')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              int * bar();
              struct S x() {
                struct S a = foo();
                int * b = bar();
                struct S c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_91928578772502038479.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_91928578772502038479.c:7:29: error: invalid operands to binary + (have 'struct S' and 'struct S')
                 int * c = a + b;
                             ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              int * x() {
                struct S a = foo();
                struct S b = foo();
                int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf13_10() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_108312232560405799968.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_108312232560405799968.c:8:30: error: invalid operands to binary + (have 'struct S' and 'int **')
                 int ** c = a + b;
                              ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              int ** bar();
              int ** x() {
                struct S a = foo();
                int ** b = bar();
                int ** c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_101370370605658765702.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_101370370605658765702.c:8:32: error: invalid operands to binary + (have 'struct S' and 'int **')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              int ** bar();
              struct S x() {
                struct S a = foo();
                int ** b = bar();
                struct S c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_105192167765467512780.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_105192167765467512780.c:7:30: error: invalid operands to binary + (have 'struct S' and 'struct S')
                 int ** c = a + b;
                              ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              int ** x() {
                struct S a = foo();
                struct S b = foo();
                int ** c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf13_11() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_117690021688355077011.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_117690021688355077011.c:8:30: error: invalid operands to binary + (have 'struct S' and 'char *')
                 char * c = a + b;
                              ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              char * bar();
              char * x() {
                struct S a = foo();
                char * b = bar();
                char * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_111007823844346273011.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_111007823844346273011.c:8:32: error: invalid operands to binary + (have 'struct S' and 'char *')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              char * bar();
              struct S x() {
                struct S a = foo();
                char * b = bar();
                struct S c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_118476962020488475563.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_118476962020488475563.c:7:30: error: invalid operands to binary + (have 'struct S' and 'struct S')
                 char * c = a + b;
                              ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              char * x() {
                struct S a = foo();
                struct S b = foo();
                char * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf13_12() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_128892879766717185501.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_128892879766717185501.c:8:32: error: invalid operands to binary + (have 'struct S' and 'double *')
                 double * c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              double * bar();
              double * x() {
                struct S a = foo();
                double * b = bar();
                double * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_122817474853216318222.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_122817474853216318222.c:8:32: error: invalid operands to binary + (have 'struct S' and 'double *')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              double * bar();
              struct S x() {
                struct S a = foo();
                double * b = bar();
                struct S c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_121962329495123768862.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_121962329495123768862.c:7:32: error: invalid operands to binary + (have 'struct S' and 'struct S')
                 double * c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              double * x() {
                struct S a = foo();
                struct S b = foo();
                double * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf13_13() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_137852061043262833652.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_137852061043262833652.c:8:32: error: invalid operands to binary + (have 'struct S' and 'struct S')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              struct S bar();
              struct S x() {
                struct S a = foo();
                struct S b = bar();
                struct S c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_132558498036808771217.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_132558498036808771217.c:8:32: error: invalid operands to binary + (have 'struct S' and 'struct S')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              struct S bar();
              struct S x() {
                struct S a = foo();
                struct S b = bar();
                struct S c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_136769060282155393419.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_136769060282155393419.c:7:32: error: invalid operands to binary + (have 'struct S' and 'struct S')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              struct S x() {
                struct S a = foo();
                struct S b = foo();
                struct S c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf13_14() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_145234461120091848671.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_145234461120091848671.c:10:32: error: invalid operands to binary + (have 'struct S' and 'struct T')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct S { int x; int y; };

              struct S foo();
              struct T bar();
              struct T x() {
                struct S a = foo();
                struct T b = bar();
                struct T c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_143498348529724670443.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_143498348529724670443.c:10:32: error: invalid operands to binary + (have 'struct S' and 'struct T')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct S { int x; int y; };

              struct S foo();
              struct T bar();
              struct S x() {
                struct S a = foo();
                struct T b = bar();
                struct S c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_14569671195878079306.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_14569671195878079306.c:9:32: error: invalid operands to binary + (have 'struct S' and 'struct S')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct S { int x; int y; };

              struct S foo();
              struct T x() {
                struct S a = foo();
                struct S b = foo();
                struct T c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf13_15() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_153970111909003403327.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_153970111909003403327.c:10:40: error: invalid operands to binary + (have 'struct S' and 'struct_anonymous')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct S { int x; int y; };

              struct S foo();
              struct_anonymous bar();
              struct_anonymous x() {
                struct S a = foo();
                struct_anonymous b = bar();
                struct_anonymous c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_157980197319432287221.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_157980197319432287221.c:10:32: error: invalid operands to binary + (have 'struct S' and 'struct_anonymous')
                 struct S c = a + b;
                                ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct S { int x; int y; };

              struct S foo();
              struct_anonymous bar();
              struct S x() {
                struct S a = foo();
                struct_anonymous b = bar();
                struct S c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_153617732412292398534.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_153617732412292398534.c:9:40: error: invalid operands to binary + (have 'struct S' and 'struct S')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct S { int x; int y; };

              struct S foo();
              struct_anonymous x() {
                struct S a = foo();
                struct S b = foo();
                struct_anonymous c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf13_16() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_163230984089275757592.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_163230984089275757592.c:7:24: error: invalid initializer
                 struct { int a; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf13_163230984089275757592.c:8:41: error: invalid operands to binary + (have 'struct S' and 'struct <anonymous>')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf13_163230984089275757592.c:9:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              struct { int a; } bar();
              struct { int a; } x() {
                struct S a = foo();
                struct { int a; } b = bar();
                struct { int a; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_166344351676925839827.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_166344351676925839827.c:7:24: error: invalid initializer
                 struct { int a; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf13_166344351676925839827.c:8:32: error: invalid operands to binary + (have 'struct S' and 'struct <anonymous>')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              struct { int a; } bar();
              struct S x() {
                struct S a = foo();
                struct { int a; } b = bar();
                struct S c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_161778919835382535698.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_161778919835382535698.c:7:41: error: invalid operands to binary + (have 'struct S' and 'struct S')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf13_161778919835382535698.c:8:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              struct { int a; } x() {
                struct S a = foo();
                struct S b = foo();
                struct { int a; } c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf13_17() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_175542608690755767946.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_175542608690755767946.c:7:24: error: invalid initializer
                 struct { float b; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf13_175542608690755767946.c:8:43: error: invalid operands to binary + (have 'struct S' and 'struct <anonymous>')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf13_175542608690755767946.c:9:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              struct { float b; } bar();
              struct { float b; } x() {
                struct S a = foo();
                struct { float b; } b = bar();
                struct { float b; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_17258420500362094270.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_17258420500362094270.c:7:24: error: invalid initializer
                 struct { float b; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf13_17258420500362094270.c:8:32: error: invalid operands to binary + (have 'struct S' and 'struct <anonymous>')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              struct { float b; } bar();
              struct S x() {
                struct S a = foo();
                struct { float b; } b = bar();
                struct S c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_178219176411084771796.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_178219176411084771796.c:7:43: error: invalid operands to binary + (have 'struct S' and 'struct S')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf13_178219176411084771796.c:8:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              struct { float b; } x() {
                struct S a = foo();
                struct S b = foo();
                struct { float b; } c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf13_18() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_189155154442127158445.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_189155154442127158445.c:8:36: error: invalid operands to binary + (have 'struct S' and 'int')
                 volatile int c = a + b;
                                    ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              volatile int bar();
              volatile int x() {
                struct S a = foo();
                volatile int b = bar();
                volatile int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_187425347833926846639.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_187425347833926846639.c:8:32: error: invalid operands to binary + (have 'struct S' and 'int')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              volatile int bar();
              struct S x() {
                struct S a = foo();
                volatile int b = bar();
                struct S c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_182151152373779385035.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_182151152373779385035.c:7:36: error: invalid operands to binary + (have 'struct S' and 'struct S')
                 volatile int c = a + b;
                                    ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              volatile int x() {
                struct S a = foo();
                struct S b = foo();
                volatile int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf13_19() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_192991762724172870129.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_192991762724172870129.c:8:33: error: invalid operands to binary + (have 'struct S' and 'int')
                 const int c = a + b;
                                 ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              const int bar();
              const int x() {
                struct S a = foo();
                const int b = bar();
                const int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_19573521224433178859.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_19573521224433178859.c:8:32: error: invalid operands to binary + (have 'struct S' and 'int')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              const int bar();
              struct S x() {
                struct S a = foo();
                const int b = bar();
                struct S c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_198365443802490714127.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_198365443802490714127.c:7:33: error: invalid operands to binary + (have 'struct S' and 'struct S')
                 const int c = a + b;
                                 ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              const int x() {
                struct S a = foo();
                struct S b = foo();
                const int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf13_20() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_203937080887426173205.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_203937080887426173205.c:8:36: error: invalid operands to binary + (have 'struct S' and 'double')
                 const double c = a + b;
                                    ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              const double bar();
              const double x() {
                struct S a = foo();
                const double b = bar();
                const double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_20697151980185970068.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_20697151980185970068.c:8:32: error: invalid operands to binary + (have 'struct S' and 'double')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              const double bar();
              struct S x() {
                struct S a = foo();
                const double b = bar();
                struct S c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_203851914813343768406.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_203851914813343768406.c:7:36: error: invalid operands to binary + (have 'struct S' and 'struct S')
                 const double c = a + b;
                                    ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              const double x() {
                struct S a = foo();
                struct S b = foo();
                const double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf13_21() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_21502025279702813707.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_21502025279702813707.c:8:39: error: invalid operands to binary + (have 'struct S' and 'double')
                 volatile double c = a + b;
                                       ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              volatile double bar();
              volatile double x() {
                struct S a = foo();
                volatile double b = bar();
                volatile double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_213742251510816543082.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_213742251510816543082.c:8:32: error: invalid operands to binary + (have 'struct S' and 'double')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              volatile double bar();
              struct S x() {
                struct S a = foo();
                volatile double b = bar();
                struct S c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_21907976784034862606.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_21907976784034862606.c:7:39: error: invalid operands to binary + (have 'struct S' and 'struct S')
                 volatile double c = a + b;
                                       ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              volatile double x() {
                struct S a = foo();
                struct S b = foo();
                volatile double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf13_22() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_222563964975934909464.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_222563964975934909464.c:8:29: error: invalid operands to binary + (have 'struct S' and 'int *')
                 int * c = a + b;
                             ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              int * bar();
              int * x() {
                struct S a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_22441332235806873668.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_22441332235806873668.c:8:32: error: invalid operands to binary + (have 'struct S' and 'int *')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              int * bar();
              struct S x() {
                struct S a = foo();
                int * b = bar();
                struct S c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_228366062583295398275.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_228366062583295398275.c:7:29: error: invalid operands to binary + (have 'struct S' and 'struct S')
                 int * c = a + b;
                             ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              int * x() {
                struct S a = foo();
                struct S b = foo();
                int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf13_23() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_232886773013014190618.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_232886773013014190618.c:8:35: error: invalid operands to binary + (have 'struct S' and 'const int *')
                 const int * c = a + b;
                                   ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              const int * bar();
              const int * x() {
                struct S a = foo();
                const int * b = bar();
                const int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_231522584893020228557.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_231522584893020228557.c:8:32: error: invalid operands to binary + (have 'struct S' and 'const int *')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              const int * bar();
              struct S x() {
                struct S a = foo();
                const int * b = bar();
                struct S c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_236917432665250470473.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_236917432665250470473.c:7:35: error: invalid operands to binary + (have 'struct S' and 'struct S')
                 const int * c = a + b;
                                   ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              const int * x() {
                struct S a = foo();
                struct S b = foo();
                const int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf13_24() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_248497112844253698890.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_248497112844253698890.c:8:38: error: invalid operands to binary + (have 'struct S' and 'volatile int *')
                 volatile int * c = a + b;
                                      ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              volatile int * bar();
              volatile int * x() {
                struct S a = foo();
                volatile int * b = bar();
                volatile int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_242498681983693298771.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_242498681983693298771.c:8:32: error: invalid operands to binary + (have 'struct S' and 'volatile int *')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              volatile int * bar();
              struct S x() {
                struct S a = foo();
                volatile int * b = bar();
                struct S c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf13_244241966451565221436.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf13_244241966451565221436.c:7:38: error: invalid operands to binary + (have 'struct S' and 'struct S')
                 volatile int * c = a + b;
                                      ^

        */
        error("""
              struct S { int x; int y; };

              struct S foo();
              volatile int * x() {
                struct S a = foo();
                struct S b = foo();
                volatile int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf14_0() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_0183114526263327990.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_0183114526263327990.c:8:28: error: invalid operands to binary + (have 'struct T' and 'int')
                 char c = a + b;
                            ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              char bar();
              char x() {
                struct T a = foo();
                char b = bar();
                char c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_06921119013314023439.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_06921119013314023439.c:8:32: error: invalid operands to binary + (have 'struct T' and 'int')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              char bar();
              struct T x() {
                struct T a = foo();
                char b = bar();
                struct T c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_07887409899627606732.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_07887409899627606732.c:7:28: error: invalid operands to binary + (have 'struct T' and 'struct T')
                 char c = a + b;
                            ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              char x() {
                struct T a = foo();
                struct T b = foo();
                char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf14_1() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_18804526202576321618.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_18804526202576321618.c:8:35: error: invalid operands to binary + (have 'struct T' and 'int')
                 signed char c = a + b;
                                   ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              signed char bar();
              signed char x() {
                struct T a = foo();
                signed char b = bar();
                signed char c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_18752826660398056465.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_18752826660398056465.c:8:32: error: invalid operands to binary + (have 'struct T' and 'int')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              signed char bar();
              struct T x() {
                struct T a = foo();
                signed char b = bar();
                struct T c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_15787327852440272039.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_15787327852440272039.c:7:35: error: invalid operands to binary + (have 'struct T' and 'struct T')
                 signed char c = a + b;
                                   ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              signed char x() {
                struct T a = foo();
                struct T b = foo();
                signed char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf14_2() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_22980258987182190134.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_22980258987182190134.c:8:37: error: invalid operands to binary + (have 'struct T' and 'int')
                 unsigned char c = a + b;
                                     ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              unsigned char bar();
              unsigned char x() {
                struct T a = foo();
                unsigned char b = bar();
                unsigned char c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_23495937980533285509.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_23495937980533285509.c:8:32: error: invalid operands to binary + (have 'struct T' and 'int')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              unsigned char bar();
              struct T x() {
                struct T a = foo();
                unsigned char b = bar();
                struct T c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_23697402755628032245.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_23697402755628032245.c:7:37: error: invalid operands to binary + (have 'struct T' and 'struct T')
                 unsigned char c = a + b;
                                     ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              unsigned char x() {
                struct T a = foo();
                struct T b = foo();
                unsigned char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf14_3() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_37031686231072256752.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_37031686231072256752.c:8:36: error: invalid operands to binary + (have 'struct T' and 'unsigned int')
                 unsigned int c = a + b;
                                    ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              unsigned int bar();
              unsigned int x() {
                struct T a = foo();
                unsigned int b = bar();
                unsigned int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_31582394170923495930.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_31582394170923495930.c:8:32: error: invalid operands to binary + (have 'struct T' and 'unsigned int')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              unsigned int bar();
              struct T x() {
                struct T a = foo();
                unsigned int b = bar();
                struct T c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_37573478491113072777.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_37573478491113072777.c:7:36: error: invalid operands to binary + (have 'struct T' and 'struct T')
                 unsigned int c = a + b;
                                    ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              unsigned int x() {
                struct T a = foo();
                struct T b = foo();
                unsigned int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf14_4() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_46152524500059579360.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_46152524500059579360.c:8:34: error: invalid operands to binary + (have 'struct T' and 'int')
                 signed int c = a + b;
                                  ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              signed int bar();
              signed int x() {
                struct T a = foo();
                signed int b = bar();
                signed int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_4735538364459717108.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_4735538364459717108.c:8:32: error: invalid operands to binary + (have 'struct T' and 'int')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              signed int bar();
              struct T x() {
                struct T a = foo();
                signed int b = bar();
                struct T c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_47826425563902412688.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_47826425563902412688.c:7:34: error: invalid operands to binary + (have 'struct T' and 'struct T')
                 signed int c = a + b;
                                  ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              signed int x() {
                struct T a = foo();
                struct T b = foo();
                signed int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf14_5() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_53022553667027689608.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_53022553667027689608.c:8:28: error: invalid operands to binary + (have 'struct T' and 'long int')
                 long c = a + b;
                            ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              long bar();
              long x() {
                struct T a = foo();
                long b = bar();
                long c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_53146973727240752182.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_53146973727240752182.c:8:32: error: invalid operands to binary + (have 'struct T' and 'long int')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              long bar();
              struct T x() {
                struct T a = foo();
                long b = bar();
                struct T c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_56861815876811928382.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_56861815876811928382.c:7:28: error: invalid operands to binary + (have 'struct T' and 'struct T')
                 long c = a + b;
                            ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              long x() {
                struct T a = foo();
                struct T b = foo();
                long c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf14_6() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_62080730400735797593.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_62080730400735797593.c:8:29: error: invalid operands to binary + (have 'struct T' and 'float')
                 float c = a + b;
                             ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              float bar();
              float x() {
                struct T a = foo();
                float b = bar();
                float c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_68917021526956943650.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_68917021526956943650.c:8:32: error: invalid operands to binary + (have 'struct T' and 'float')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              float bar();
              struct T x() {
                struct T a = foo();
                float b = bar();
                struct T c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_61547082119927053467.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_61547082119927053467.c:7:29: error: invalid operands to binary + (have 'struct T' and 'struct T')
                 float c = a + b;
                             ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              float x() {
                struct T a = foo();
                struct T b = foo();
                float c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf14_7() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_76363256590661340893.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_76363256590661340893.c:8:30: error: invalid operands to binary + (have 'struct T' and 'double')
                 double c = a + b;
                              ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              double bar();
              double x() {
                struct T a = foo();
                double b = bar();
                double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_75091897230946468668.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_75091897230946468668.c:8:32: error: invalid operands to binary + (have 'struct T' and 'double')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              double bar();
              struct T x() {
                struct T a = foo();
                double b = bar();
                struct T c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_7409229249495697974.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_7409229249495697974.c:7:30: error: invalid operands to binary + (have 'struct T' and 'struct T')
                 double c = a + b;
                              ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              double x() {
                struct T a = foo();
                struct T b = foo();
                double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf14_8() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_87889266150145806936.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_87889266150145806936.c:8:35: error: invalid operands to binary + (have 'struct T' and 'long double')
                 long double c = a + b;
                                   ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              long double bar();
              long double x() {
                struct T a = foo();
                long double b = bar();
                long double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_84559280612697933605.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_84559280612697933605.c:8:32: error: invalid operands to binary + (have 'struct T' and 'long double')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              long double bar();
              struct T x() {
                struct T a = foo();
                long double b = bar();
                struct T c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_82419292973321602225.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_82419292973321602225.c:7:35: error: invalid operands to binary + (have 'struct T' and 'struct T')
                 long double c = a + b;
                                   ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              long double x() {
                struct T a = foo();
                struct T b = foo();
                long double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf14_9() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_91015545372402806003.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_91015545372402806003.c:8:29: error: invalid operands to binary + (have 'struct T' and 'int *')
                 int * c = a + b;
                             ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              int * bar();
              int * x() {
                struct T a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_93063799604396210358.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_93063799604396210358.c:8:32: error: invalid operands to binary + (have 'struct T' and 'int *')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              int * bar();
              struct T x() {
                struct T a = foo();
                int * b = bar();
                struct T c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_97426537838211331883.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_97426537838211331883.c:7:29: error: invalid operands to binary + (have 'struct T' and 'struct T')
                 int * c = a + b;
                             ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              int * x() {
                struct T a = foo();
                struct T b = foo();
                int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf14_10() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_108840511232755950138.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_108840511232755950138.c:8:30: error: invalid operands to binary + (have 'struct T' and 'int **')
                 int ** c = a + b;
                              ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              int ** bar();
              int ** x() {
                struct T a = foo();
                int ** b = bar();
                int ** c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_102211348409627733000.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_102211348409627733000.c:8:32: error: invalid operands to binary + (have 'struct T' and 'int **')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              int ** bar();
              struct T x() {
                struct T a = foo();
                int ** b = bar();
                struct T c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_101705601849147297763.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_101705601849147297763.c:7:30: error: invalid operands to binary + (have 'struct T' and 'struct T')
                 int ** c = a + b;
                              ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              int ** x() {
                struct T a = foo();
                struct T b = foo();
                int ** c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf14_11() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_112508756831491812179.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_112508756831491812179.c:8:30: error: invalid operands to binary + (have 'struct T' and 'char *')
                 char * c = a + b;
                              ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              char * bar();
              char * x() {
                struct T a = foo();
                char * b = bar();
                char * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_114900890784333889300.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_114900890784333889300.c:8:32: error: invalid operands to binary + (have 'struct T' and 'char *')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              char * bar();
              struct T x() {
                struct T a = foo();
                char * b = bar();
                struct T c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_114239271835608257108.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_114239271835608257108.c:7:30: error: invalid operands to binary + (have 'struct T' and 'struct T')
                 char * c = a + b;
                              ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              char * x() {
                struct T a = foo();
                struct T b = foo();
                char * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf14_12() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_124867758132410989767.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_124867758132410989767.c:8:32: error: invalid operands to binary + (have 'struct T' and 'double *')
                 double * c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              double * bar();
              double * x() {
                struct T a = foo();
                double * b = bar();
                double * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_124905809657494158770.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_124905809657494158770.c:8:32: error: invalid operands to binary + (have 'struct T' and 'double *')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              double * bar();
              struct T x() {
                struct T a = foo();
                double * b = bar();
                struct T c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_124612175361730046547.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_124612175361730046547.c:7:32: error: invalid operands to binary + (have 'struct T' and 'struct T')
                 double * c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              double * x() {
                struct T a = foo();
                struct T b = foo();
                double * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf14_13() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_13686857163756551501.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_13686857163756551501.c:10:32: error: invalid operands to binary + (have 'struct T' and 'struct S')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct S { int x; int y; };

              struct T foo();
              struct S bar();
              struct S x() {
                struct T a = foo();
                struct S b = bar();
                struct S c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_138539195718841042676.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_138539195718841042676.c:10:32: error: invalid operands to binary + (have 'struct T' and 'struct S')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct S { int x; int y; };

              struct T foo();
              struct S bar();
              struct T x() {
                struct T a = foo();
                struct S b = bar();
                struct T c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_135172269078995577274.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_135172269078995577274.c:9:32: error: invalid operands to binary + (have 'struct T' and 'struct T')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct S { int x; int y; };

              struct T foo();
              struct S x() {
                struct T a = foo();
                struct T b = foo();
                struct S c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf14_14() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_146595508707058790231.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_146595508707058790231.c:8:32: error: invalid operands to binary + (have 'struct T' and 'struct T')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              struct T bar();
              struct T x() {
                struct T a = foo();
                struct T b = bar();
                struct T c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_14791182372994860305.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_14791182372994860305.c:8:32: error: invalid operands to binary + (have 'struct T' and 'struct T')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              struct T bar();
              struct T x() {
                struct T a = foo();
                struct T b = bar();
                struct T c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_145147754825607553446.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_145147754825607553446.c:7:32: error: invalid operands to binary + (have 'struct T' and 'struct T')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              struct T x() {
                struct T a = foo();
                struct T b = foo();
                struct T c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf14_15() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_153797686841759016423.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_153797686841759016423.c:10:40: error: invalid operands to binary + (have 'struct T' and 'struct_anonymous')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct T { int x; int y; int z; };

              struct T foo();
              struct_anonymous bar();
              struct_anonymous x() {
                struct T a = foo();
                struct_anonymous b = bar();
                struct_anonymous c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_153881962469495500431.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_153881962469495500431.c:10:32: error: invalid operands to binary + (have 'struct T' and 'struct_anonymous')
                 struct T c = a + b;
                                ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct T { int x; int y; int z; };

              struct T foo();
              struct_anonymous bar();
              struct T x() {
                struct T a = foo();
                struct_anonymous b = bar();
                struct T c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_151211199552317482931.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_151211199552317482931.c:9:40: error: invalid operands to binary + (have 'struct T' and 'struct T')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct T { int x; int y; int z; };

              struct T foo();
              struct_anonymous x() {
                struct T a = foo();
                struct T b = foo();
                struct_anonymous c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf14_16() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_164673390704180812511.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_164673390704180812511.c:7:24: error: invalid initializer
                 struct { int a; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf14_164673390704180812511.c:8:41: error: invalid operands to binary + (have 'struct T' and 'struct <anonymous>')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf14_164673390704180812511.c:9:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              struct { int a; } bar();
              struct { int a; } x() {
                struct T a = foo();
                struct { int a; } b = bar();
                struct { int a; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_168472102685296151334.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_168472102685296151334.c:7:24: error: invalid initializer
                 struct { int a; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf14_168472102685296151334.c:8:32: error: invalid operands to binary + (have 'struct T' and 'struct <anonymous>')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              struct { int a; } bar();
              struct T x() {
                struct T a = foo();
                struct { int a; } b = bar();
                struct T c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_165312257561074557499.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_165312257561074557499.c:7:41: error: invalid operands to binary + (have 'struct T' and 'struct T')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf14_165312257561074557499.c:8:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              struct { int a; } x() {
                struct T a = foo();
                struct T b = foo();
                struct { int a; } c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf14_17() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_173054007049819163011.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_173054007049819163011.c:7:24: error: invalid initializer
                 struct { float b; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf14_173054007049819163011.c:8:43: error: invalid operands to binary + (have 'struct T' and 'struct <anonymous>')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf14_173054007049819163011.c:9:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              struct { float b; } bar();
              struct { float b; } x() {
                struct T a = foo();
                struct { float b; } b = bar();
                struct { float b; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_171156177874491257267.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_171156177874491257267.c:7:24: error: invalid initializer
                 struct { float b; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf14_171156177874491257267.c:8:32: error: invalid operands to binary + (have 'struct T' and 'struct <anonymous>')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              struct { float b; } bar();
              struct T x() {
                struct T a = foo();
                struct { float b; } b = bar();
                struct T c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_175831320046569232832.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_175831320046569232832.c:7:43: error: invalid operands to binary + (have 'struct T' and 'struct T')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf14_175831320046569232832.c:8:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              struct { float b; } x() {
                struct T a = foo();
                struct T b = foo();
                struct { float b; } c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf14_18() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_189151785468385683763.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_189151785468385683763.c:8:36: error: invalid operands to binary + (have 'struct T' and 'int')
                 volatile int c = a + b;
                                    ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              volatile int bar();
              volatile int x() {
                struct T a = foo();
                volatile int b = bar();
                volatile int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_184172131455740254548.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_184172131455740254548.c:8:32: error: invalid operands to binary + (have 'struct T' and 'int')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              volatile int bar();
              struct T x() {
                struct T a = foo();
                volatile int b = bar();
                struct T c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_183659147246363116984.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_183659147246363116984.c:7:36: error: invalid operands to binary + (have 'struct T' and 'struct T')
                 volatile int c = a + b;
                                    ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              volatile int x() {
                struct T a = foo();
                struct T b = foo();
                volatile int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf14_19() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_197355243375304129904.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_197355243375304129904.c:8:33: error: invalid operands to binary + (have 'struct T' and 'int')
                 const int c = a + b;
                                 ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              const int bar();
              const int x() {
                struct T a = foo();
                const int b = bar();
                const int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_195082282972409820664.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_195082282972409820664.c:8:32: error: invalid operands to binary + (have 'struct T' and 'int')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              const int bar();
              struct T x() {
                struct T a = foo();
                const int b = bar();
                struct T c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_193844811655162933870.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_193844811655162933870.c:7:33: error: invalid operands to binary + (have 'struct T' and 'struct T')
                 const int c = a + b;
                                 ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              const int x() {
                struct T a = foo();
                struct T b = foo();
                const int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf14_20() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_202997766967684699320.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_202997766967684699320.c:8:36: error: invalid operands to binary + (have 'struct T' and 'double')
                 const double c = a + b;
                                    ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              const double bar();
              const double x() {
                struct T a = foo();
                const double b = bar();
                const double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_20920531350789978266.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_20920531350789978266.c:8:32: error: invalid operands to binary + (have 'struct T' and 'double')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              const double bar();
              struct T x() {
                struct T a = foo();
                const double b = bar();
                struct T c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_20220855625406262477.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_20220855625406262477.c:7:36: error: invalid operands to binary + (have 'struct T' and 'struct T')
                 const double c = a + b;
                                    ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              const double x() {
                struct T a = foo();
                struct T b = foo();
                const double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf14_21() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_218705836412274084481.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_218705836412274084481.c:8:39: error: invalid operands to binary + (have 'struct T' and 'double')
                 volatile double c = a + b;
                                       ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              volatile double bar();
              volatile double x() {
                struct T a = foo();
                volatile double b = bar();
                volatile double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_217240380584220561231.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_217240380584220561231.c:8:32: error: invalid operands to binary + (have 'struct T' and 'double')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              volatile double bar();
              struct T x() {
                struct T a = foo();
                volatile double b = bar();
                struct T c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_214871594302228232395.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_214871594302228232395.c:7:39: error: invalid operands to binary + (have 'struct T' and 'struct T')
                 volatile double c = a + b;
                                       ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              volatile double x() {
                struct T a = foo();
                struct T b = foo();
                volatile double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf14_22() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_226494387319487474997.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_226494387319487474997.c:8:29: error: invalid operands to binary + (have 'struct T' and 'int *')
                 int * c = a + b;
                             ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              int * bar();
              int * x() {
                struct T a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_225174064718100091592.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_225174064718100091592.c:8:32: error: invalid operands to binary + (have 'struct T' and 'int *')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              int * bar();
              struct T x() {
                struct T a = foo();
                int * b = bar();
                struct T c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_226930967841929215878.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_226930967841929215878.c:7:29: error: invalid operands to binary + (have 'struct T' and 'struct T')
                 int * c = a + b;
                             ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              int * x() {
                struct T a = foo();
                struct T b = foo();
                int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf14_23() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_234354673331656775055.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_234354673331656775055.c:8:35: error: invalid operands to binary + (have 'struct T' and 'const int *')
                 const int * c = a + b;
                                   ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              const int * bar();
              const int * x() {
                struct T a = foo();
                const int * b = bar();
                const int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_231796613481508561099.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_231796613481508561099.c:8:32: error: invalid operands to binary + (have 'struct T' and 'const int *')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              const int * bar();
              struct T x() {
                struct T a = foo();
                const int * b = bar();
                struct T c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_234076599524557769115.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_234076599524557769115.c:7:35: error: invalid operands to binary + (have 'struct T' and 'struct T')
                 const int * c = a + b;
                                   ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              const int * x() {
                struct T a = foo();
                struct T b = foo();
                const int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf14_24() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_249029102896616675591.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_249029102896616675591.c:8:38: error: invalid operands to binary + (have 'struct T' and 'volatile int *')
                 volatile int * c = a + b;
                                      ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              volatile int * bar();
              volatile int * x() {
                struct T a = foo();
                volatile int * b = bar();
                volatile int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_242052041395508263499.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_242052041395508263499.c:8:32: error: invalid operands to binary + (have 'struct T' and 'volatile int *')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              volatile int * bar();
              struct T x() {
                struct T a = foo();
                volatile int * b = bar();
                struct T c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf14_246987000013071419989.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf14_246987000013071419989.c:7:38: error: invalid operands to binary + (have 'struct T' and 'struct T')
                 volatile int * c = a + b;
                                      ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct T foo();
              volatile int * x() {
                struct T a = foo();
                struct T b = foo();
                volatile int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf15_0() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_08019880898338389396.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_08019880898338389396.c:8:28: error: invalid operands to binary + (have 'struct_anonymous' and 'int')
                 char c = a + b;
                            ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              char bar();
              char x() {
                struct_anonymous a = foo();
                char b = bar();
                char c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_07179956670963368229.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_07179956670963368229.c:8:40: error: invalid operands to binary + (have 'struct_anonymous' and 'int')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              char bar();
              struct_anonymous x() {
                struct_anonymous a = foo();
                char b = bar();
                struct_anonymous c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_06878317777003619249.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_06878317777003619249.c:7:28: error: invalid operands to binary + (have 'struct_anonymous' and 'struct_anonymous')
                 char c = a + b;
                            ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              char x() {
                struct_anonymous a = foo();
                struct_anonymous b = foo();
                char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf15_1() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_12932143063868307809.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_12932143063868307809.c:8:35: error: invalid operands to binary + (have 'struct_anonymous' and 'int')
                 signed char c = a + b;
                                   ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              signed char bar();
              signed char x() {
                struct_anonymous a = foo();
                signed char b = bar();
                signed char c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_1615730117938076378.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_1615730117938076378.c:8:40: error: invalid operands to binary + (have 'struct_anonymous' and 'int')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              signed char bar();
              struct_anonymous x() {
                struct_anonymous a = foo();
                signed char b = bar();
                struct_anonymous c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_1680356447688534635.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_1680356447688534635.c:7:35: error: invalid operands to binary + (have 'struct_anonymous' and 'struct_anonymous')
                 signed char c = a + b;
                                   ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              signed char x() {
                struct_anonymous a = foo();
                struct_anonymous b = foo();
                signed char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf15_2() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_24710951528971524598.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_24710951528971524598.c:8:37: error: invalid operands to binary + (have 'struct_anonymous' and 'int')
                 unsigned char c = a + b;
                                     ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              unsigned char bar();
              unsigned char x() {
                struct_anonymous a = foo();
                unsigned char b = bar();
                unsigned char c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_2162933432995527803.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_2162933432995527803.c:8:40: error: invalid operands to binary + (have 'struct_anonymous' and 'int')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              unsigned char bar();
              struct_anonymous x() {
                struct_anonymous a = foo();
                unsigned char b = bar();
                struct_anonymous c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_25293983216798671459.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_25293983216798671459.c:7:37: error: invalid operands to binary + (have 'struct_anonymous' and 'struct_anonymous')
                 unsigned char c = a + b;
                                     ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              unsigned char x() {
                struct_anonymous a = foo();
                struct_anonymous b = foo();
                unsigned char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf15_3() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_3807530975570341495.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_3807530975570341495.c:8:36: error: invalid operands to binary + (have 'struct_anonymous' and 'unsigned int')
                 unsigned int c = a + b;
                                    ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              unsigned int bar();
              unsigned int x() {
                struct_anonymous a = foo();
                unsigned int b = bar();
                unsigned int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_37438922112894282652.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_37438922112894282652.c:8:40: error: invalid operands to binary + (have 'struct_anonymous' and 'unsigned int')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              unsigned int bar();
              struct_anonymous x() {
                struct_anonymous a = foo();
                unsigned int b = bar();
                struct_anonymous c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_36275361299851662893.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_36275361299851662893.c:7:36: error: invalid operands to binary + (have 'struct_anonymous' and 'struct_anonymous')
                 unsigned int c = a + b;
                                    ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              unsigned int x() {
                struct_anonymous a = foo();
                struct_anonymous b = foo();
                unsigned int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf15_4() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_47516056070940887953.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_47516056070940887953.c:8:34: error: invalid operands to binary + (have 'struct_anonymous' and 'int')
                 signed int c = a + b;
                                  ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              signed int bar();
              signed int x() {
                struct_anonymous a = foo();
                signed int b = bar();
                signed int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_41488354333289312566.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_41488354333289312566.c:8:40: error: invalid operands to binary + (have 'struct_anonymous' and 'int')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              signed int bar();
              struct_anonymous x() {
                struct_anonymous a = foo();
                signed int b = bar();
                struct_anonymous c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_46296590485527582425.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_46296590485527582425.c:7:34: error: invalid operands to binary + (have 'struct_anonymous' and 'struct_anonymous')
                 signed int c = a + b;
                                  ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              signed int x() {
                struct_anonymous a = foo();
                struct_anonymous b = foo();
                signed int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf15_5() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_58966500258758914538.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_58966500258758914538.c:8:28: error: invalid operands to binary + (have 'struct_anonymous' and 'long int')
                 long c = a + b;
                            ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              long bar();
              long x() {
                struct_anonymous a = foo();
                long b = bar();
                long c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_52478265712106355289.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_52478265712106355289.c:8:40: error: invalid operands to binary + (have 'struct_anonymous' and 'long int')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              long bar();
              struct_anonymous x() {
                struct_anonymous a = foo();
                long b = bar();
                struct_anonymous c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_5997832040884228545.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_5997832040884228545.c:7:28: error: invalid operands to binary + (have 'struct_anonymous' and 'struct_anonymous')
                 long c = a + b;
                            ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              long x() {
                struct_anonymous a = foo();
                struct_anonymous b = foo();
                long c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf15_6() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_66811088165942696823.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_66811088165942696823.c:8:29: error: invalid operands to binary + (have 'struct_anonymous' and 'float')
                 float c = a + b;
                             ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              float bar();
              float x() {
                struct_anonymous a = foo();
                float b = bar();
                float c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_65017893129517794041.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_65017893129517794041.c:8:40: error: invalid operands to binary + (have 'struct_anonymous' and 'float')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              float bar();
              struct_anonymous x() {
                struct_anonymous a = foo();
                float b = bar();
                struct_anonymous c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_67422014686412745745.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_67422014686412745745.c:7:29: error: invalid operands to binary + (have 'struct_anonymous' and 'struct_anonymous')
                 float c = a + b;
                             ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              float x() {
                struct_anonymous a = foo();
                struct_anonymous b = foo();
                float c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf15_7() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_7353333797967374185.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_7353333797967374185.c:8:30: error: invalid operands to binary + (have 'struct_anonymous' and 'double')
                 double c = a + b;
                              ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              double bar();
              double x() {
                struct_anonymous a = foo();
                double b = bar();
                double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_77568776723648110624.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_77568776723648110624.c:8:40: error: invalid operands to binary + (have 'struct_anonymous' and 'double')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              double bar();
              struct_anonymous x() {
                struct_anonymous a = foo();
                double b = bar();
                struct_anonymous c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_73307697681908156329.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_73307697681908156329.c:7:30: error: invalid operands to binary + (have 'struct_anonymous' and 'struct_anonymous')
                 double c = a + b;
                              ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              double x() {
                struct_anonymous a = foo();
                struct_anonymous b = foo();
                double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf15_8() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_89217872561492205371.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_89217872561492205371.c:8:35: error: invalid operands to binary + (have 'struct_anonymous' and 'long double')
                 long double c = a + b;
                                   ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              long double bar();
              long double x() {
                struct_anonymous a = foo();
                long double b = bar();
                long double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_8388459348242168325.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_8388459348242168325.c:8:40: error: invalid operands to binary + (have 'struct_anonymous' and 'long double')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              long double bar();
              struct_anonymous x() {
                struct_anonymous a = foo();
                long double b = bar();
                struct_anonymous c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_8768643307412359380.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_8768643307412359380.c:7:35: error: invalid operands to binary + (have 'struct_anonymous' and 'struct_anonymous')
                 long double c = a + b;
                                   ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              long double x() {
                struct_anonymous a = foo();
                struct_anonymous b = foo();
                long double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf15_9() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_98682657047208659337.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_98682657047208659337.c:8:29: error: invalid operands to binary + (have 'struct_anonymous' and 'int *')
                 int * c = a + b;
                             ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              int * bar();
              int * x() {
                struct_anonymous a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_94754882770701378676.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_94754882770701378676.c:8:40: error: invalid operands to binary + (have 'struct_anonymous' and 'int *')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              int * bar();
              struct_anonymous x() {
                struct_anonymous a = foo();
                int * b = bar();
                struct_anonymous c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_97337619088978214100.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_97337619088978214100.c:7:29: error: invalid operands to binary + (have 'struct_anonymous' and 'struct_anonymous')
                 int * c = a + b;
                             ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              int * x() {
                struct_anonymous a = foo();
                struct_anonymous b = foo();
                int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf15_10() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_102425290256478241268.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_102425290256478241268.c:8:30: error: invalid operands to binary + (have 'struct_anonymous' and 'int **')
                 int ** c = a + b;
                              ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              int ** bar();
              int ** x() {
                struct_anonymous a = foo();
                int ** b = bar();
                int ** c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_104873316309838121807.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_104873316309838121807.c:8:40: error: invalid operands to binary + (have 'struct_anonymous' and 'int **')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              int ** bar();
              struct_anonymous x() {
                struct_anonymous a = foo();
                int ** b = bar();
                struct_anonymous c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_108447108422143207456.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_108447108422143207456.c:7:30: error: invalid operands to binary + (have 'struct_anonymous' and 'struct_anonymous')
                 int ** c = a + b;
                              ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              int ** x() {
                struct_anonymous a = foo();
                struct_anonymous b = foo();
                int ** c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf15_11() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_113367418830460610803.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_113367418830460610803.c:8:30: error: invalid operands to binary + (have 'struct_anonymous' and 'char *')
                 char * c = a + b;
                              ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              char * bar();
              char * x() {
                struct_anonymous a = foo();
                char * b = bar();
                char * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_111683371446503994449.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_111683371446503994449.c:8:40: error: invalid operands to binary + (have 'struct_anonymous' and 'char *')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              char * bar();
              struct_anonymous x() {
                struct_anonymous a = foo();
                char * b = bar();
                struct_anonymous c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_118954307218521196011.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_118954307218521196011.c:7:30: error: invalid operands to binary + (have 'struct_anonymous' and 'struct_anonymous')
                 char * c = a + b;
                              ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              char * x() {
                struct_anonymous a = foo();
                struct_anonymous b = foo();
                char * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf15_12() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_121924886713993129169.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_121924886713993129169.c:8:32: error: invalid operands to binary + (have 'struct_anonymous' and 'double *')
                 double * c = a + b;
                                ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              double * bar();
              double * x() {
                struct_anonymous a = foo();
                double * b = bar();
                double * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_127917687092962850430.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_127917687092962850430.c:8:40: error: invalid operands to binary + (have 'struct_anonymous' and 'double *')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              double * bar();
              struct_anonymous x() {
                struct_anonymous a = foo();
                double * b = bar();
                struct_anonymous c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_128701697014260822640.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_128701697014260822640.c:7:32: error: invalid operands to binary + (have 'struct_anonymous' and 'struct_anonymous')
                 double * c = a + b;
                                ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              double * x() {
                struct_anonymous a = foo();
                struct_anonymous b = foo();
                double * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf15_13() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_138745733716998896207.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_138745733716998896207.c:10:32: error: invalid operands to binary + (have 'struct_anonymous' and 'struct S')
                 struct S c = a + b;
                                ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct S { int x; int y; };

              struct_anonymous foo();
              struct S bar();
              struct S x() {
                struct_anonymous a = foo();
                struct S b = bar();
                struct S c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_136858054978792618242.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_136858054978792618242.c:10:40: error: invalid operands to binary + (have 'struct_anonymous' and 'struct S')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct S { int x; int y; };

              struct_anonymous foo();
              struct S bar();
              struct_anonymous x() {
                struct_anonymous a = foo();
                struct S b = bar();
                struct_anonymous c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_135540695960932327488.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_135540695960932327488.c:9:32: error: invalid operands to binary + (have 'struct_anonymous' and 'struct_anonymous')
                 struct S c = a + b;
                                ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct S { int x; int y; };

              struct_anonymous foo();
              struct S x() {
                struct_anonymous a = foo();
                struct_anonymous b = foo();
                struct S c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf15_14() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_145189017383375681360.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_145189017383375681360.c:10:32: error: invalid operands to binary + (have 'struct_anonymous' and 'struct T')
                 struct T c = a + b;
                                ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct T { int x; int y; int z; };

              struct_anonymous foo();
              struct T bar();
              struct T x() {
                struct_anonymous a = foo();
                struct T b = bar();
                struct T c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_141440420070871708012.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_141440420070871708012.c:10:40: error: invalid operands to binary + (have 'struct_anonymous' and 'struct T')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct T { int x; int y; int z; };

              struct_anonymous foo();
              struct T bar();
              struct_anonymous x() {
                struct_anonymous a = foo();
                struct T b = bar();
                struct_anonymous c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_142572003607529225521.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_142572003607529225521.c:9:32: error: invalid operands to binary + (have 'struct_anonymous' and 'struct_anonymous')
                 struct T c = a + b;
                                ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct T { int x; int y; int z; };

              struct_anonymous foo();
              struct T x() {
                struct_anonymous a = foo();
                struct_anonymous b = foo();
                struct T c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf15_15() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_153945956295875156374.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_153945956295875156374.c:8:40: error: invalid operands to binary + (have 'struct_anonymous' and 'struct_anonymous')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              struct_anonymous bar();
              struct_anonymous x() {
                struct_anonymous a = foo();
                struct_anonymous b = bar();
                struct_anonymous c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_152628124700271715241.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_152628124700271715241.c:8:40: error: invalid operands to binary + (have 'struct_anonymous' and 'struct_anonymous')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              struct_anonymous bar();
              struct_anonymous x() {
                struct_anonymous a = foo();
                struct_anonymous b = bar();
                struct_anonymous c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_153054364191739321356.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_153054364191739321356.c:7:40: error: invalid operands to binary + (have 'struct_anonymous' and 'struct_anonymous')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              struct_anonymous x() {
                struct_anonymous a = foo();
                struct_anonymous b = foo();
                struct_anonymous c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf15_16() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_163744367071889397578.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_163744367071889397578.c:7:24: error: invalid initializer
                 struct { int a; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf15_163744367071889397578.c:8:41: error: invalid operands to binary + (have 'struct_anonymous' and 'struct <anonymous>')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf15_163744367071889397578.c:9:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              struct { int a; } bar();
              struct { int a; } x() {
                struct_anonymous a = foo();
                struct { int a; } b = bar();
                struct { int a; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_162448373918220928278.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_162448373918220928278.c:7:24: error: invalid initializer
                 struct { int a; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf15_162448373918220928278.c:8:40: error: invalid operands to binary + (have 'struct_anonymous' and 'struct <anonymous>')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              struct { int a; } bar();
              struct_anonymous x() {
                struct_anonymous a = foo();
                struct { int a; } b = bar();
                struct_anonymous c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_165265548351649770228.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_165265548351649770228.c:7:41: error: invalid operands to binary + (have 'struct_anonymous' and 'struct_anonymous')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf15_165265548351649770228.c:8:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              struct { int a; } x() {
                struct_anonymous a = foo();
                struct_anonymous b = foo();
                struct { int a; } c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf15_17() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_177214302808928993065.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_177214302808928993065.c:7:24: error: invalid initializer
                 struct { float b; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf15_177214302808928993065.c:8:43: error: invalid operands to binary + (have 'struct_anonymous' and 'struct <anonymous>')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf15_177214302808928993065.c:9:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              struct { float b; } bar();
              struct { float b; } x() {
                struct_anonymous a = foo();
                struct { float b; } b = bar();
                struct { float b; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_178570948511531246608.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_178570948511531246608.c:7:24: error: invalid initializer
                 struct { float b; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf15_178570948511531246608.c:8:40: error: invalid operands to binary + (have 'struct_anonymous' and 'struct <anonymous>')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              struct { float b; } bar();
              struct_anonymous x() {
                struct_anonymous a = foo();
                struct { float b; } b = bar();
                struct_anonymous c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_174503866390867824452.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_174503866390867824452.c:7:43: error: invalid operands to binary + (have 'struct_anonymous' and 'struct_anonymous')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf15_174503866390867824452.c:8:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              struct { float b; } x() {
                struct_anonymous a = foo();
                struct_anonymous b = foo();
                struct { float b; } c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf15_18() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_184887267803185199673.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_184887267803185199673.c:8:36: error: invalid operands to binary + (have 'struct_anonymous' and 'int')
                 volatile int c = a + b;
                                    ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              volatile int bar();
              volatile int x() {
                struct_anonymous a = foo();
                volatile int b = bar();
                volatile int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_185209489957334756264.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_185209489957334756264.c:8:40: error: invalid operands to binary + (have 'struct_anonymous' and 'int')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              volatile int bar();
              struct_anonymous x() {
                struct_anonymous a = foo();
                volatile int b = bar();
                struct_anonymous c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_188762349194578484042.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_188762349194578484042.c:7:36: error: invalid operands to binary + (have 'struct_anonymous' and 'struct_anonymous')
                 volatile int c = a + b;
                                    ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              volatile int x() {
                struct_anonymous a = foo();
                struct_anonymous b = foo();
                volatile int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf15_19() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_195063725585554404205.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_195063725585554404205.c:8:33: error: invalid operands to binary + (have 'struct_anonymous' and 'int')
                 const int c = a + b;
                                 ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              const int bar();
              const int x() {
                struct_anonymous a = foo();
                const int b = bar();
                const int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_198017681329308039648.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_198017681329308039648.c:8:40: error: invalid operands to binary + (have 'struct_anonymous' and 'int')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              const int bar();
              struct_anonymous x() {
                struct_anonymous a = foo();
                const int b = bar();
                struct_anonymous c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_191630437817742135280.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_191630437817742135280.c:7:33: error: invalid operands to binary + (have 'struct_anonymous' and 'struct_anonymous')
                 const int c = a + b;
                                 ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              const int x() {
                struct_anonymous a = foo();
                struct_anonymous b = foo();
                const int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf15_20() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_203966790953149892207.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_203966790953149892207.c:8:36: error: invalid operands to binary + (have 'struct_anonymous' and 'double')
                 const double c = a + b;
                                    ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              const double bar();
              const double x() {
                struct_anonymous a = foo();
                const double b = bar();
                const double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_202025325193912190953.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_202025325193912190953.c:8:40: error: invalid operands to binary + (have 'struct_anonymous' and 'double')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              const double bar();
              struct_anonymous x() {
                struct_anonymous a = foo();
                const double b = bar();
                struct_anonymous c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_208676884341346220575.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_208676884341346220575.c:7:36: error: invalid operands to binary + (have 'struct_anonymous' and 'struct_anonymous')
                 const double c = a + b;
                                    ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              const double x() {
                struct_anonymous a = foo();
                struct_anonymous b = foo();
                const double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf15_21() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_216007648413447775492.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_216007648413447775492.c:8:39: error: invalid operands to binary + (have 'struct_anonymous' and 'double')
                 volatile double c = a + b;
                                       ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              volatile double bar();
              volatile double x() {
                struct_anonymous a = foo();
                volatile double b = bar();
                volatile double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_218242150537738541982.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_218242150537738541982.c:8:40: error: invalid operands to binary + (have 'struct_anonymous' and 'double')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              volatile double bar();
              struct_anonymous x() {
                struct_anonymous a = foo();
                volatile double b = bar();
                struct_anonymous c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_21182025393817448847.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_21182025393817448847.c:7:39: error: invalid operands to binary + (have 'struct_anonymous' and 'struct_anonymous')
                 volatile double c = a + b;
                                       ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              volatile double x() {
                struct_anonymous a = foo();
                struct_anonymous b = foo();
                volatile double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf15_22() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_225603781381146988603.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_225603781381146988603.c:8:29: error: invalid operands to binary + (have 'struct_anonymous' and 'int *')
                 int * c = a + b;
                             ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              int * bar();
              int * x() {
                struct_anonymous a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_224237779818985445448.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_224237779818985445448.c:8:40: error: invalid operands to binary + (have 'struct_anonymous' and 'int *')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              int * bar();
              struct_anonymous x() {
                struct_anonymous a = foo();
                int * b = bar();
                struct_anonymous c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_228543256008563652386.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_228543256008563652386.c:7:29: error: invalid operands to binary + (have 'struct_anonymous' and 'struct_anonymous')
                 int * c = a + b;
                             ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              int * x() {
                struct_anonymous a = foo();
                struct_anonymous b = foo();
                int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf15_23() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_238397447599601356513.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_238397447599601356513.c:8:35: error: invalid operands to binary + (have 'struct_anonymous' and 'const int *')
                 const int * c = a + b;
                                   ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              const int * bar();
              const int * x() {
                struct_anonymous a = foo();
                const int * b = bar();
                const int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_237591049484480356933.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_237591049484480356933.c:8:40: error: invalid operands to binary + (have 'struct_anonymous' and 'const int *')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              const int * bar();
              struct_anonymous x() {
                struct_anonymous a = foo();
                const int * b = bar();
                struct_anonymous c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_233360998225125330873.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_233360998225125330873.c:7:35: error: invalid operands to binary + (have 'struct_anonymous' and 'struct_anonymous')
                 const int * c = a + b;
                                   ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              const int * x() {
                struct_anonymous a = foo();
                struct_anonymous b = foo();
                const int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf15_24() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_24315950678029346521.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_24315950678029346521.c:8:38: error: invalid operands to binary + (have 'struct_anonymous' and 'volatile int *')
                 volatile int * c = a + b;
                                      ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              volatile int * bar();
              volatile int * x() {
                struct_anonymous a = foo();
                volatile int * b = bar();
                volatile int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_241984995951691427626.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_241984995951691427626.c:8:40: error: invalid operands to binary + (have 'struct_anonymous' and 'volatile int *')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              volatile int * bar();
              struct_anonymous x() {
                struct_anonymous a = foo();
                volatile int * b = bar();
                struct_anonymous c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf15_245578031471928064220.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf15_245578031471928064220.c:7:38: error: invalid operands to binary + (have 'struct_anonymous' and 'struct_anonymous')
                 volatile int * c = a + b;
                                      ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct_anonymous foo();
              volatile int * x() {
                struct_anonymous a = foo();
                struct_anonymous b = foo();
                volatile int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf16_0() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_01929710383736329403.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_01929710383736329403.c:4:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_01929710383736329403.c:6:28: error: invalid operands to binary + (have 'struct <anonymous>' and 'int')
                 char c = a + b;
                            ^

        */
        error("""
              struct { int a; } foo();
              char bar();
              char x() {
                struct { int a; } a = foo();
                char b = bar();
                char c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_07582021027354495643.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_07582021027354495643.c:4:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_07582021027354495643.c:6:41: error: invalid operands to binary + (have 'struct <anonymous>' and 'int')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_07582021027354495643.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct { int a; } foo();
              char bar();
              struct { int a; } x() {
                struct { int a; } a = foo();
                char b = bar();
                struct { int a; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_06807729044620070333.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_06807729044620070333.c:3:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_06807729044620070333.c:4:24: error: invalid initializer
                 struct { int a; } b = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_06807729044620070333.c:5:28: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 char c = a + b;
                            ^

        */
        error("""
              struct { int a; } foo();
              char x() {
                struct { int a; } a = foo();
                struct { int a; } b = foo();
                char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf16_1() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_12885302685761777007.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_12885302685761777007.c:4:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_12885302685761777007.c:6:35: error: invalid operands to binary + (have 'struct <anonymous>' and 'int')
                 signed char c = a + b;
                                   ^

        */
        error("""
              struct { int a; } foo();
              signed char bar();
              signed char x() {
                struct { int a; } a = foo();
                signed char b = bar();
                signed char c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_16220907457755356169.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_16220907457755356169.c:4:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_16220907457755356169.c:6:41: error: invalid operands to binary + (have 'struct <anonymous>' and 'int')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_16220907457755356169.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct { int a; } foo();
              signed char bar();
              struct { int a; } x() {
                struct { int a; } a = foo();
                signed char b = bar();
                struct { int a; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_11168851260109173257.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_11168851260109173257.c:3:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_11168851260109173257.c:4:24: error: invalid initializer
                 struct { int a; } b = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_11168851260109173257.c:5:35: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 signed char c = a + b;
                                   ^

        */
        error("""
              struct { int a; } foo();
              signed char x() {
                struct { int a; } a = foo();
                struct { int a; } b = foo();
                signed char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf16_2() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_2691569732259970085.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_2691569732259970085.c:4:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_2691569732259970085.c:6:37: error: invalid operands to binary + (have 'struct <anonymous>' and 'int')
                 unsigned char c = a + b;
                                     ^

        */
        error("""
              struct { int a; } foo();
              unsigned char bar();
              unsigned char x() {
                struct { int a; } a = foo();
                unsigned char b = bar();
                unsigned char c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_28066687770012071722.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_28066687770012071722.c:4:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_28066687770012071722.c:6:41: error: invalid operands to binary + (have 'struct <anonymous>' and 'int')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_28066687770012071722.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct { int a; } foo();
              unsigned char bar();
              struct { int a; } x() {
                struct { int a; } a = foo();
                unsigned char b = bar();
                struct { int a; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_21043842404921505849.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_21043842404921505849.c:3:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_21043842404921505849.c:4:24: error: invalid initializer
                 struct { int a; } b = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_21043842404921505849.c:5:37: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 unsigned char c = a + b;
                                     ^

        */
        error("""
              struct { int a; } foo();
              unsigned char x() {
                struct { int a; } a = foo();
                struct { int a; } b = foo();
                unsigned char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf16_3() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_36366730575062350786.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_36366730575062350786.c:4:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_36366730575062350786.c:6:36: error: invalid operands to binary + (have 'struct <anonymous>' and 'unsigned int')
                 unsigned int c = a + b;
                                    ^

        */
        error("""
              struct { int a; } foo();
              unsigned int bar();
              unsigned int x() {
                struct { int a; } a = foo();
                unsigned int b = bar();
                unsigned int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_3643466857067818474.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_3643466857067818474.c:4:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_3643466857067818474.c:6:41: error: invalid operands to binary + (have 'struct <anonymous>' and 'unsigned int')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_3643466857067818474.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct { int a; } foo();
              unsigned int bar();
              struct { int a; } x() {
                struct { int a; } a = foo();
                unsigned int b = bar();
                struct { int a; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_3157874336609845620.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_3157874336609845620.c:3:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_3157874336609845620.c:4:24: error: invalid initializer
                 struct { int a; } b = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_3157874336609845620.c:5:36: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 unsigned int c = a + b;
                                    ^

        */
        error("""
              struct { int a; } foo();
              unsigned int x() {
                struct { int a; } a = foo();
                struct { int a; } b = foo();
                unsigned int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf16_4() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_42381739336893736442.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_42381739336893736442.c:4:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_42381739336893736442.c:6:34: error: invalid operands to binary + (have 'struct <anonymous>' and 'int')
                 signed int c = a + b;
                                  ^

        */
        error("""
              struct { int a; } foo();
              signed int bar();
              signed int x() {
                struct { int a; } a = foo();
                signed int b = bar();
                signed int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_47611721393808539441.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_47611721393808539441.c:4:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_47611721393808539441.c:6:41: error: invalid operands to binary + (have 'struct <anonymous>' and 'int')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_47611721393808539441.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct { int a; } foo();
              signed int bar();
              struct { int a; } x() {
                struct { int a; } a = foo();
                signed int b = bar();
                struct { int a; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_46323714482687430726.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_46323714482687430726.c:3:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_46323714482687430726.c:4:24: error: invalid initializer
                 struct { int a; } b = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_46323714482687430726.c:5:34: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 signed int c = a + b;
                                  ^

        */
        error("""
              struct { int a; } foo();
              signed int x() {
                struct { int a; } a = foo();
                struct { int a; } b = foo();
                signed int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf16_5() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_56759352675864951010.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_56759352675864951010.c:4:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_56759352675864951010.c:6:28: error: invalid operands to binary + (have 'struct <anonymous>' and 'long int')
                 long c = a + b;
                            ^

        */
        error("""
              struct { int a; } foo();
              long bar();
              long x() {
                struct { int a; } a = foo();
                long b = bar();
                long c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_55200569744126874801.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_55200569744126874801.c:4:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_55200569744126874801.c:6:41: error: invalid operands to binary + (have 'struct <anonymous>' and 'long int')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_55200569744126874801.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct { int a; } foo();
              long bar();
              struct { int a; } x() {
                struct { int a; } a = foo();
                long b = bar();
                struct { int a; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_56701923308025866312.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_56701923308025866312.c:3:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_56701923308025866312.c:4:24: error: invalid initializer
                 struct { int a; } b = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_56701923308025866312.c:5:28: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 long c = a + b;
                            ^

        */
        error("""
              struct { int a; } foo();
              long x() {
                struct { int a; } a = foo();
                struct { int a; } b = foo();
                long c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf16_6() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_64447448501626629803.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_64447448501626629803.c:4:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_64447448501626629803.c:6:29: error: invalid operands to binary + (have 'struct <anonymous>' and 'float')
                 float c = a + b;
                             ^

        */
        error("""
              struct { int a; } foo();
              float bar();
              float x() {
                struct { int a; } a = foo();
                float b = bar();
                float c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_66486709697656220939.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_66486709697656220939.c:4:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_66486709697656220939.c:6:41: error: invalid operands to binary + (have 'struct <anonymous>' and 'float')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_66486709697656220939.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct { int a; } foo();
              float bar();
              struct { int a; } x() {
                struct { int a; } a = foo();
                float b = bar();
                struct { int a; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_62441598148010345221.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_62441598148010345221.c:3:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_62441598148010345221.c:4:24: error: invalid initializer
                 struct { int a; } b = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_62441598148010345221.c:5:29: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 float c = a + b;
                             ^

        */
        error("""
              struct { int a; } foo();
              float x() {
                struct { int a; } a = foo();
                struct { int a; } b = foo();
                float c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf16_7() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_78839222290647439954.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_78839222290647439954.c:4:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_78839222290647439954.c:6:30: error: invalid operands to binary + (have 'struct <anonymous>' and 'double')
                 double c = a + b;
                              ^

        */
        error("""
              struct { int a; } foo();
              double bar();
              double x() {
                struct { int a; } a = foo();
                double b = bar();
                double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_73274205015301540152.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_73274205015301540152.c:4:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_73274205015301540152.c:6:41: error: invalid operands to binary + (have 'struct <anonymous>' and 'double')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_73274205015301540152.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct { int a; } foo();
              double bar();
              struct { int a; } x() {
                struct { int a; } a = foo();
                double b = bar();
                struct { int a; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_76222278893503962253.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_76222278893503962253.c:3:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_76222278893503962253.c:4:24: error: invalid initializer
                 struct { int a; } b = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_76222278893503962253.c:5:30: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 double c = a + b;
                              ^

        */
        error("""
              struct { int a; } foo();
              double x() {
                struct { int a; } a = foo();
                struct { int a; } b = foo();
                double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf16_8() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_88904030895289775152.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_88904030895289775152.c:4:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_88904030895289775152.c:6:35: error: invalid operands to binary + (have 'struct <anonymous>' and 'long double')
                 long double c = a + b;
                                   ^

        */
        error("""
              struct { int a; } foo();
              long double bar();
              long double x() {
                struct { int a; } a = foo();
                long double b = bar();
                long double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_8956512528217174852.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_8956512528217174852.c:4:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_8956512528217174852.c:6:41: error: invalid operands to binary + (have 'struct <anonymous>' and 'long double')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_8956512528217174852.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct { int a; } foo();
              long double bar();
              struct { int a; } x() {
                struct { int a; } a = foo();
                long double b = bar();
                struct { int a; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_88531568738022843295.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_88531568738022843295.c:3:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_88531568738022843295.c:4:24: error: invalid initializer
                 struct { int a; } b = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_88531568738022843295.c:5:35: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 long double c = a + b;
                                   ^

        */
        error("""
              struct { int a; } foo();
              long double x() {
                struct { int a; } a = foo();
                struct { int a; } b = foo();
                long double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf16_9() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_98610512566341661056.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_98610512566341661056.c:4:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_98610512566341661056.c:6:29: error: invalid operands to binary + (have 'struct <anonymous>' and 'int *')
                 int * c = a + b;
                             ^

        */
        error("""
              struct { int a; } foo();
              int * bar();
              int * x() {
                struct { int a; } a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_96117430044140536055.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_96117430044140536055.c:4:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_96117430044140536055.c:6:41: error: invalid operands to binary + (have 'struct <anonymous>' and 'int *')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_96117430044140536055.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct { int a; } foo();
              int * bar();
              struct { int a; } x() {
                struct { int a; } a = foo();
                int * b = bar();
                struct { int a; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_91270372732269405767.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_91270372732269405767.c:3:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_91270372732269405767.c:4:24: error: invalid initializer
                 struct { int a; } b = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_91270372732269405767.c:5:29: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 int * c = a + b;
                             ^

        */
        error("""
              struct { int a; } foo();
              int * x() {
                struct { int a; } a = foo();
                struct { int a; } b = foo();
                int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf16_10() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_103116136025159466237.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_103116136025159466237.c:4:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_103116136025159466237.c:6:30: error: invalid operands to binary + (have 'struct <anonymous>' and 'int **')
                 int ** c = a + b;
                              ^

        */
        error("""
              struct { int a; } foo();
              int ** bar();
              int ** x() {
                struct { int a; } a = foo();
                int ** b = bar();
                int ** c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_105372356459110186770.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_105372356459110186770.c:4:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_105372356459110186770.c:6:41: error: invalid operands to binary + (have 'struct <anonymous>' and 'int **')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_105372356459110186770.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct { int a; } foo();
              int ** bar();
              struct { int a; } x() {
                struct { int a; } a = foo();
                int ** b = bar();
                struct { int a; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_10412760739856673363.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_10412760739856673363.c:3:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_10412760739856673363.c:4:24: error: invalid initializer
                 struct { int a; } b = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_10412760739856673363.c:5:30: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 int ** c = a + b;
                              ^

        */
        error("""
              struct { int a; } foo();
              int ** x() {
                struct { int a; } a = foo();
                struct { int a; } b = foo();
                int ** c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf16_11() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_115774654432118308758.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_115774654432118308758.c:4:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_115774654432118308758.c:6:30: error: invalid operands to binary + (have 'struct <anonymous>' and 'char *')
                 char * c = a + b;
                              ^

        */
        error("""
              struct { int a; } foo();
              char * bar();
              char * x() {
                struct { int a; } a = foo();
                char * b = bar();
                char * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_113052028884090252685.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_113052028884090252685.c:4:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_113052028884090252685.c:6:41: error: invalid operands to binary + (have 'struct <anonymous>' and 'char *')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_113052028884090252685.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct { int a; } foo();
              char * bar();
              struct { int a; } x() {
                struct { int a; } a = foo();
                char * b = bar();
                struct { int a; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_111424251223899042876.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_111424251223899042876.c:3:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_111424251223899042876.c:4:24: error: invalid initializer
                 struct { int a; } b = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_111424251223899042876.c:5:30: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 char * c = a + b;
                              ^

        */
        error("""
              struct { int a; } foo();
              char * x() {
                struct { int a; } a = foo();
                struct { int a; } b = foo();
                char * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf16_12() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_122882816698907823560.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_122882816698907823560.c:4:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_122882816698907823560.c:6:32: error: invalid operands to binary + (have 'struct <anonymous>' and 'double *')
                 double * c = a + b;
                                ^

        */
        error("""
              struct { int a; } foo();
              double * bar();
              double * x() {
                struct { int a; } a = foo();
                double * b = bar();
                double * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_126007061976466231405.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_126007061976466231405.c:4:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_126007061976466231405.c:6:41: error: invalid operands to binary + (have 'struct <anonymous>' and 'double *')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_126007061976466231405.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct { int a; } foo();
              double * bar();
              struct { int a; } x() {
                struct { int a; } a = foo();
                double * b = bar();
                struct { int a; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_122718386767637751893.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_122718386767637751893.c:3:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_122718386767637751893.c:4:24: error: invalid initializer
                 struct { int a; } b = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_122718386767637751893.c:5:32: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 double * c = a + b;
                                ^

        */
        error("""
              struct { int a; } foo();
              double * x() {
                struct { int a; } a = foo();
                struct { int a; } b = foo();
                double * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf16_13() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_137074114898426080922.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_137074114898426080922.c:6:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_137074114898426080922.c:8:32: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct S')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              struct { int a; } foo();
              struct S bar();
              struct S x() {
                struct { int a; } a = foo();
                struct S b = bar();
                struct S c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_133731202861992787354.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_133731202861992787354.c:6:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_133731202861992787354.c:8:41: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct S')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_133731202861992787354.c:9:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct S { int x; int y; };

              struct { int a; } foo();
              struct S bar();
              struct { int a; } x() {
                struct { int a; } a = foo();
                struct S b = bar();
                struct { int a; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_1387885163362431154.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_1387885163362431154.c:5:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_1387885163362431154.c:6:24: error: invalid initializer
                 struct { int a; } b = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_1387885163362431154.c:7:32: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              struct { int a; } foo();
              struct S x() {
                struct { int a; } a = foo();
                struct { int a; } b = foo();
                struct S c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf16_14() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_146233666223479194774.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_146233666223479194774.c:6:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_146233666223479194774.c:8:32: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct T')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct { int a; } foo();
              struct T bar();
              struct T x() {
                struct { int a; } a = foo();
                struct T b = bar();
                struct T c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_144087365296882751090.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_144087365296882751090.c:6:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_144087365296882751090.c:8:41: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct T')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_144087365296882751090.c:9:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct { int a; } foo();
              struct T bar();
              struct { int a; } x() {
                struct { int a; } a = foo();
                struct T b = bar();
                struct { int a; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_145179356003620723461.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_145179356003620723461.c:5:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_145179356003620723461.c:6:24: error: invalid initializer
                 struct { int a; } b = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_145179356003620723461.c:7:32: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct { int a; } foo();
              struct T x() {
                struct { int a; } a = foo();
                struct { int a; } b = foo();
                struct T c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf16_15() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_156037217832995786820.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_156037217832995786820.c:6:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_156037217832995786820.c:8:40: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct_anonymous')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct { int a; } foo();
              struct_anonymous bar();
              struct_anonymous x() {
                struct { int a; } a = foo();
                struct_anonymous b = bar();
                struct_anonymous c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_152615933423536755381.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_152615933423536755381.c:6:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_152615933423536755381.c:8:41: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct_anonymous')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_152615933423536755381.c:9:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct { int a; } foo();
              struct_anonymous bar();
              struct { int a; } x() {
                struct { int a; } a = foo();
                struct_anonymous b = bar();
                struct { int a; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_158606714506150538326.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_158606714506150538326.c:5:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_158606714506150538326.c:6:24: error: invalid initializer
                 struct { int a; } b = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_158606714506150538326.c:7:40: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct { int a; } foo();
              struct_anonymous x() {
                struct { int a; } a = foo();
                struct { int a; } b = foo();
                struct_anonymous c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf16_16() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_16310439000007809597.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_16310439000007809597.c:4:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_16310439000007809597.c:5:24: error: invalid initializer
                 struct { int a; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_16310439000007809597.c:6:41: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_16310439000007809597.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct { int a; } foo();
              struct { int a; } bar();
              struct { int a; } x() {
                struct { int a; } a = foo();
                struct { int a; } b = bar();
                struct { int a; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_166856257327368644792.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_166856257327368644792.c:4:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_166856257327368644792.c:5:24: error: invalid initializer
                 struct { int a; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_166856257327368644792.c:6:41: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_166856257327368644792.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct { int a; } foo();
              struct { int a; } bar();
              struct { int a; } x() {
                struct { int a; } a = foo();
                struct { int a; } b = bar();
                struct { int a; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_165977301652651280677.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_165977301652651280677.c:3:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_165977301652651280677.c:4:24: error: invalid initializer
                 struct { int a; } b = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_165977301652651280677.c:5:41: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_165977301652651280677.c:6:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct { int a; } foo();
              struct { int a; } x() {
                struct { int a; } a = foo();
                struct { int a; } b = foo();
                struct { int a; } c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf16_17() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_171877625737469175547.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_171877625737469175547.c:4:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_171877625737469175547.c:5:24: error: invalid initializer
                 struct { float b; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_171877625737469175547.c:6:43: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_171877625737469175547.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct { int a; } foo();
              struct { float b; } bar();
              struct { float b; } x() {
                struct { int a; } a = foo();
                struct { float b; } b = bar();
                struct { float b; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_175841778241302986113.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_175841778241302986113.c:4:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_175841778241302986113.c:5:24: error: invalid initializer
                 struct { float b; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_175841778241302986113.c:6:41: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_175841778241302986113.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct { int a; } foo();
              struct { float b; } bar();
              struct { int a; } x() {
                struct { int a; } a = foo();
                struct { float b; } b = bar();
                struct { int a; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_176676975272528932042.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_176676975272528932042.c:3:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_176676975272528932042.c:4:24: error: invalid initializer
                 struct { int a; } b = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_176676975272528932042.c:5:43: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_176676975272528932042.c:6:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct { int a; } foo();
              struct { float b; } x() {
                struct { int a; } a = foo();
                struct { int a; } b = foo();
                struct { float b; } c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf16_18() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_185629215706102612062.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_185629215706102612062.c:4:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_185629215706102612062.c:6:36: error: invalid operands to binary + (have 'struct <anonymous>' and 'int')
                 volatile int c = a + b;
                                    ^

        */
        error("""
              struct { int a; } foo();
              volatile int bar();
              volatile int x() {
                struct { int a; } a = foo();
                volatile int b = bar();
                volatile int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_186641531830280171839.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_186641531830280171839.c:4:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_186641531830280171839.c:6:41: error: invalid operands to binary + (have 'struct <anonymous>' and 'int')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_186641531830280171839.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct { int a; } foo();
              volatile int bar();
              struct { int a; } x() {
                struct { int a; } a = foo();
                volatile int b = bar();
                struct { int a; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_187119864655907807044.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_187119864655907807044.c:3:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_187119864655907807044.c:4:24: error: invalid initializer
                 struct { int a; } b = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_187119864655907807044.c:5:36: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 volatile int c = a + b;
                                    ^

        */
        error("""
              struct { int a; } foo();
              volatile int x() {
                struct { int a; } a = foo();
                struct { int a; } b = foo();
                volatile int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf16_19() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_196540377027320957512.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_196540377027320957512.c:4:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_196540377027320957512.c:6:33: error: invalid operands to binary + (have 'struct <anonymous>' and 'int')
                 const int c = a + b;
                                 ^

        */
        error("""
              struct { int a; } foo();
              const int bar();
              const int x() {
                struct { int a; } a = foo();
                const int b = bar();
                const int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_193527990244045685426.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_193527990244045685426.c:4:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_193527990244045685426.c:6:41: error: invalid operands to binary + (have 'struct <anonymous>' and 'int')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_193527990244045685426.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct { int a; } foo();
              const int bar();
              struct { int a; } x() {
                struct { int a; } a = foo();
                const int b = bar();
                struct { int a; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_196268969609128460263.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_196268969609128460263.c:3:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_196268969609128460263.c:4:24: error: invalid initializer
                 struct { int a; } b = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_196268969609128460263.c:5:33: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 const int c = a + b;
                                 ^

        */
        error("""
              struct { int a; } foo();
              const int x() {
                struct { int a; } a = foo();
                struct { int a; } b = foo();
                const int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf16_20() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_202597868126897587422.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_202597868126897587422.c:4:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_202597868126897587422.c:6:36: error: invalid operands to binary + (have 'struct <anonymous>' and 'double')
                 const double c = a + b;
                                    ^

        */
        error("""
              struct { int a; } foo();
              const double bar();
              const double x() {
                struct { int a; } a = foo();
                const double b = bar();
                const double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_204389704475132483992.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_204389704475132483992.c:4:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_204389704475132483992.c:6:41: error: invalid operands to binary + (have 'struct <anonymous>' and 'double')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_204389704475132483992.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct { int a; } foo();
              const double bar();
              struct { int a; } x() {
                struct { int a; } a = foo();
                const double b = bar();
                struct { int a; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_204234335508483367662.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_204234335508483367662.c:3:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_204234335508483367662.c:4:24: error: invalid initializer
                 struct { int a; } b = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_204234335508483367662.c:5:36: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 const double c = a + b;
                                    ^

        */
        error("""
              struct { int a; } foo();
              const double x() {
                struct { int a; } a = foo();
                struct { int a; } b = foo();
                const double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf16_21() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_21401876739951966247.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_21401876739951966247.c:4:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_21401876739951966247.c:6:39: error: invalid operands to binary + (have 'struct <anonymous>' and 'double')
                 volatile double c = a + b;
                                       ^

        */
        error("""
              struct { int a; } foo();
              volatile double bar();
              volatile double x() {
                struct { int a; } a = foo();
                volatile double b = bar();
                volatile double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_212221294054594060172.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_212221294054594060172.c:4:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_212221294054594060172.c:6:41: error: invalid operands to binary + (have 'struct <anonymous>' and 'double')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_212221294054594060172.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct { int a; } foo();
              volatile double bar();
              struct { int a; } x() {
                struct { int a; } a = foo();
                volatile double b = bar();
                struct { int a; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_215933740411614370512.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_215933740411614370512.c:3:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_215933740411614370512.c:4:24: error: invalid initializer
                 struct { int a; } b = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_215933740411614370512.c:5:39: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 volatile double c = a + b;
                                       ^

        */
        error("""
              struct { int a; } foo();
              volatile double x() {
                struct { int a; } a = foo();
                struct { int a; } b = foo();
                volatile double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf16_22() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_226944824066473303332.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_226944824066473303332.c:4:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_226944824066473303332.c:6:29: error: invalid operands to binary + (have 'struct <anonymous>' and 'int *')
                 int * c = a + b;
                             ^

        */
        error("""
              struct { int a; } foo();
              int * bar();
              int * x() {
                struct { int a; } a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_224182188364942435399.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_224182188364942435399.c:4:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_224182188364942435399.c:6:41: error: invalid operands to binary + (have 'struct <anonymous>' and 'int *')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_224182188364942435399.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct { int a; } foo();
              int * bar();
              struct { int a; } x() {
                struct { int a; } a = foo();
                int * b = bar();
                struct { int a; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_221305315661301911955.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_221305315661301911955.c:3:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_221305315661301911955.c:4:24: error: invalid initializer
                 struct { int a; } b = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_221305315661301911955.c:5:29: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 int * c = a + b;
                             ^

        */
        error("""
              struct { int a; } foo();
              int * x() {
                struct { int a; } a = foo();
                struct { int a; } b = foo();
                int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf16_23() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_239046743607155885332.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_239046743607155885332.c:4:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_239046743607155885332.c:6:35: error: invalid operands to binary + (have 'struct <anonymous>' and 'const int *')
                 const int * c = a + b;
                                   ^

        */
        error("""
              struct { int a; } foo();
              const int * bar();
              const int * x() {
                struct { int a; } a = foo();
                const int * b = bar();
                const int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_233551864406512042137.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_233551864406512042137.c:4:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_233551864406512042137.c:6:41: error: invalid operands to binary + (have 'struct <anonymous>' and 'const int *')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_233551864406512042137.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct { int a; } foo();
              const int * bar();
              struct { int a; } x() {
                struct { int a; } a = foo();
                const int * b = bar();
                struct { int a; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_23414025798647351516.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_23414025798647351516.c:3:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_23414025798647351516.c:4:24: error: invalid initializer
                 struct { int a; } b = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_23414025798647351516.c:5:35: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 const int * c = a + b;
                                   ^

        */
        error("""
              struct { int a; } foo();
              const int * x() {
                struct { int a; } a = foo();
                struct { int a; } b = foo();
                const int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf16_24() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_244634949538538592156.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_244634949538538592156.c:4:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_244634949538538592156.c:6:38: error: invalid operands to binary + (have 'struct <anonymous>' and 'volatile int *')
                 volatile int * c = a + b;
                                      ^

        */
        error("""
              struct { int a; } foo();
              volatile int * bar();
              volatile int * x() {
                struct { int a; } a = foo();
                volatile int * b = bar();
                volatile int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_24800492554964295926.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_24800492554964295926.c:4:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_24800492554964295926.c:6:41: error: invalid operands to binary + (have 'struct <anonymous>' and 'volatile int *')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_24800492554964295926.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct { int a; } foo();
              volatile int * bar();
              struct { int a; } x() {
                struct { int a; } a = foo();
                volatile int * b = bar();
                struct { int a; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf16_241718331330179373783.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf16_241718331330179373783.c:3:24: error: invalid initializer
                 struct { int a; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_241718331330179373783.c:4:24: error: invalid initializer
                 struct { int a; } b = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf16_241718331330179373783.c:5:38: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 volatile int * c = a + b;
                                      ^

        */
        error("""
              struct { int a; } foo();
              volatile int * x() {
                struct { int a; } a = foo();
                struct { int a; } b = foo();
                volatile int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf17_0() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_02594287799228029219.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_02594287799228029219.c:4:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_02594287799228029219.c:6:28: error: invalid operands to binary + (have 'struct <anonymous>' and 'int')
                 char c = a + b;
                            ^

        */
        error("""
              struct { float b; } foo();
              char bar();
              char x() {
                struct { float b; } a = foo();
                char b = bar();
                char c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_04657164925869383905.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_04657164925869383905.c:4:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_04657164925869383905.c:6:43: error: invalid operands to binary + (have 'struct <anonymous>' and 'int')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_04657164925869383905.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct { float b; } foo();
              char bar();
              struct { float b; } x() {
                struct { float b; } a = foo();
                char b = bar();
                struct { float b; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_02993971099083133966.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_02993971099083133966.c:3:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_02993971099083133966.c:4:24: error: invalid initializer
                 struct { float b; } b = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_02993971099083133966.c:5:28: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 char c = a + b;
                            ^

        */
        error("""
              struct { float b; } foo();
              char x() {
                struct { float b; } a = foo();
                struct { float b; } b = foo();
                char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf17_1() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_12135510859654615628.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_12135510859654615628.c:4:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_12135510859654615628.c:6:35: error: invalid operands to binary + (have 'struct <anonymous>' and 'int')
                 signed char c = a + b;
                                   ^

        */
        error("""
              struct { float b; } foo();
              signed char bar();
              signed char x() {
                struct { float b; } a = foo();
                signed char b = bar();
                signed char c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_14207635862990925159.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_14207635862990925159.c:4:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_14207635862990925159.c:6:43: error: invalid operands to binary + (have 'struct <anonymous>' and 'int')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_14207635862990925159.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct { float b; } foo();
              signed char bar();
              struct { float b; } x() {
                struct { float b; } a = foo();
                signed char b = bar();
                struct { float b; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_11103796026094488957.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_11103796026094488957.c:3:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_11103796026094488957.c:4:24: error: invalid initializer
                 struct { float b; } b = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_11103796026094488957.c:5:35: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 signed char c = a + b;
                                   ^

        */
        error("""
              struct { float b; } foo();
              signed char x() {
                struct { float b; } a = foo();
                struct { float b; } b = foo();
                signed char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf17_2() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_2519777586793495731.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_2519777586793495731.c:4:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_2519777586793495731.c:6:37: error: invalid operands to binary + (have 'struct <anonymous>' and 'int')
                 unsigned char c = a + b;
                                     ^

        */
        error("""
              struct { float b; } foo();
              unsigned char bar();
              unsigned char x() {
                struct { float b; } a = foo();
                unsigned char b = bar();
                unsigned char c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_28930609903100226984.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_28930609903100226984.c:4:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_28930609903100226984.c:6:43: error: invalid operands to binary + (have 'struct <anonymous>' and 'int')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_28930609903100226984.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct { float b; } foo();
              unsigned char bar();
              struct { float b; } x() {
                struct { float b; } a = foo();
                unsigned char b = bar();
                struct { float b; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_21061725461734364818.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_21061725461734364818.c:3:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_21061725461734364818.c:4:24: error: invalid initializer
                 struct { float b; } b = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_21061725461734364818.c:5:37: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 unsigned char c = a + b;
                                     ^

        */
        error("""
              struct { float b; } foo();
              unsigned char x() {
                struct { float b; } a = foo();
                struct { float b; } b = foo();
                unsigned char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf17_3() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_35518220578996985650.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_35518220578996985650.c:4:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_35518220578996985650.c:6:36: error: invalid operands to binary + (have 'struct <anonymous>' and 'unsigned int')
                 unsigned int c = a + b;
                                    ^

        */
        error("""
              struct { float b; } foo();
              unsigned int bar();
              unsigned int x() {
                struct { float b; } a = foo();
                unsigned int b = bar();
                unsigned int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_33486351959774238656.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_33486351959774238656.c:4:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_33486351959774238656.c:6:43: error: invalid operands to binary + (have 'struct <anonymous>' and 'unsigned int')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_33486351959774238656.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct { float b; } foo();
              unsigned int bar();
              struct { float b; } x() {
                struct { float b; } a = foo();
                unsigned int b = bar();
                struct { float b; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_38048120999508597268.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_38048120999508597268.c:3:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_38048120999508597268.c:4:24: error: invalid initializer
                 struct { float b; } b = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_38048120999508597268.c:5:36: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 unsigned int c = a + b;
                                    ^

        */
        error("""
              struct { float b; } foo();
              unsigned int x() {
                struct { float b; } a = foo();
                struct { float b; } b = foo();
                unsigned int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf17_4() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_43853347733049717143.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_43853347733049717143.c:4:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_43853347733049717143.c:6:34: error: invalid operands to binary + (have 'struct <anonymous>' and 'int')
                 signed int c = a + b;
                                  ^

        */
        error("""
              struct { float b; } foo();
              signed int bar();
              signed int x() {
                struct { float b; } a = foo();
                signed int b = bar();
                signed int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_47129647305883790631.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_47129647305883790631.c:4:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_47129647305883790631.c:6:43: error: invalid operands to binary + (have 'struct <anonymous>' and 'int')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_47129647305883790631.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct { float b; } foo();
              signed int bar();
              struct { float b; } x() {
                struct { float b; } a = foo();
                signed int b = bar();
                struct { float b; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_42201321919709012268.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_42201321919709012268.c:3:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_42201321919709012268.c:4:24: error: invalid initializer
                 struct { float b; } b = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_42201321919709012268.c:5:34: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 signed int c = a + b;
                                  ^

        */
        error("""
              struct { float b; } foo();
              signed int x() {
                struct { float b; } a = foo();
                struct { float b; } b = foo();
                signed int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf17_5() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_52530380330384540903.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_52530380330384540903.c:4:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_52530380330384540903.c:6:28: error: invalid operands to binary + (have 'struct <anonymous>' and 'long int')
                 long c = a + b;
                            ^

        */
        error("""
              struct { float b; } foo();
              long bar();
              long x() {
                struct { float b; } a = foo();
                long b = bar();
                long c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_58531388282144169040.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_58531388282144169040.c:4:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_58531388282144169040.c:6:43: error: invalid operands to binary + (have 'struct <anonymous>' and 'long int')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_58531388282144169040.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct { float b; } foo();
              long bar();
              struct { float b; } x() {
                struct { float b; } a = foo();
                long b = bar();
                struct { float b; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_52506787427728469913.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_52506787427728469913.c:3:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_52506787427728469913.c:4:24: error: invalid initializer
                 struct { float b; } b = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_52506787427728469913.c:5:28: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 long c = a + b;
                            ^

        */
        error("""
              struct { float b; } foo();
              long x() {
                struct { float b; } a = foo();
                struct { float b; } b = foo();
                long c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf17_6() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_66397373009705772180.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_66397373009705772180.c:4:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_66397373009705772180.c:6:29: error: invalid operands to binary + (have 'struct <anonymous>' and 'float')
                 float c = a + b;
                             ^

        */
        error("""
              struct { float b; } foo();
              float bar();
              float x() {
                struct { float b; } a = foo();
                float b = bar();
                float c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_64520317947923919471.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_64520317947923919471.c:4:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_64520317947923919471.c:6:43: error: invalid operands to binary + (have 'struct <anonymous>' and 'float')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_64520317947923919471.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct { float b; } foo();
              float bar();
              struct { float b; } x() {
                struct { float b; } a = foo();
                float b = bar();
                struct { float b; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_68705918577751678372.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_68705918577751678372.c:3:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_68705918577751678372.c:4:24: error: invalid initializer
                 struct { float b; } b = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_68705918577751678372.c:5:29: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 float c = a + b;
                             ^

        */
        error("""
              struct { float b; } foo();
              float x() {
                struct { float b; } a = foo();
                struct { float b; } b = foo();
                float c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf17_7() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_79219370577984877736.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_79219370577984877736.c:4:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_79219370577984877736.c:6:30: error: invalid operands to binary + (have 'struct <anonymous>' and 'double')
                 double c = a + b;
                              ^

        */
        error("""
              struct { float b; } foo();
              double bar();
              double x() {
                struct { float b; } a = foo();
                double b = bar();
                double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_75247539076600141318.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_75247539076600141318.c:4:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_75247539076600141318.c:6:43: error: invalid operands to binary + (have 'struct <anonymous>' and 'double')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_75247539076600141318.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct { float b; } foo();
              double bar();
              struct { float b; } x() {
                struct { float b; } a = foo();
                double b = bar();
                struct { float b; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_75291355228623475371.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_75291355228623475371.c:3:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_75291355228623475371.c:4:24: error: invalid initializer
                 struct { float b; } b = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_75291355228623475371.c:5:30: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 double c = a + b;
                              ^

        */
        error("""
              struct { float b; } foo();
              double x() {
                struct { float b; } a = foo();
                struct { float b; } b = foo();
                double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf17_8() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_87934854794310630448.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_87934854794310630448.c:4:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_87934854794310630448.c:6:35: error: invalid operands to binary + (have 'struct <anonymous>' and 'long double')
                 long double c = a + b;
                                   ^

        */
        error("""
              struct { float b; } foo();
              long double bar();
              long double x() {
                struct { float b; } a = foo();
                long double b = bar();
                long double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_86557736640397367894.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_86557736640397367894.c:4:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_86557736640397367894.c:6:43: error: invalid operands to binary + (have 'struct <anonymous>' and 'long double')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_86557736640397367894.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct { float b; } foo();
              long double bar();
              struct { float b; } x() {
                struct { float b; } a = foo();
                long double b = bar();
                struct { float b; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_88404907454475977238.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_88404907454475977238.c:3:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_88404907454475977238.c:4:24: error: invalid initializer
                 struct { float b; } b = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_88404907454475977238.c:5:35: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 long double c = a + b;
                                   ^

        */
        error("""
              struct { float b; } foo();
              long double x() {
                struct { float b; } a = foo();
                struct { float b; } b = foo();
                long double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf17_9() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_98233894024994623181.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_98233894024994623181.c:4:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_98233894024994623181.c:6:29: error: invalid operands to binary + (have 'struct <anonymous>' and 'int *')
                 int * c = a + b;
                             ^

        */
        error("""
              struct { float b; } foo();
              int * bar();
              int * x() {
                struct { float b; } a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_94003614849759237107.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_94003614849759237107.c:4:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_94003614849759237107.c:6:43: error: invalid operands to binary + (have 'struct <anonymous>' and 'int *')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_94003614849759237107.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct { float b; } foo();
              int * bar();
              struct { float b; } x() {
                struct { float b; } a = foo();
                int * b = bar();
                struct { float b; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_98100638369972048003.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_98100638369972048003.c:3:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_98100638369972048003.c:4:24: error: invalid initializer
                 struct { float b; } b = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_98100638369972048003.c:5:29: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 int * c = a + b;
                             ^

        */
        error("""
              struct { float b; } foo();
              int * x() {
                struct { float b; } a = foo();
                struct { float b; } b = foo();
                int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf17_10() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_101149865033942984891.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_101149865033942984891.c:4:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_101149865033942984891.c:6:30: error: invalid operands to binary + (have 'struct <anonymous>' and 'int **')
                 int ** c = a + b;
                              ^

        */
        error("""
              struct { float b; } foo();
              int ** bar();
              int ** x() {
                struct { float b; } a = foo();
                int ** b = bar();
                int ** c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_107318430127816257350.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_107318430127816257350.c:4:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_107318430127816257350.c:6:43: error: invalid operands to binary + (have 'struct <anonymous>' and 'int **')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_107318430127816257350.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct { float b; } foo();
              int ** bar();
              struct { float b; } x() {
                struct { float b; } a = foo();
                int ** b = bar();
                struct { float b; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_106230292819250245014.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_106230292819250245014.c:3:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_106230292819250245014.c:4:24: error: invalid initializer
                 struct { float b; } b = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_106230292819250245014.c:5:30: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 int ** c = a + b;
                              ^

        */
        error("""
              struct { float b; } foo();
              int ** x() {
                struct { float b; } a = foo();
                struct { float b; } b = foo();
                int ** c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf17_11() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_113634324047963337444.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_113634324047963337444.c:4:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_113634324047963337444.c:6:30: error: invalid operands to binary + (have 'struct <anonymous>' and 'char *')
                 char * c = a + b;
                              ^

        */
        error("""
              struct { float b; } foo();
              char * bar();
              char * x() {
                struct { float b; } a = foo();
                char * b = bar();
                char * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_113155753776986273847.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_113155753776986273847.c:4:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_113155753776986273847.c:6:43: error: invalid operands to binary + (have 'struct <anonymous>' and 'char *')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_113155753776986273847.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct { float b; } foo();
              char * bar();
              struct { float b; } x() {
                struct { float b; } a = foo();
                char * b = bar();
                struct { float b; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_119123026470798014120.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_119123026470798014120.c:3:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_119123026470798014120.c:4:24: error: invalid initializer
                 struct { float b; } b = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_119123026470798014120.c:5:30: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 char * c = a + b;
                              ^

        */
        error("""
              struct { float b; } foo();
              char * x() {
                struct { float b; } a = foo();
                struct { float b; } b = foo();
                char * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf17_12() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_121028943182404936916.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_121028943182404936916.c:4:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_121028943182404936916.c:6:32: error: invalid operands to binary + (have 'struct <anonymous>' and 'double *')
                 double * c = a + b;
                                ^

        */
        error("""
              struct { float b; } foo();
              double * bar();
              double * x() {
                struct { float b; } a = foo();
                double * b = bar();
                double * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_126658731255256894555.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_126658731255256894555.c:4:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_126658731255256894555.c:6:43: error: invalid operands to binary + (have 'struct <anonymous>' and 'double *')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_126658731255256894555.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct { float b; } foo();
              double * bar();
              struct { float b; } x() {
                struct { float b; } a = foo();
                double * b = bar();
                struct { float b; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_123034693384622566289.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_123034693384622566289.c:3:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_123034693384622566289.c:4:24: error: invalid initializer
                 struct { float b; } b = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_123034693384622566289.c:5:32: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 double * c = a + b;
                                ^

        */
        error("""
              struct { float b; } foo();
              double * x() {
                struct { float b; } a = foo();
                struct { float b; } b = foo();
                double * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf17_13() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_137230289684545778970.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_137230289684545778970.c:6:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_137230289684545778970.c:8:32: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct S')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              struct { float b; } foo();
              struct S bar();
              struct S x() {
                struct { float b; } a = foo();
                struct S b = bar();
                struct S c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_132828913945092504405.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_132828913945092504405.c:6:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_132828913945092504405.c:8:43: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct S')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_132828913945092504405.c:9:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct S { int x; int y; };

              struct { float b; } foo();
              struct S bar();
              struct { float b; } x() {
                struct { float b; } a = foo();
                struct S b = bar();
                struct { float b; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_13829651163996934322.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_13829651163996934322.c:5:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_13829651163996934322.c:6:24: error: invalid initializer
                 struct { float b; } b = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_13829651163996934322.c:7:32: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              struct { float b; } foo();
              struct S x() {
                struct { float b; } a = foo();
                struct { float b; } b = foo();
                struct S c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf17_14() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_144553323931391359159.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_144553323931391359159.c:6:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_144553323931391359159.c:8:32: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct T')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct { float b; } foo();
              struct T bar();
              struct T x() {
                struct { float b; } a = foo();
                struct T b = bar();
                struct T c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_147279179267165605935.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_147279179267165605935.c:6:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_147279179267165605935.c:8:43: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct T')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_147279179267165605935.c:9:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct { float b; } foo();
              struct T bar();
              struct { float b; } x() {
                struct { float b; } a = foo();
                struct T b = bar();
                struct { float b; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_142953772578275716604.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_142953772578275716604.c:5:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_142953772578275716604.c:6:24: error: invalid initializer
                 struct { float b; } b = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_142953772578275716604.c:7:32: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              struct { float b; } foo();
              struct T x() {
                struct { float b; } a = foo();
                struct { float b; } b = foo();
                struct T c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf17_15() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_155640520195172305122.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_155640520195172305122.c:6:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_155640520195172305122.c:8:40: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct_anonymous')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct { float b; } foo();
              struct_anonymous bar();
              struct_anonymous x() {
                struct { float b; } a = foo();
                struct_anonymous b = bar();
                struct_anonymous c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_155114368971459676136.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_155114368971459676136.c:6:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_155114368971459676136.c:8:43: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct_anonymous')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_155114368971459676136.c:9:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct { float b; } foo();
              struct_anonymous bar();
              struct { float b; } x() {
                struct { float b; } a = foo();
                struct_anonymous b = bar();
                struct { float b; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_15133813931066006309.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_15133813931066006309.c:5:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_15133813931066006309.c:6:24: error: invalid initializer
                 struct { float b; } b = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_15133813931066006309.c:7:40: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              struct { float b; } foo();
              struct_anonymous x() {
                struct { float b; } a = foo();
                struct { float b; } b = foo();
                struct_anonymous c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf17_16() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_166295754839449234970.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_166295754839449234970.c:4:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_166295754839449234970.c:5:24: error: invalid initializer
                 struct { int a; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_166295754839449234970.c:6:41: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_166295754839449234970.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct { float b; } foo();
              struct { int a; } bar();
              struct { int a; } x() {
                struct { float b; } a = foo();
                struct { int a; } b = bar();
                struct { int a; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_166296074169505129933.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_166296074169505129933.c:4:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_166296074169505129933.c:5:24: error: invalid initializer
                 struct { int a; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_166296074169505129933.c:6:43: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_166296074169505129933.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct { float b; } foo();
              struct { int a; } bar();
              struct { float b; } x() {
                struct { float b; } a = foo();
                struct { int a; } b = bar();
                struct { float b; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_16307326514789059829.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_16307326514789059829.c:3:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_16307326514789059829.c:4:24: error: invalid initializer
                 struct { float b; } b = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_16307326514789059829.c:5:41: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_16307326514789059829.c:6:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct { float b; } foo();
              struct { int a; } x() {
                struct { float b; } a = foo();
                struct { float b; } b = foo();
                struct { int a; } c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf17_17() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_178844940585047581748.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_178844940585047581748.c:4:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_178844940585047581748.c:5:24: error: invalid initializer
                 struct { float b; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_178844940585047581748.c:6:43: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_178844940585047581748.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct { float b; } foo();
              struct { float b; } bar();
              struct { float b; } x() {
                struct { float b; } a = foo();
                struct { float b; } b = bar();
                struct { float b; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_172151603044843076435.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_172151603044843076435.c:4:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_172151603044843076435.c:5:24: error: invalid initializer
                 struct { float b; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_172151603044843076435.c:6:43: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_172151603044843076435.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct { float b; } foo();
              struct { float b; } bar();
              struct { float b; } x() {
                struct { float b; } a = foo();
                struct { float b; } b = bar();
                struct { float b; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_177289903192419168763.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_177289903192419168763.c:3:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_177289903192419168763.c:4:24: error: invalid initializer
                 struct { float b; } b = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_177289903192419168763.c:5:43: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_177289903192419168763.c:6:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct { float b; } foo();
              struct { float b; } x() {
                struct { float b; } a = foo();
                struct { float b; } b = foo();
                struct { float b; } c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf17_18() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_188782200160792011508.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_188782200160792011508.c:4:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_188782200160792011508.c:6:36: error: invalid operands to binary + (have 'struct <anonymous>' and 'int')
                 volatile int c = a + b;
                                    ^

        */
        error("""
              struct { float b; } foo();
              volatile int bar();
              volatile int x() {
                struct { float b; } a = foo();
                volatile int b = bar();
                volatile int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_187507596485158129879.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_187507596485158129879.c:4:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_187507596485158129879.c:6:43: error: invalid operands to binary + (have 'struct <anonymous>' and 'int')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_187507596485158129879.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct { float b; } foo();
              volatile int bar();
              struct { float b; } x() {
                struct { float b; } a = foo();
                volatile int b = bar();
                struct { float b; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_18154332493688147769.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_18154332493688147769.c:3:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_18154332493688147769.c:4:24: error: invalid initializer
                 struct { float b; } b = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_18154332493688147769.c:5:36: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 volatile int c = a + b;
                                    ^

        */
        error("""
              struct { float b; } foo();
              volatile int x() {
                struct { float b; } a = foo();
                struct { float b; } b = foo();
                volatile int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf17_19() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_192802364971173192669.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_192802364971173192669.c:4:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_192802364971173192669.c:6:33: error: invalid operands to binary + (have 'struct <anonymous>' and 'int')
                 const int c = a + b;
                                 ^

        */
        error("""
              struct { float b; } foo();
              const int bar();
              const int x() {
                struct { float b; } a = foo();
                const int b = bar();
                const int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_192947096502383380732.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_192947096502383380732.c:4:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_192947096502383380732.c:6:43: error: invalid operands to binary + (have 'struct <anonymous>' and 'int')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_192947096502383380732.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct { float b; } foo();
              const int bar();
              struct { float b; } x() {
                struct { float b; } a = foo();
                const int b = bar();
                struct { float b; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_193908005991538050420.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_193908005991538050420.c:3:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_193908005991538050420.c:4:24: error: invalid initializer
                 struct { float b; } b = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_193908005991538050420.c:5:33: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 const int c = a + b;
                                 ^

        */
        error("""
              struct { float b; } foo();
              const int x() {
                struct { float b; } a = foo();
                struct { float b; } b = foo();
                const int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf17_20() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_206056572413243157819.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_206056572413243157819.c:4:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_206056572413243157819.c:6:36: error: invalid operands to binary + (have 'struct <anonymous>' and 'double')
                 const double c = a + b;
                                    ^

        */
        error("""
              struct { float b; } foo();
              const double bar();
              const double x() {
                struct { float b; } a = foo();
                const double b = bar();
                const double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_203055829291756637925.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_203055829291756637925.c:4:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_203055829291756637925.c:6:43: error: invalid operands to binary + (have 'struct <anonymous>' and 'double')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_203055829291756637925.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct { float b; } foo();
              const double bar();
              struct { float b; } x() {
                struct { float b; } a = foo();
                const double b = bar();
                struct { float b; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_203473310436610174523.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_203473310436610174523.c:3:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_203473310436610174523.c:4:24: error: invalid initializer
                 struct { float b; } b = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_203473310436610174523.c:5:36: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 const double c = a + b;
                                    ^

        */
        error("""
              struct { float b; } foo();
              const double x() {
                struct { float b; } a = foo();
                struct { float b; } b = foo();
                const double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf17_21() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_213702108668229350488.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_213702108668229350488.c:4:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_213702108668229350488.c:6:39: error: invalid operands to binary + (have 'struct <anonymous>' and 'double')
                 volatile double c = a + b;
                                       ^

        */
        error("""
              struct { float b; } foo();
              volatile double bar();
              volatile double x() {
                struct { float b; } a = foo();
                volatile double b = bar();
                volatile double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_213766545117681677774.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_213766545117681677774.c:4:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_213766545117681677774.c:6:43: error: invalid operands to binary + (have 'struct <anonymous>' and 'double')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_213766545117681677774.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct { float b; } foo();
              volatile double bar();
              struct { float b; } x() {
                struct { float b; } a = foo();
                volatile double b = bar();
                struct { float b; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_212103231399814469104.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_212103231399814469104.c:3:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_212103231399814469104.c:4:24: error: invalid initializer
                 struct { float b; } b = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_212103231399814469104.c:5:39: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 volatile double c = a + b;
                                       ^

        */
        error("""
              struct { float b; } foo();
              volatile double x() {
                struct { float b; } a = foo();
                struct { float b; } b = foo();
                volatile double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf17_22() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_228012798229096064913.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_228012798229096064913.c:4:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_228012798229096064913.c:6:29: error: invalid operands to binary + (have 'struct <anonymous>' and 'int *')
                 int * c = a + b;
                             ^

        */
        error("""
              struct { float b; } foo();
              int * bar();
              int * x() {
                struct { float b; } a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_221312678033149606310.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_221312678033149606310.c:4:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_221312678033149606310.c:6:43: error: invalid operands to binary + (have 'struct <anonymous>' and 'int *')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_221312678033149606310.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct { float b; } foo();
              int * bar();
              struct { float b; } x() {
                struct { float b; } a = foo();
                int * b = bar();
                struct { float b; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_225619117986749873892.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_225619117986749873892.c:3:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_225619117986749873892.c:4:24: error: invalid initializer
                 struct { float b; } b = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_225619117986749873892.c:5:29: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 int * c = a + b;
                             ^

        */
        error("""
              struct { float b; } foo();
              int * x() {
                struct { float b; } a = foo();
                struct { float b; } b = foo();
                int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf17_23() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_236765207778765395386.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_236765207778765395386.c:4:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_236765207778765395386.c:6:35: error: invalid operands to binary + (have 'struct <anonymous>' and 'const int *')
                 const int * c = a + b;
                                   ^

        */
        error("""
              struct { float b; } foo();
              const int * bar();
              const int * x() {
                struct { float b; } a = foo();
                const int * b = bar();
                const int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_236418235278205569278.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_236418235278205569278.c:4:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_236418235278205569278.c:6:43: error: invalid operands to binary + (have 'struct <anonymous>' and 'const int *')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_236418235278205569278.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct { float b; } foo();
              const int * bar();
              struct { float b; } x() {
                struct { float b; } a = foo();
                const int * b = bar();
                struct { float b; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_239198089422174860984.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_239198089422174860984.c:3:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_239198089422174860984.c:4:24: error: invalid initializer
                 struct { float b; } b = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_239198089422174860984.c:5:35: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 const int * c = a + b;
                                   ^

        */
        error("""
              struct { float b; } foo();
              const int * x() {
                struct { float b; } a = foo();
                struct { float b; } b = foo();
                const int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf17_24() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_247324067232445975421.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_247324067232445975421.c:4:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_247324067232445975421.c:6:38: error: invalid operands to binary + (have 'struct <anonymous>' and 'volatile int *')
                 volatile int * c = a + b;
                                      ^

        */
        error("""
              struct { float b; } foo();
              volatile int * bar();
              volatile int * x() {
                struct { float b; } a = foo();
                volatile int * b = bar();
                volatile int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_24575914281836498648.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_24575914281836498648.c:4:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_24575914281836498648.c:6:43: error: invalid operands to binary + (have 'struct <anonymous>' and 'volatile int *')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_24575914281836498648.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              struct { float b; } foo();
              volatile int * bar();
              struct { float b; } x() {
                struct { float b; } a = foo();
                volatile int * b = bar();
                struct { float b; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf17_247782754546297854849.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf17_247782754546297854849.c:3:24: error: invalid initializer
                 struct { float b; } a = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_247782754546297854849.c:4:24: error: invalid initializer
                 struct { float b; } b = foo();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf17_247782754546297854849.c:5:38: error: invalid operands to binary + (have 'struct <anonymous>' and 'struct <anonymous>')
                 volatile int * c = a + b;
                                      ^

        */
        error("""
              struct { float b; } foo();
              volatile int * x() {
                struct { float b; } a = foo();
                struct { float b; } b = foo();
                volatile int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf18_0() {
        correct("""
              volatile int foo();
              char bar();
              char x() {
                volatile int a = foo();
                char b = bar();
                char c = a + b;
                return c;
              }
                """)
        correct("""
              volatile int foo();
              char bar();
              volatile int x() {
                volatile int a = foo();
                char b = bar();
                volatile int c = a + b;
                return c;
              }
                """)
        correct("""
              volatile int foo();
              char x() {
                volatile int a = foo();
                volatile int b = foo();
                char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf18_1() {
        correct("""
              volatile int foo();
              signed char bar();
              signed char x() {
                volatile int a = foo();
                signed char b = bar();
                signed char c = a + b;
                return c;
              }
                """)
        correct("""
              volatile int foo();
              signed char bar();
              volatile int x() {
                volatile int a = foo();
                signed char b = bar();
                volatile int c = a + b;
                return c;
              }
                """)
        correct("""
              volatile int foo();
              signed char x() {
                volatile int a = foo();
                volatile int b = foo();
                signed char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf18_2() {
        correct("""
              volatile int foo();
              unsigned char bar();
              unsigned char x() {
                volatile int a = foo();
                unsigned char b = bar();
                unsigned char c = a + b;
                return c;
              }
                """)
        correct("""
              volatile int foo();
              unsigned char bar();
              volatile int x() {
                volatile int a = foo();
                unsigned char b = bar();
                volatile int c = a + b;
                return c;
              }
                """)
        correct("""
              volatile int foo();
              unsigned char x() {
                volatile int a = foo();
                volatile int b = foo();
                unsigned char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf18_3() {
        correct("""
              volatile int foo();
              unsigned int bar();
              unsigned int x() {
                volatile int a = foo();
                unsigned int b = bar();
                unsigned int c = a + b;
                return c;
              }
                """)
        correct("""
              volatile int foo();
              unsigned int bar();
              volatile int x() {
                volatile int a = foo();
                unsigned int b = bar();
                volatile int c = a + b;
                return c;
              }
                """)
        correct("""
              volatile int foo();
              unsigned int x() {
                volatile int a = foo();
                volatile int b = foo();
                unsigned int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf18_4() {
        correct("""
              volatile int foo();
              signed int bar();
              signed int x() {
                volatile int a = foo();
                signed int b = bar();
                signed int c = a + b;
                return c;
              }
                """)
        correct("""
              volatile int foo();
              signed int bar();
              volatile int x() {
                volatile int a = foo();
                signed int b = bar();
                volatile int c = a + b;
                return c;
              }
                """)
        correct("""
              volatile int foo();
              signed int x() {
                volatile int a = foo();
                volatile int b = foo();
                signed int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf18_5() {
        correct("""
              volatile int foo();
              long bar();
              long x() {
                volatile int a = foo();
                long b = bar();
                long c = a + b;
                return c;
              }
                """)
        correct("""
              volatile int foo();
              long bar();
              volatile int x() {
                volatile int a = foo();
                long b = bar();
                volatile int c = a + b;
                return c;
              }
                """)
        correct("""
              volatile int foo();
              long x() {
                volatile int a = foo();
                volatile int b = foo();
                long c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf18_6() {
        correct("""
              volatile int foo();
              float bar();
              float x() {
                volatile int a = foo();
                float b = bar();
                float c = a + b;
                return c;
              }
                """)
        correct("""
              volatile int foo();
              float bar();
              volatile int x() {
                volatile int a = foo();
                float b = bar();
                volatile int c = a + b;
                return c;
              }
                """)
        correct("""
              volatile int foo();
              float x() {
                volatile int a = foo();
                volatile int b = foo();
                float c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf18_7() {
        correct("""
              volatile int foo();
              double bar();
              double x() {
                volatile int a = foo();
                double b = bar();
                double c = a + b;
                return c;
              }
                """)
        correct("""
              volatile int foo();
              double bar();
              volatile int x() {
                volatile int a = foo();
                double b = bar();
                volatile int c = a + b;
                return c;
              }
                """)
        correct("""
              volatile int foo();
              double x() {
                volatile int a = foo();
                volatile int b = foo();
                double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf18_8() {
        correct("""
              volatile int foo();
              long double bar();
              long double x() {
                volatile int a = foo();
                long double b = bar();
                long double c = a + b;
                return c;
              }
                """)
        correct("""
              volatile int foo();
              long double bar();
              volatile int x() {
                volatile int a = foo();
                long double b = bar();
                volatile int c = a + b;
                return c;
              }
                """)
        correct("""
              volatile int foo();
              long double x() {
                volatile int a = foo();
                volatile int b = foo();
                long double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf18_9() {
        correct("""
              volatile int foo();
              int * bar();
              int * x() {
                volatile int a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf18_94641396637079782331.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf18_94641396637079782331.c:6:34: warning: initialization makes integer from pointer without a cast
                 volatile int c = a + b;
                                  ^

        */
        warning("""
              volatile int foo();
              int * bar();
              volatile int x() {
                volatile int a = foo();
                int * b = bar();
                volatile int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf18_92658817208271806607.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf18_92658817208271806607.c:5:27: warning: initialization makes pointer from integer without a cast
                 int * c = a + b;
                           ^

        */
        warning("""
              volatile int foo();
              int * x() {
                volatile int a = foo();
                volatile int b = foo();
                int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf18_10() {
        correct("""
              volatile int foo();
              int ** bar();
              int ** x() {
                volatile int a = foo();
                int ** b = bar();
                int ** c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf18_101209798863426833230.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf18_101209798863426833230.c:6:34: warning: initialization makes integer from pointer without a cast
                 volatile int c = a + b;
                                  ^

        */
        warning("""
              volatile int foo();
              int ** bar();
              volatile int x() {
                volatile int a = foo();
                int ** b = bar();
                volatile int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf18_109037509075464496577.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf18_109037509075464496577.c:5:28: warning: initialization makes pointer from integer without a cast
                 int ** c = a + b;
                            ^

        */
        warning("""
              volatile int foo();
              int ** x() {
                volatile int a = foo();
                volatile int b = foo();
                int ** c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf18_11() {
        correct("""
              volatile int foo();
              char * bar();
              char * x() {
                volatile int a = foo();
                char * b = bar();
                char * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf18_118753106692053052832.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf18_118753106692053052832.c:6:34: warning: initialization makes integer from pointer without a cast
                 volatile int c = a + b;
                                  ^

        */
        warning("""
              volatile int foo();
              char * bar();
              volatile int x() {
                volatile int a = foo();
                char * b = bar();
                volatile int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf18_113196756341508107863.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf18_113196756341508107863.c:5:28: warning: initialization makes pointer from integer without a cast
                 char * c = a + b;
                            ^

        */
        warning("""
              volatile int foo();
              char * x() {
                volatile int a = foo();
                volatile int b = foo();
                char * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf18_12() {
        correct("""
              volatile int foo();
              double * bar();
              double * x() {
                volatile int a = foo();
                double * b = bar();
                double * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf18_121220029571280968849.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf18_121220029571280968849.c:6:34: warning: initialization makes integer from pointer without a cast
                 volatile int c = a + b;
                                  ^

        */
        warning("""
              volatile int foo();
              double * bar();
              volatile int x() {
                volatile int a = foo();
                double * b = bar();
                volatile int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf18_124829868668552060310.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf18_124829868668552060310.c:5:30: warning: initialization makes pointer from integer without a cast
                 double * c = a + b;
                              ^

        */
        warning("""
              volatile int foo();
              double * x() {
                volatile int a = foo();
                volatile int b = foo();
                double * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf18_13() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf18_135600927231898762912.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf18_135600927231898762912.c:8:32: error: invalid operands to binary + (have 'int' and 'struct S')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              volatile int foo();
              struct S bar();
              struct S x() {
                volatile int a = foo();
                struct S b = bar();
                struct S c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf18_136778689787320785095.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf18_136778689787320785095.c:8:36: error: invalid operands to binary + (have 'int' and 'struct S')
                 volatile int c = a + b;
                                    ^

        */
        error("""
              struct S { int x; int y; };

              volatile int foo();
              struct S bar();
              volatile int x() {
                volatile int a = foo();
                struct S b = bar();
                volatile int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf18_132792260245005636023.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf18_132792260245005636023.c:7:24: error: invalid initializer
                 struct S c = a + b;
                        ^

        */
        error("""
              struct S { int x; int y; };

              volatile int foo();
              struct S x() {
                volatile int a = foo();
                volatile int b = foo();
                struct S c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf18_14() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf18_141632260494500833340.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf18_141632260494500833340.c:8:32: error: invalid operands to binary + (have 'int' and 'struct T')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              volatile int foo();
              struct T bar();
              struct T x() {
                volatile int a = foo();
                struct T b = bar();
                struct T c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf18_146326756172463784670.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf18_146326756172463784670.c:8:36: error: invalid operands to binary + (have 'int' and 'struct T')
                 volatile int c = a + b;
                                    ^

        */
        error("""
              struct T { int x; int y; int z; };

              volatile int foo();
              struct T bar();
              volatile int x() {
                volatile int a = foo();
                struct T b = bar();
                volatile int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf18_143522457778815258454.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf18_143522457778815258454.c:7:24: error: invalid initializer
                 struct T c = a + b;
                        ^

        */
        error("""
              struct T { int x; int y; int z; };

              volatile int foo();
              struct T x() {
                volatile int a = foo();
                volatile int b = foo();
                struct T c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf18_15() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf18_15404585916267267115.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf18_15404585916267267115.c:8:40: error: invalid operands to binary + (have 'int' and 'struct_anonymous')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              volatile int foo();
              struct_anonymous bar();
              struct_anonymous x() {
                volatile int a = foo();
                struct_anonymous b = bar();
                struct_anonymous c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf18_156579221337323290323.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf18_156579221337323290323.c:8:36: error: invalid operands to binary + (have 'int' and 'struct_anonymous')
                 volatile int c = a + b;
                                    ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              volatile int foo();
              struct_anonymous bar();
              volatile int x() {
                volatile int a = foo();
                struct_anonymous b = bar();
                volatile int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf18_158916699006229526924.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf18_158916699006229526924.c:7:17: error: invalid initializer
                 struct_anonymous c = a + b;
                 ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              volatile int foo();
              struct_anonymous x() {
                volatile int a = foo();
                volatile int b = foo();
                struct_anonymous c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf18_16() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf18_166358108040470301099.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf18_166358108040470301099.c:5:24: error: invalid initializer
                 struct { int a; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf18_166358108040470301099.c:6:41: error: invalid operands to binary + (have 'int' and 'struct <anonymous>')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf18_166358108040470301099.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              volatile int foo();
              struct { int a; } bar();
              struct { int a; } x() {
                volatile int a = foo();
                struct { int a; } b = bar();
                struct { int a; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf18_163831949849205584075.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf18_163831949849205584075.c:5:24: error: invalid initializer
                 struct { int a; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf18_163831949849205584075.c:6:36: error: invalid operands to binary + (have 'int' and 'struct <anonymous>')
                 volatile int c = a + b;
                                    ^

        */
        error("""
              volatile int foo();
              struct { int a; } bar();
              volatile int x() {
                volatile int a = foo();
                struct { int a; } b = bar();
                volatile int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf18_16700444131155233472.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf18_16700444131155233472.c:5:24: error: invalid initializer
                 struct { int a; } c = a + b;
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf18_16700444131155233472.c:6:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              volatile int foo();
              struct { int a; } x() {
                volatile int a = foo();
                volatile int b = foo();
                struct { int a; } c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf18_17() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf18_176134313877359757696.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf18_176134313877359757696.c:5:24: error: invalid initializer
                 struct { float b; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf18_176134313877359757696.c:6:43: error: invalid operands to binary + (have 'int' and 'struct <anonymous>')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf18_176134313877359757696.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              volatile int foo();
              struct { float b; } bar();
              struct { float b; } x() {
                volatile int a = foo();
                struct { float b; } b = bar();
                struct { float b; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf18_173671449530570965831.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf18_173671449530570965831.c:5:24: error: invalid initializer
                 struct { float b; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf18_173671449530570965831.c:6:36: error: invalid operands to binary + (have 'int' and 'struct <anonymous>')
                 volatile int c = a + b;
                                    ^

        */
        error("""
              volatile int foo();
              struct { float b; } bar();
              volatile int x() {
                volatile int a = foo();
                struct { float b; } b = bar();
                volatile int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf18_177151150519631488474.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf18_177151150519631488474.c:5:24: error: invalid initializer
                 struct { float b; } c = a + b;
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf18_177151150519631488474.c:6:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              volatile int foo();
              struct { float b; } x() {
                volatile int a = foo();
                volatile int b = foo();
                struct { float b; } c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf18_18() {
        correct("""
              volatile int foo();
              volatile int bar();
              volatile int x() {
                volatile int a = foo();
                volatile int b = bar();
                volatile int c = a + b;
                return c;
              }
                """)
        correct("""
              volatile int foo();
              volatile int bar();
              volatile int x() {
                volatile int a = foo();
                volatile int b = bar();
                volatile int c = a + b;
                return c;
              }
                """)
        correct("""
              volatile int foo();
              volatile int x() {
                volatile int a = foo();
                volatile int b = foo();
                volatile int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf18_19() {
        correct("""
              volatile int foo();
              const int bar();
              const int x() {
                volatile int a = foo();
                const int b = bar();
                const int c = a + b;
                return c;
              }
                """)
        correct("""
              volatile int foo();
              const int bar();
              volatile int x() {
                volatile int a = foo();
                const int b = bar();
                volatile int c = a + b;
                return c;
              }
                """)
        correct("""
              volatile int foo();
              const int x() {
                volatile int a = foo();
                volatile int b = foo();
                const int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf18_20() {
        correct("""
              volatile int foo();
              const double bar();
              const double x() {
                volatile int a = foo();
                const double b = bar();
                const double c = a + b;
                return c;
              }
                """)
        correct("""
              volatile int foo();
              const double bar();
              volatile int x() {
                volatile int a = foo();
                const double b = bar();
                volatile int c = a + b;
                return c;
              }
                """)
        correct("""
              volatile int foo();
              const double x() {
                volatile int a = foo();
                volatile int b = foo();
                const double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf18_21() {
        correct("""
              volatile int foo();
              volatile double bar();
              volatile double x() {
                volatile int a = foo();
                volatile double b = bar();
                volatile double c = a + b;
                return c;
              }
                """)
        correct("""
              volatile int foo();
              volatile double bar();
              volatile int x() {
                volatile int a = foo();
                volatile double b = bar();
                volatile int c = a + b;
                return c;
              }
                """)
        correct("""
              volatile int foo();
              volatile double x() {
                volatile int a = foo();
                volatile int b = foo();
                volatile double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf18_22() {
        correct("""
              volatile int foo();
              int * bar();
              int * x() {
                volatile int a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf18_222357475258074315716.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf18_222357475258074315716.c:6:34: warning: initialization makes integer from pointer without a cast
                 volatile int c = a + b;
                                  ^

        */
        warning("""
              volatile int foo();
              int * bar();
              volatile int x() {
                volatile int a = foo();
                int * b = bar();
                volatile int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf18_224003818119619396783.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf18_224003818119619396783.c:5:27: warning: initialization makes pointer from integer without a cast
                 int * c = a + b;
                           ^

        */
        warning("""
              volatile int foo();
              int * x() {
                volatile int a = foo();
                volatile int b = foo();
                int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf18_23() {
        correct("""
              volatile int foo();
              const int * bar();
              const int * x() {
                volatile int a = foo();
                const int * b = bar();
                const int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf18_236282365388343758759.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf18_236282365388343758759.c:6:34: warning: initialization makes integer from pointer without a cast
                 volatile int c = a + b;
                                  ^

        */
        warning("""
              volatile int foo();
              const int * bar();
              volatile int x() {
                volatile int a = foo();
                const int * b = bar();
                volatile int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf18_234051566251834887404.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf18_234051566251834887404.c:5:33: warning: initialization makes pointer from integer without a cast
                 const int * c = a + b;
                                 ^

        */
        warning("""
              volatile int foo();
              const int * x() {
                volatile int a = foo();
                volatile int b = foo();
                const int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf18_24() {
        correct("""
              volatile int foo();
              volatile int * bar();
              volatile int * x() {
                volatile int a = foo();
                volatile int * b = bar();
                volatile int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf18_243690634505100834805.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf18_243690634505100834805.c:6:34: warning: initialization makes integer from pointer without a cast
                 volatile int c = a + b;
                                  ^

        */
        warning("""
              volatile int foo();
              volatile int * bar();
              volatile int x() {
                volatile int a = foo();
                volatile int * b = bar();
                volatile int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf18_246994632791291162323.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf18_246994632791291162323.c:5:36: warning: initialization makes pointer from integer without a cast
                 volatile int * c = a + b;
                                    ^

        */
        warning("""
              volatile int foo();
              volatile int * x() {
                volatile int a = foo();
                volatile int b = foo();
                volatile int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf19_0() {
        correct("""
              const int foo();
              char bar();
              char x() {
                const int a = foo();
                char b = bar();
                char c = a + b;
                return c;
              }
                """)
        correct("""
              const int foo();
              char bar();
              const int x() {
                const int a = foo();
                char b = bar();
                const int c = a + b;
                return c;
              }
                """)
        correct("""
              const int foo();
              char x() {
                const int a = foo();
                const int b = foo();
                char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf19_1() {
        correct("""
              const int foo();
              signed char bar();
              signed char x() {
                const int a = foo();
                signed char b = bar();
                signed char c = a + b;
                return c;
              }
                """)
        correct("""
              const int foo();
              signed char bar();
              const int x() {
                const int a = foo();
                signed char b = bar();
                const int c = a + b;
                return c;
              }
                """)
        correct("""
              const int foo();
              signed char x() {
                const int a = foo();
                const int b = foo();
                signed char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf19_2() {
        correct("""
              const int foo();
              unsigned char bar();
              unsigned char x() {
                const int a = foo();
                unsigned char b = bar();
                unsigned char c = a + b;
                return c;
              }
                """)
        correct("""
              const int foo();
              unsigned char bar();
              const int x() {
                const int a = foo();
                unsigned char b = bar();
                const int c = a + b;
                return c;
              }
                """)
        correct("""
              const int foo();
              unsigned char x() {
                const int a = foo();
                const int b = foo();
                unsigned char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf19_3() {
        correct("""
              const int foo();
              unsigned int bar();
              unsigned int x() {
                const int a = foo();
                unsigned int b = bar();
                unsigned int c = a + b;
                return c;
              }
                """)
        correct("""
              const int foo();
              unsigned int bar();
              const int x() {
                const int a = foo();
                unsigned int b = bar();
                const int c = a + b;
                return c;
              }
                """)
        correct("""
              const int foo();
              unsigned int x() {
                const int a = foo();
                const int b = foo();
                unsigned int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf19_4() {
        correct("""
              const int foo();
              signed int bar();
              signed int x() {
                const int a = foo();
                signed int b = bar();
                signed int c = a + b;
                return c;
              }
                """)
        correct("""
              const int foo();
              signed int bar();
              const int x() {
                const int a = foo();
                signed int b = bar();
                const int c = a + b;
                return c;
              }
                """)
        correct("""
              const int foo();
              signed int x() {
                const int a = foo();
                const int b = foo();
                signed int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf19_5() {
        correct("""
              const int foo();
              long bar();
              long x() {
                const int a = foo();
                long b = bar();
                long c = a + b;
                return c;
              }
                """)
        correct("""
              const int foo();
              long bar();
              const int x() {
                const int a = foo();
                long b = bar();
                const int c = a + b;
                return c;
              }
                """)
        correct("""
              const int foo();
              long x() {
                const int a = foo();
                const int b = foo();
                long c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf19_6() {
        correct("""
              const int foo();
              float bar();
              float x() {
                const int a = foo();
                float b = bar();
                float c = a + b;
                return c;
              }
                """)
        correct("""
              const int foo();
              float bar();
              const int x() {
                const int a = foo();
                float b = bar();
                const int c = a + b;
                return c;
              }
                """)
        correct("""
              const int foo();
              float x() {
                const int a = foo();
                const int b = foo();
                float c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf19_7() {
        correct("""
              const int foo();
              double bar();
              double x() {
                const int a = foo();
                double b = bar();
                double c = a + b;
                return c;
              }
                """)
        correct("""
              const int foo();
              double bar();
              const int x() {
                const int a = foo();
                double b = bar();
                const int c = a + b;
                return c;
              }
                """)
        correct("""
              const int foo();
              double x() {
                const int a = foo();
                const int b = foo();
                double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf19_8() {
        correct("""
              const int foo();
              long double bar();
              long double x() {
                const int a = foo();
                long double b = bar();
                long double c = a + b;
                return c;
              }
                """)
        correct("""
              const int foo();
              long double bar();
              const int x() {
                const int a = foo();
                long double b = bar();
                const int c = a + b;
                return c;
              }
                """)
        correct("""
              const int foo();
              long double x() {
                const int a = foo();
                const int b = foo();
                long double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf19_9() {
        correct("""
              const int foo();
              int * bar();
              int * x() {
                const int a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf19_91100890707460892158.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf19_91100890707460892158.c:6:31: warning: initialization makes integer from pointer without a cast
                 const int c = a + b;
                               ^

        */
        warning("""
              const int foo();
              int * bar();
              const int x() {
                const int a = foo();
                int * b = bar();
                const int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf19_95291849048546835700.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf19_95291849048546835700.c:5:27: warning: initialization makes pointer from integer without a cast
                 int * c = a + b;
                           ^

        */
        warning("""
              const int foo();
              int * x() {
                const int a = foo();
                const int b = foo();
                int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf19_10() {
        correct("""
              const int foo();
              int ** bar();
              int ** x() {
                const int a = foo();
                int ** b = bar();
                int ** c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf19_105655407888264908266.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf19_105655407888264908266.c:6:31: warning: initialization makes integer from pointer without a cast
                 const int c = a + b;
                               ^

        */
        warning("""
              const int foo();
              int ** bar();
              const int x() {
                const int a = foo();
                int ** b = bar();
                const int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf19_106465957071246505799.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf19_106465957071246505799.c:5:28: warning: initialization makes pointer from integer without a cast
                 int ** c = a + b;
                            ^

        */
        warning("""
              const int foo();
              int ** x() {
                const int a = foo();
                const int b = foo();
                int ** c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf19_11() {
        correct("""
              const int foo();
              char * bar();
              char * x() {
                const int a = foo();
                char * b = bar();
                char * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf19_115768591990723627715.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf19_115768591990723627715.c:6:31: warning: initialization makes integer from pointer without a cast
                 const int c = a + b;
                               ^

        */
        warning("""
              const int foo();
              char * bar();
              const int x() {
                const int a = foo();
                char * b = bar();
                const int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf19_115677296672768122673.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf19_115677296672768122673.c:5:28: warning: initialization makes pointer from integer without a cast
                 char * c = a + b;
                            ^

        */
        warning("""
              const int foo();
              char * x() {
                const int a = foo();
                const int b = foo();
                char * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf19_12() {
        correct("""
              const int foo();
              double * bar();
              double * x() {
                const int a = foo();
                double * b = bar();
                double * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf19_124114641948438267154.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf19_124114641948438267154.c:6:31: warning: initialization makes integer from pointer without a cast
                 const int c = a + b;
                               ^

        */
        warning("""
              const int foo();
              double * bar();
              const int x() {
                const int a = foo();
                double * b = bar();
                const int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf19_12400207769588811311.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf19_12400207769588811311.c:5:30: warning: initialization makes pointer from integer without a cast
                 double * c = a + b;
                              ^

        */
        warning("""
              const int foo();
              double * x() {
                const int a = foo();
                const int b = foo();
                double * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf19_13() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf19_135142536969782362760.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf19_135142536969782362760.c:8:32: error: invalid operands to binary + (have 'int' and 'struct S')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              const int foo();
              struct S bar();
              struct S x() {
                const int a = foo();
                struct S b = bar();
                struct S c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf19_133800482800693895430.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf19_133800482800693895430.c:8:33: error: invalid operands to binary + (have 'int' and 'struct S')
                 const int c = a + b;
                                 ^

        */
        error("""
              struct S { int x; int y; };

              const int foo();
              struct S bar();
              const int x() {
                const int a = foo();
                struct S b = bar();
                const int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf19_138516353610432650713.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf19_138516353610432650713.c:7:24: error: invalid initializer
                 struct S c = a + b;
                        ^

        */
        error("""
              struct S { int x; int y; };

              const int foo();
              struct S x() {
                const int a = foo();
                const int b = foo();
                struct S c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf19_14() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf19_148253451910189967009.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf19_148253451910189967009.c:8:32: error: invalid operands to binary + (have 'int' and 'struct T')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              const int foo();
              struct T bar();
              struct T x() {
                const int a = foo();
                struct T b = bar();
                struct T c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf19_146734069924503978018.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf19_146734069924503978018.c:8:33: error: invalid operands to binary + (have 'int' and 'struct T')
                 const int c = a + b;
                                 ^

        */
        error("""
              struct T { int x; int y; int z; };

              const int foo();
              struct T bar();
              const int x() {
                const int a = foo();
                struct T b = bar();
                const int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf19_148919269912107245788.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf19_148919269912107245788.c:7:24: error: invalid initializer
                 struct T c = a + b;
                        ^

        */
        error("""
              struct T { int x; int y; int z; };

              const int foo();
              struct T x() {
                const int a = foo();
                const int b = foo();
                struct T c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf19_15() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf19_15666354986594759508.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf19_15666354986594759508.c:8:40: error: invalid operands to binary + (have 'int' and 'struct_anonymous')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              const int foo();
              struct_anonymous bar();
              struct_anonymous x() {
                const int a = foo();
                struct_anonymous b = bar();
                struct_anonymous c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf19_156101258061434932163.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf19_156101258061434932163.c:8:33: error: invalid operands to binary + (have 'int' and 'struct_anonymous')
                 const int c = a + b;
                                 ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              const int foo();
              struct_anonymous bar();
              const int x() {
                const int a = foo();
                struct_anonymous b = bar();
                const int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf19_158057057051668881281.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf19_158057057051668881281.c:7:17: error: invalid initializer
                 struct_anonymous c = a + b;
                 ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              const int foo();
              struct_anonymous x() {
                const int a = foo();
                const int b = foo();
                struct_anonymous c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf19_16() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf19_168616164219627274227.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf19_168616164219627274227.c:5:24: error: invalid initializer
                 struct { int a; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf19_168616164219627274227.c:6:41: error: invalid operands to binary + (have 'int' and 'struct <anonymous>')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf19_168616164219627274227.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              const int foo();
              struct { int a; } bar();
              struct { int a; } x() {
                const int a = foo();
                struct { int a; } b = bar();
                struct { int a; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf19_167142392444179446396.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf19_167142392444179446396.c:5:24: error: invalid initializer
                 struct { int a; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf19_167142392444179446396.c:6:33: error: invalid operands to binary + (have 'int' and 'struct <anonymous>')
                 const int c = a + b;
                                 ^

        */
        error("""
              const int foo();
              struct { int a; } bar();
              const int x() {
                const int a = foo();
                struct { int a; } b = bar();
                const int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf19_165444369792569148525.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf19_165444369792569148525.c:5:24: error: invalid initializer
                 struct { int a; } c = a + b;
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf19_165444369792569148525.c:6:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              const int foo();
              struct { int a; } x() {
                const int a = foo();
                const int b = foo();
                struct { int a; } c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf19_17() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf19_17119636976451982849.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf19_17119636976451982849.c:5:24: error: invalid initializer
                 struct { float b; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf19_17119636976451982849.c:6:43: error: invalid operands to binary + (have 'int' and 'struct <anonymous>')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf19_17119636976451982849.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              const int foo();
              struct { float b; } bar();
              struct { float b; } x() {
                const int a = foo();
                struct { float b; } b = bar();
                struct { float b; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf19_17713826438758258860.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf19_17713826438758258860.c:5:24: error: invalid initializer
                 struct { float b; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf19_17713826438758258860.c:6:33: error: invalid operands to binary + (have 'int' and 'struct <anonymous>')
                 const int c = a + b;
                                 ^

        */
        error("""
              const int foo();
              struct { float b; } bar();
              const int x() {
                const int a = foo();
                struct { float b; } b = bar();
                const int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf19_176637530028145976250.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf19_176637530028145976250.c:5:24: error: invalid initializer
                 struct { float b; } c = a + b;
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf19_176637530028145976250.c:6:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              const int foo();
              struct { float b; } x() {
                const int a = foo();
                const int b = foo();
                struct { float b; } c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf19_18() {
        correct("""
              const int foo();
              volatile int bar();
              volatile int x() {
                const int a = foo();
                volatile int b = bar();
                volatile int c = a + b;
                return c;
              }
                """)
        correct("""
              const int foo();
              volatile int bar();
              const int x() {
                const int a = foo();
                volatile int b = bar();
                const int c = a + b;
                return c;
              }
                """)
        correct("""
              const int foo();
              volatile int x() {
                const int a = foo();
                const int b = foo();
                volatile int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf19_19() {
        correct("""
              const int foo();
              const int bar();
              const int x() {
                const int a = foo();
                const int b = bar();
                const int c = a + b;
                return c;
              }
                """)
        correct("""
              const int foo();
              const int bar();
              const int x() {
                const int a = foo();
                const int b = bar();
                const int c = a + b;
                return c;
              }
                """)
        correct("""
              const int foo();
              const int x() {
                const int a = foo();
                const int b = foo();
                const int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf19_20() {
        correct("""
              const int foo();
              const double bar();
              const double x() {
                const int a = foo();
                const double b = bar();
                const double c = a + b;
                return c;
              }
                """)
        correct("""
              const int foo();
              const double bar();
              const int x() {
                const int a = foo();
                const double b = bar();
                const int c = a + b;
                return c;
              }
                """)
        correct("""
              const int foo();
              const double x() {
                const int a = foo();
                const int b = foo();
                const double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf19_21() {
        correct("""
              const int foo();
              volatile double bar();
              volatile double x() {
                const int a = foo();
                volatile double b = bar();
                volatile double c = a + b;
                return c;
              }
                """)
        correct("""
              const int foo();
              volatile double bar();
              const int x() {
                const int a = foo();
                volatile double b = bar();
                const int c = a + b;
                return c;
              }
                """)
        correct("""
              const int foo();
              volatile double x() {
                const int a = foo();
                const int b = foo();
                volatile double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf19_22() {
        correct("""
              const int foo();
              int * bar();
              int * x() {
                const int a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf19_226619609049050545967.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf19_226619609049050545967.c:6:31: warning: initialization makes integer from pointer without a cast
                 const int c = a + b;
                               ^

        */
        warning("""
              const int foo();
              int * bar();
              const int x() {
                const int a = foo();
                int * b = bar();
                const int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf19_222757554531719408082.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf19_222757554531719408082.c:5:27: warning: initialization makes pointer from integer without a cast
                 int * c = a + b;
                           ^

        */
        warning("""
              const int foo();
              int * x() {
                const int a = foo();
                const int b = foo();
                int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf19_23() {
        correct("""
              const int foo();
              const int * bar();
              const int * x() {
                const int a = foo();
                const int * b = bar();
                const int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf19_234836391588403247949.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf19_234836391588403247949.c:6:31: warning: initialization makes integer from pointer without a cast
                 const int c = a + b;
                               ^

        */
        warning("""
              const int foo();
              const int * bar();
              const int x() {
                const int a = foo();
                const int * b = bar();
                const int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf19_233168869534632566770.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf19_233168869534632566770.c:5:33: warning: initialization makes pointer from integer without a cast
                 const int * c = a + b;
                                 ^

        */
        warning("""
              const int foo();
              const int * x() {
                const int a = foo();
                const int b = foo();
                const int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf19_24() {
        correct("""
              const int foo();
              volatile int * bar();
              volatile int * x() {
                const int a = foo();
                volatile int * b = bar();
                volatile int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf19_243602250814820245796.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf19_243602250814820245796.c:6:31: warning: initialization makes integer from pointer without a cast
                 const int c = a + b;
                               ^

        */
        warning("""
              const int foo();
              volatile int * bar();
              const int x() {
                const int a = foo();
                volatile int * b = bar();
                const int c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf19_247615720130965141826.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf19_247615720130965141826.c:5:36: warning: initialization makes pointer from integer without a cast
                 volatile int * c = a + b;
                                    ^

        */
        warning("""
              const int foo();
              volatile int * x() {
                const int a = foo();
                const int b = foo();
                volatile int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf20_0() {
        correct("""
              const double foo();
              char bar();
              char x() {
                const double a = foo();
                char b = bar();
                char c = a + b;
                return c;
              }
                """)
        correct("""
              const double foo();
              char bar();
              const double x() {
                const double a = foo();
                char b = bar();
                const double c = a + b;
                return c;
              }
                """)
        correct("""
              const double foo();
              char x() {
                const double a = foo();
                const double b = foo();
                char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf20_1() {
        correct("""
              const double foo();
              signed char bar();
              signed char x() {
                const double a = foo();
                signed char b = bar();
                signed char c = a + b;
                return c;
              }
                """)
        correct("""
              const double foo();
              signed char bar();
              const double x() {
                const double a = foo();
                signed char b = bar();
                const double c = a + b;
                return c;
              }
                """)
        correct("""
              const double foo();
              signed char x() {
                const double a = foo();
                const double b = foo();
                signed char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf20_2() {
        correct("""
              const double foo();
              unsigned char bar();
              unsigned char x() {
                const double a = foo();
                unsigned char b = bar();
                unsigned char c = a + b;
                return c;
              }
                """)
        correct("""
              const double foo();
              unsigned char bar();
              const double x() {
                const double a = foo();
                unsigned char b = bar();
                const double c = a + b;
                return c;
              }
                """)
        correct("""
              const double foo();
              unsigned char x() {
                const double a = foo();
                const double b = foo();
                unsigned char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf20_3() {
        correct("""
              const double foo();
              unsigned int bar();
              unsigned int x() {
                const double a = foo();
                unsigned int b = bar();
                unsigned int c = a + b;
                return c;
              }
                """)
        correct("""
              const double foo();
              unsigned int bar();
              const double x() {
                const double a = foo();
                unsigned int b = bar();
                const double c = a + b;
                return c;
              }
                """)
        correct("""
              const double foo();
              unsigned int x() {
                const double a = foo();
                const double b = foo();
                unsigned int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf20_4() {
        correct("""
              const double foo();
              signed int bar();
              signed int x() {
                const double a = foo();
                signed int b = bar();
                signed int c = a + b;
                return c;
              }
                """)
        correct("""
              const double foo();
              signed int bar();
              const double x() {
                const double a = foo();
                signed int b = bar();
                const double c = a + b;
                return c;
              }
                """)
        correct("""
              const double foo();
              signed int x() {
                const double a = foo();
                const double b = foo();
                signed int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf20_5() {
        correct("""
              const double foo();
              long bar();
              long x() {
                const double a = foo();
                long b = bar();
                long c = a + b;
                return c;
              }
                """)
        correct("""
              const double foo();
              long bar();
              const double x() {
                const double a = foo();
                long b = bar();
                const double c = a + b;
                return c;
              }
                """)
        correct("""
              const double foo();
              long x() {
                const double a = foo();
                const double b = foo();
                long c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf20_6() {
        correct("""
              const double foo();
              float bar();
              float x() {
                const double a = foo();
                float b = bar();
                float c = a + b;
                return c;
              }
                """)
        correct("""
              const double foo();
              float bar();
              const double x() {
                const double a = foo();
                float b = bar();
                const double c = a + b;
                return c;
              }
                """)
        correct("""
              const double foo();
              float x() {
                const double a = foo();
                const double b = foo();
                float c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf20_7() {
        correct("""
              const double foo();
              double bar();
              double x() {
                const double a = foo();
                double b = bar();
                double c = a + b;
                return c;
              }
                """)
        correct("""
              const double foo();
              double bar();
              const double x() {
                const double a = foo();
                double b = bar();
                const double c = a + b;
                return c;
              }
                """)
        correct("""
              const double foo();
              double x() {
                const double a = foo();
                const double b = foo();
                double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf20_8() {
        correct("""
              const double foo();
              long double bar();
              long double x() {
                const double a = foo();
                long double b = bar();
                long double c = a + b;
                return c;
              }
                """)
        correct("""
              const double foo();
              long double bar();
              const double x() {
                const double a = foo();
                long double b = bar();
                const double c = a + b;
                return c;
              }
                """)
        correct("""
              const double foo();
              long double x() {
                const double a = foo();
                const double b = foo();
                long double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf20_9() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf20_94302582792111042637.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf20_94302582792111042637.c:6:29: error: invalid operands to binary + (have 'double' and 'int *')
                 int * c = a + b;
                             ^

        */
        error("""
              const double foo();
              int * bar();
              int * x() {
                const double a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf20_95548273666659204755.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf20_95548273666659204755.c:6:36: error: invalid operands to binary + (have 'double' and 'int *')
                 const double c = a + b;
                                    ^

        */
        error("""
              const double foo();
              int * bar();
              const double x() {
                const double a = foo();
                int * b = bar();
                const double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf20_98080783779670360176.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf20_98080783779670360176.c:5:27: error: incompatible types when initializing type 'int *' using type 'double'
                 int * c = a + b;
                           ^

        */
        error("""
              const double foo();
              int * x() {
                const double a = foo();
                const double b = foo();
                int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf20_10() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf20_103763873711923784418.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf20_103763873711923784418.c:6:30: error: invalid operands to binary + (have 'double' and 'int **')
                 int ** c = a + b;
                              ^

        */
        error("""
              const double foo();
              int ** bar();
              int ** x() {
                const double a = foo();
                int ** b = bar();
                int ** c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf20_105548422714791104456.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf20_105548422714791104456.c:6:36: error: invalid operands to binary + (have 'double' and 'int **')
                 const double c = a + b;
                                    ^

        */
        error("""
              const double foo();
              int ** bar();
              const double x() {
                const double a = foo();
                int ** b = bar();
                const double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf20_108677362257245455143.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf20_108677362257245455143.c:5:28: error: incompatible types when initializing type 'int **' using type 'double'
                 int ** c = a + b;
                            ^

        */
        error("""
              const double foo();
              int ** x() {
                const double a = foo();
                const double b = foo();
                int ** c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf20_11() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf20_115434463491424617296.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf20_115434463491424617296.c:6:30: error: invalid operands to binary + (have 'double' and 'char *')
                 char * c = a + b;
                              ^

        */
        error("""
              const double foo();
              char * bar();
              char * x() {
                const double a = foo();
                char * b = bar();
                char * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf20_118304727926482276687.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf20_118304727926482276687.c:6:36: error: invalid operands to binary + (have 'double' and 'char *')
                 const double c = a + b;
                                    ^

        */
        error("""
              const double foo();
              char * bar();
              const double x() {
                const double a = foo();
                char * b = bar();
                const double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf20_118025844666591930420.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf20_118025844666591930420.c:5:28: error: incompatible types when initializing type 'char *' using type 'double'
                 char * c = a + b;
                            ^

        */
        error("""
              const double foo();
              char * x() {
                const double a = foo();
                const double b = foo();
                char * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf20_12() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf20_128620545047540645295.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf20_128620545047540645295.c:6:32: error: invalid operands to binary + (have 'double' and 'double *')
                 double * c = a + b;
                                ^

        */
        error("""
              const double foo();
              double * bar();
              double * x() {
                const double a = foo();
                double * b = bar();
                double * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf20_12548902633087573349.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf20_12548902633087573349.c:6:36: error: invalid operands to binary + (have 'double' and 'double *')
                 const double c = a + b;
                                    ^

        */
        error("""
              const double foo();
              double * bar();
              const double x() {
                const double a = foo();
                double * b = bar();
                const double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf20_122287932185958956348.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf20_122287932185958956348.c:5:30: error: incompatible types when initializing type 'double *' using type 'double'
                 double * c = a + b;
                              ^

        */
        error("""
              const double foo();
              double * x() {
                const double a = foo();
                const double b = foo();
                double * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf20_13() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf20_131170004299762202500.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf20_131170004299762202500.c:8:32: error: invalid operands to binary + (have 'double' and 'struct S')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              const double foo();
              struct S bar();
              struct S x() {
                const double a = foo();
                struct S b = bar();
                struct S c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf20_133998785742638836022.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf20_133998785742638836022.c:8:36: error: invalid operands to binary + (have 'double' and 'struct S')
                 const double c = a + b;
                                    ^

        */
        error("""
              struct S { int x; int y; };

              const double foo();
              struct S bar();
              const double x() {
                const double a = foo();
                struct S b = bar();
                const double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf20_136324986983666109969.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf20_136324986983666109969.c:7:24: error: invalid initializer
                 struct S c = a + b;
                        ^

        */
        error("""
              struct S { int x; int y; };

              const double foo();
              struct S x() {
                const double a = foo();
                const double b = foo();
                struct S c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf20_14() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf20_14433604776695886457.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf20_14433604776695886457.c:8:32: error: invalid operands to binary + (have 'double' and 'struct T')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              const double foo();
              struct T bar();
              struct T x() {
                const double a = foo();
                struct T b = bar();
                struct T c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf20_145224584240331035536.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf20_145224584240331035536.c:8:36: error: invalid operands to binary + (have 'double' and 'struct T')
                 const double c = a + b;
                                    ^

        */
        error("""
              struct T { int x; int y; int z; };

              const double foo();
              struct T bar();
              const double x() {
                const double a = foo();
                struct T b = bar();
                const double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf20_14665656257487594837.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf20_14665656257487594837.c:7:24: error: invalid initializer
                 struct T c = a + b;
                        ^

        */
        error("""
              struct T { int x; int y; int z; };

              const double foo();
              struct T x() {
                const double a = foo();
                const double b = foo();
                struct T c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf20_15() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf20_156818270084922092850.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf20_156818270084922092850.c:8:40: error: invalid operands to binary + (have 'double' and 'struct_anonymous')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              const double foo();
              struct_anonymous bar();
              struct_anonymous x() {
                const double a = foo();
                struct_anonymous b = bar();
                struct_anonymous c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf20_154078907878652544287.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf20_154078907878652544287.c:8:36: error: invalid operands to binary + (have 'double' and 'struct_anonymous')
                 const double c = a + b;
                                    ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              const double foo();
              struct_anonymous bar();
              const double x() {
                const double a = foo();
                struct_anonymous b = bar();
                const double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf20_151136646305973177491.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf20_151136646305973177491.c:7:17: error: invalid initializer
                 struct_anonymous c = a + b;
                 ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              const double foo();
              struct_anonymous x() {
                const double a = foo();
                const double b = foo();
                struct_anonymous c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf20_16() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf20_16186743699570603868.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf20_16186743699570603868.c:5:24: error: invalid initializer
                 struct { int a; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf20_16186743699570603868.c:6:41: error: invalid operands to binary + (have 'double' and 'struct <anonymous>')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf20_16186743699570603868.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              const double foo();
              struct { int a; } bar();
              struct { int a; } x() {
                const double a = foo();
                struct { int a; } b = bar();
                struct { int a; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf20_16307907424885016417.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf20_16307907424885016417.c:5:24: error: invalid initializer
                 struct { int a; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf20_16307907424885016417.c:6:36: error: invalid operands to binary + (have 'double' and 'struct <anonymous>')
                 const double c = a + b;
                                    ^

        */
        error("""
              const double foo();
              struct { int a; } bar();
              const double x() {
                const double a = foo();
                struct { int a; } b = bar();
                const double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf20_161759211574439293273.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf20_161759211574439293273.c:5:24: error: invalid initializer
                 struct { int a; } c = a + b;
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf20_161759211574439293273.c:6:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              const double foo();
              struct { int a; } x() {
                const double a = foo();
                const double b = foo();
                struct { int a; } c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf20_17() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf20_171064322458546266442.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf20_171064322458546266442.c:5:24: error: invalid initializer
                 struct { float b; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf20_171064322458546266442.c:6:43: error: invalid operands to binary + (have 'double' and 'struct <anonymous>')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf20_171064322458546266442.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              const double foo();
              struct { float b; } bar();
              struct { float b; } x() {
                const double a = foo();
                struct { float b; } b = bar();
                struct { float b; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf20_174064666140574787846.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf20_174064666140574787846.c:5:24: error: invalid initializer
                 struct { float b; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf20_174064666140574787846.c:6:36: error: invalid operands to binary + (have 'double' and 'struct <anonymous>')
                 const double c = a + b;
                                    ^

        */
        error("""
              const double foo();
              struct { float b; } bar();
              const double x() {
                const double a = foo();
                struct { float b; } b = bar();
                const double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf20_17116446415071269849.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf20_17116446415071269849.c:5:24: error: invalid initializer
                 struct { float b; } c = a + b;
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf20_17116446415071269849.c:6:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              const double foo();
              struct { float b; } x() {
                const double a = foo();
                const double b = foo();
                struct { float b; } c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf20_18() {
        correct("""
              const double foo();
              volatile int bar();
              volatile int x() {
                const double a = foo();
                volatile int b = bar();
                volatile int c = a + b;
                return c;
              }
                """)
        correct("""
              const double foo();
              volatile int bar();
              const double x() {
                const double a = foo();
                volatile int b = bar();
                const double c = a + b;
                return c;
              }
                """)
        correct("""
              const double foo();
              volatile int x() {
                const double a = foo();
                const double b = foo();
                volatile int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf20_19() {
        correct("""
              const double foo();
              const int bar();
              const int x() {
                const double a = foo();
                const int b = bar();
                const int c = a + b;
                return c;
              }
                """)
        correct("""
              const double foo();
              const int bar();
              const double x() {
                const double a = foo();
                const int b = bar();
                const double c = a + b;
                return c;
              }
                """)
        correct("""
              const double foo();
              const int x() {
                const double a = foo();
                const double b = foo();
                const int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf20_20() {
        correct("""
              const double foo();
              const double bar();
              const double x() {
                const double a = foo();
                const double b = bar();
                const double c = a + b;
                return c;
              }
                """)
        correct("""
              const double foo();
              const double bar();
              const double x() {
                const double a = foo();
                const double b = bar();
                const double c = a + b;
                return c;
              }
                """)
        correct("""
              const double foo();
              const double x() {
                const double a = foo();
                const double b = foo();
                const double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf20_21() {
        correct("""
              const double foo();
              volatile double bar();
              volatile double x() {
                const double a = foo();
                volatile double b = bar();
                volatile double c = a + b;
                return c;
              }
                """)
        correct("""
              const double foo();
              volatile double bar();
              const double x() {
                const double a = foo();
                volatile double b = bar();
                const double c = a + b;
                return c;
              }
                """)
        correct("""
              const double foo();
              volatile double x() {
                const double a = foo();
                const double b = foo();
                volatile double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf20_22() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf20_226945272404790375576.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf20_226945272404790375576.c:6:29: error: invalid operands to binary + (have 'double' and 'int *')
                 int * c = a + b;
                             ^

        */
        error("""
              const double foo();
              int * bar();
              int * x() {
                const double a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf20_227224099126291281178.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf20_227224099126291281178.c:6:36: error: invalid operands to binary + (have 'double' and 'int *')
                 const double c = a + b;
                                    ^

        */
        error("""
              const double foo();
              int * bar();
              const double x() {
                const double a = foo();
                int * b = bar();
                const double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf20_226510480550583467630.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf20_226510480550583467630.c:5:27: error: incompatible types when initializing type 'int *' using type 'double'
                 int * c = a + b;
                           ^

        */
        error("""
              const double foo();
              int * x() {
                const double a = foo();
                const double b = foo();
                int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf20_23() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf20_23587722260924089811.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf20_23587722260924089811.c:6:35: error: invalid operands to binary + (have 'double' and 'const int *')
                 const int * c = a + b;
                                   ^

        */
        error("""
              const double foo();
              const int * bar();
              const int * x() {
                const double a = foo();
                const int * b = bar();
                const int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf20_234326196727955860128.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf20_234326196727955860128.c:6:36: error: invalid operands to binary + (have 'double' and 'const int *')
                 const double c = a + b;
                                    ^

        */
        error("""
              const double foo();
              const int * bar();
              const double x() {
                const double a = foo();
                const int * b = bar();
                const double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf20_234119680649669605198.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf20_234119680649669605198.c:5:33: error: incompatible types when initializing type 'const int *' using type 'double'
                 const int * c = a + b;
                                 ^

        */
        error("""
              const double foo();
              const int * x() {
                const double a = foo();
                const double b = foo();
                const int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf20_24() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf20_241831989628879509302.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf20_241831989628879509302.c:6:38: error: invalid operands to binary + (have 'double' and 'volatile int *')
                 volatile int * c = a + b;
                                      ^

        */
        error("""
              const double foo();
              volatile int * bar();
              volatile int * x() {
                const double a = foo();
                volatile int * b = bar();
                volatile int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf20_246759160668985514566.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf20_246759160668985514566.c:6:36: error: invalid operands to binary + (have 'double' and 'volatile int *')
                 const double c = a + b;
                                    ^

        */
        error("""
              const double foo();
              volatile int * bar();
              const double x() {
                const double a = foo();
                volatile int * b = bar();
                const double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf20_244090427694705012564.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf20_244090427694705012564.c:5:36: error: incompatible types when initializing type 'volatile int *' using type 'double'
                 volatile int * c = a + b;
                                    ^

        */
        error("""
              const double foo();
              volatile int * x() {
                const double a = foo();
                const double b = foo();
                volatile int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf21_0() {
        correct("""
              volatile double foo();
              char bar();
              char x() {
                volatile double a = foo();
                char b = bar();
                char c = a + b;
                return c;
              }
                """)
        correct("""
              volatile double foo();
              char bar();
              volatile double x() {
                volatile double a = foo();
                char b = bar();
                volatile double c = a + b;
                return c;
              }
                """)
        correct("""
              volatile double foo();
              char x() {
                volatile double a = foo();
                volatile double b = foo();
                char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf21_1() {
        correct("""
              volatile double foo();
              signed char bar();
              signed char x() {
                volatile double a = foo();
                signed char b = bar();
                signed char c = a + b;
                return c;
              }
                """)
        correct("""
              volatile double foo();
              signed char bar();
              volatile double x() {
                volatile double a = foo();
                signed char b = bar();
                volatile double c = a + b;
                return c;
              }
                """)
        correct("""
              volatile double foo();
              signed char x() {
                volatile double a = foo();
                volatile double b = foo();
                signed char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf21_2() {
        correct("""
              volatile double foo();
              unsigned char bar();
              unsigned char x() {
                volatile double a = foo();
                unsigned char b = bar();
                unsigned char c = a + b;
                return c;
              }
                """)
        correct("""
              volatile double foo();
              unsigned char bar();
              volatile double x() {
                volatile double a = foo();
                unsigned char b = bar();
                volatile double c = a + b;
                return c;
              }
                """)
        correct("""
              volatile double foo();
              unsigned char x() {
                volatile double a = foo();
                volatile double b = foo();
                unsigned char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf21_3() {
        correct("""
              volatile double foo();
              unsigned int bar();
              unsigned int x() {
                volatile double a = foo();
                unsigned int b = bar();
                unsigned int c = a + b;
                return c;
              }
                """)
        correct("""
              volatile double foo();
              unsigned int bar();
              volatile double x() {
                volatile double a = foo();
                unsigned int b = bar();
                volatile double c = a + b;
                return c;
              }
                """)
        correct("""
              volatile double foo();
              unsigned int x() {
                volatile double a = foo();
                volatile double b = foo();
                unsigned int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf21_4() {
        correct("""
              volatile double foo();
              signed int bar();
              signed int x() {
                volatile double a = foo();
                signed int b = bar();
                signed int c = a + b;
                return c;
              }
                """)
        correct("""
              volatile double foo();
              signed int bar();
              volatile double x() {
                volatile double a = foo();
                signed int b = bar();
                volatile double c = a + b;
                return c;
              }
                """)
        correct("""
              volatile double foo();
              signed int x() {
                volatile double a = foo();
                volatile double b = foo();
                signed int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf21_5() {
        correct("""
              volatile double foo();
              long bar();
              long x() {
                volatile double a = foo();
                long b = bar();
                long c = a + b;
                return c;
              }
                """)
        correct("""
              volatile double foo();
              long bar();
              volatile double x() {
                volatile double a = foo();
                long b = bar();
                volatile double c = a + b;
                return c;
              }
                """)
        correct("""
              volatile double foo();
              long x() {
                volatile double a = foo();
                volatile double b = foo();
                long c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf21_6() {
        correct("""
              volatile double foo();
              float bar();
              float x() {
                volatile double a = foo();
                float b = bar();
                float c = a + b;
                return c;
              }
                """)
        correct("""
              volatile double foo();
              float bar();
              volatile double x() {
                volatile double a = foo();
                float b = bar();
                volatile double c = a + b;
                return c;
              }
                """)
        correct("""
              volatile double foo();
              float x() {
                volatile double a = foo();
                volatile double b = foo();
                float c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf21_7() {
        correct("""
              volatile double foo();
              double bar();
              double x() {
                volatile double a = foo();
                double b = bar();
                double c = a + b;
                return c;
              }
                """)
        correct("""
              volatile double foo();
              double bar();
              volatile double x() {
                volatile double a = foo();
                double b = bar();
                volatile double c = a + b;
                return c;
              }
                """)
        correct("""
              volatile double foo();
              double x() {
                volatile double a = foo();
                volatile double b = foo();
                double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf21_8() {
        correct("""
              volatile double foo();
              long double bar();
              long double x() {
                volatile double a = foo();
                long double b = bar();
                long double c = a + b;
                return c;
              }
                """)
        correct("""
              volatile double foo();
              long double bar();
              volatile double x() {
                volatile double a = foo();
                long double b = bar();
                volatile double c = a + b;
                return c;
              }
                """)
        correct("""
              volatile double foo();
              long double x() {
                volatile double a = foo();
                volatile double b = foo();
                long double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf21_9() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf21_94629508755345821499.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf21_94629508755345821499.c:6:29: error: invalid operands to binary + (have 'double' and 'int *')
                 int * c = a + b;
                             ^

        */
        error("""
              volatile double foo();
              int * bar();
              int * x() {
                volatile double a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf21_9798216834100298045.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf21_9798216834100298045.c:6:39: error: invalid operands to binary + (have 'double' and 'int *')
                 volatile double c = a + b;
                                       ^

        */
        error("""
              volatile double foo();
              int * bar();
              volatile double x() {
                volatile double a = foo();
                int * b = bar();
                volatile double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf21_93649747598175474692.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf21_93649747598175474692.c:5:27: error: incompatible types when initializing type 'int *' using type 'double'
                 int * c = a + b;
                           ^

        */
        error("""
              volatile double foo();
              int * x() {
                volatile double a = foo();
                volatile double b = foo();
                int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf21_10() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf21_107116735188292903591.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf21_107116735188292903591.c:6:30: error: invalid operands to binary + (have 'double' and 'int **')
                 int ** c = a + b;
                              ^

        */
        error("""
              volatile double foo();
              int ** bar();
              int ** x() {
                volatile double a = foo();
                int ** b = bar();
                int ** c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf21_105881212724870760892.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf21_105881212724870760892.c:6:39: error: invalid operands to binary + (have 'double' and 'int **')
                 volatile double c = a + b;
                                       ^

        */
        error("""
              volatile double foo();
              int ** bar();
              volatile double x() {
                volatile double a = foo();
                int ** b = bar();
                volatile double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf21_10500467184471458436.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf21_10500467184471458436.c:5:28: error: incompatible types when initializing type 'int **' using type 'double'
                 int ** c = a + b;
                            ^

        */
        error("""
              volatile double foo();
              int ** x() {
                volatile double a = foo();
                volatile double b = foo();
                int ** c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf21_11() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf21_112699971732811858807.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf21_112699971732811858807.c:6:30: error: invalid operands to binary + (have 'double' and 'char *')
                 char * c = a + b;
                              ^

        */
        error("""
              volatile double foo();
              char * bar();
              char * x() {
                volatile double a = foo();
                char * b = bar();
                char * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf21_117619942829022566758.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf21_117619942829022566758.c:6:39: error: invalid operands to binary + (have 'double' and 'char *')
                 volatile double c = a + b;
                                       ^

        */
        error("""
              volatile double foo();
              char * bar();
              volatile double x() {
                volatile double a = foo();
                char * b = bar();
                volatile double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf21_117809869497385060557.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf21_117809869497385060557.c:5:28: error: incompatible types when initializing type 'char *' using type 'double'
                 char * c = a + b;
                            ^

        */
        error("""
              volatile double foo();
              char * x() {
                volatile double a = foo();
                volatile double b = foo();
                char * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf21_12() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf21_122697714986153495491.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf21_122697714986153495491.c:6:32: error: invalid operands to binary + (have 'double' and 'double *')
                 double * c = a + b;
                                ^

        */
        error("""
              volatile double foo();
              double * bar();
              double * x() {
                volatile double a = foo();
                double * b = bar();
                double * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf21_122925995909643031938.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf21_122925995909643031938.c:6:39: error: invalid operands to binary + (have 'double' and 'double *')
                 volatile double c = a + b;
                                       ^

        */
        error("""
              volatile double foo();
              double * bar();
              volatile double x() {
                volatile double a = foo();
                double * b = bar();
                volatile double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf21_12565839469191830612.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf21_12565839469191830612.c:5:30: error: incompatible types when initializing type 'double *' using type 'double'
                 double * c = a + b;
                              ^

        */
        error("""
              volatile double foo();
              double * x() {
                volatile double a = foo();
                volatile double b = foo();
                double * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf21_13() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf21_136601075223539992592.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf21_136601075223539992592.c:8:32: error: invalid operands to binary + (have 'double' and 'struct S')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              volatile double foo();
              struct S bar();
              struct S x() {
                volatile double a = foo();
                struct S b = bar();
                struct S c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf21_136539171646150994027.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf21_136539171646150994027.c:8:39: error: invalid operands to binary + (have 'double' and 'struct S')
                 volatile double c = a + b;
                                       ^

        */
        error("""
              struct S { int x; int y; };

              volatile double foo();
              struct S bar();
              volatile double x() {
                volatile double a = foo();
                struct S b = bar();
                volatile double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf21_135529158365356767712.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf21_135529158365356767712.c:7:24: error: invalid initializer
                 struct S c = a + b;
                        ^

        */
        error("""
              struct S { int x; int y; };

              volatile double foo();
              struct S x() {
                volatile double a = foo();
                volatile double b = foo();
                struct S c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf21_14() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf21_144338711820523427157.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf21_144338711820523427157.c:8:32: error: invalid operands to binary + (have 'double' and 'struct T')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              volatile double foo();
              struct T bar();
              struct T x() {
                volatile double a = foo();
                struct T b = bar();
                struct T c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf21_14540114989075851669.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf21_14540114989075851669.c:8:39: error: invalid operands to binary + (have 'double' and 'struct T')
                 volatile double c = a + b;
                                       ^

        */
        error("""
              struct T { int x; int y; int z; };

              volatile double foo();
              struct T bar();
              volatile double x() {
                volatile double a = foo();
                struct T b = bar();
                volatile double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf21_143776374463414644084.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf21_143776374463414644084.c:7:24: error: invalid initializer
                 struct T c = a + b;
                        ^

        */
        error("""
              struct T { int x; int y; int z; };

              volatile double foo();
              struct T x() {
                volatile double a = foo();
                volatile double b = foo();
                struct T c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf21_15() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf21_154823937223115224263.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf21_154823937223115224263.c:8:40: error: invalid operands to binary + (have 'double' and 'struct_anonymous')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              volatile double foo();
              struct_anonymous bar();
              struct_anonymous x() {
                volatile double a = foo();
                struct_anonymous b = bar();
                struct_anonymous c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf21_155237058124556615464.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf21_155237058124556615464.c:8:39: error: invalid operands to binary + (have 'double' and 'struct_anonymous')
                 volatile double c = a + b;
                                       ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              volatile double foo();
              struct_anonymous bar();
              volatile double x() {
                volatile double a = foo();
                struct_anonymous b = bar();
                volatile double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf21_156592481458275290275.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf21_156592481458275290275.c:7:17: error: invalid initializer
                 struct_anonymous c = a + b;
                 ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              volatile double foo();
              struct_anonymous x() {
                volatile double a = foo();
                volatile double b = foo();
                struct_anonymous c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf21_16() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf21_164096260467465195942.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf21_164096260467465195942.c:5:24: error: invalid initializer
                 struct { int a; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf21_164096260467465195942.c:6:41: error: invalid operands to binary + (have 'double' and 'struct <anonymous>')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf21_164096260467465195942.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              volatile double foo();
              struct { int a; } bar();
              struct { int a; } x() {
                volatile double a = foo();
                struct { int a; } b = bar();
                struct { int a; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf21_16309341876953748009.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf21_16309341876953748009.c:5:24: error: invalid initializer
                 struct { int a; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf21_16309341876953748009.c:6:39: error: invalid operands to binary + (have 'double' and 'struct <anonymous>')
                 volatile double c = a + b;
                                       ^

        */
        error("""
              volatile double foo();
              struct { int a; } bar();
              volatile double x() {
                volatile double a = foo();
                struct { int a; } b = bar();
                volatile double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf21_162707286576405924694.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf21_162707286576405924694.c:5:24: error: invalid initializer
                 struct { int a; } c = a + b;
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf21_162707286576405924694.c:6:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              volatile double foo();
              struct { int a; } x() {
                volatile double a = foo();
                volatile double b = foo();
                struct { int a; } c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf21_17() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf21_175864596316586680908.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf21_175864596316586680908.c:5:24: error: invalid initializer
                 struct { float b; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf21_175864596316586680908.c:6:43: error: invalid operands to binary + (have 'double' and 'struct <anonymous>')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf21_175864596316586680908.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              volatile double foo();
              struct { float b; } bar();
              struct { float b; } x() {
                volatile double a = foo();
                struct { float b; } b = bar();
                struct { float b; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf21_172230101249925570107.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf21_172230101249925570107.c:5:24: error: invalid initializer
                 struct { float b; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf21_172230101249925570107.c:6:39: error: invalid operands to binary + (have 'double' and 'struct <anonymous>')
                 volatile double c = a + b;
                                       ^

        */
        error("""
              volatile double foo();
              struct { float b; } bar();
              volatile double x() {
                volatile double a = foo();
                struct { float b; } b = bar();
                volatile double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf21_173303689470880766343.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf21_173303689470880766343.c:5:24: error: invalid initializer
                 struct { float b; } c = a + b;
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf21_173303689470880766343.c:6:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              volatile double foo();
              struct { float b; } x() {
                volatile double a = foo();
                volatile double b = foo();
                struct { float b; } c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf21_18() {
        correct("""
              volatile double foo();
              volatile int bar();
              volatile int x() {
                volatile double a = foo();
                volatile int b = bar();
                volatile int c = a + b;
                return c;
              }
                """)
        correct("""
              volatile double foo();
              volatile int bar();
              volatile double x() {
                volatile double a = foo();
                volatile int b = bar();
                volatile double c = a + b;
                return c;
              }
                """)
        correct("""
              volatile double foo();
              volatile int x() {
                volatile double a = foo();
                volatile double b = foo();
                volatile int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf21_19() {
        correct("""
              volatile double foo();
              const int bar();
              const int x() {
                volatile double a = foo();
                const int b = bar();
                const int c = a + b;
                return c;
              }
                """)
        correct("""
              volatile double foo();
              const int bar();
              volatile double x() {
                volatile double a = foo();
                const int b = bar();
                volatile double c = a + b;
                return c;
              }
                """)
        correct("""
              volatile double foo();
              const int x() {
                volatile double a = foo();
                volatile double b = foo();
                const int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf21_20() {
        correct("""
              volatile double foo();
              const double bar();
              const double x() {
                volatile double a = foo();
                const double b = bar();
                const double c = a + b;
                return c;
              }
                """)
        correct("""
              volatile double foo();
              const double bar();
              volatile double x() {
                volatile double a = foo();
                const double b = bar();
                volatile double c = a + b;
                return c;
              }
                """)
        correct("""
              volatile double foo();
              const double x() {
                volatile double a = foo();
                volatile double b = foo();
                const double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf21_21() {
        correct("""
              volatile double foo();
              volatile double bar();
              volatile double x() {
                volatile double a = foo();
                volatile double b = bar();
                volatile double c = a + b;
                return c;
              }
                """)
        correct("""
              volatile double foo();
              volatile double bar();
              volatile double x() {
                volatile double a = foo();
                volatile double b = bar();
                volatile double c = a + b;
                return c;
              }
                """)
        correct("""
              volatile double foo();
              volatile double x() {
                volatile double a = foo();
                volatile double b = foo();
                volatile double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf21_22() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf21_228792330717887266916.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf21_228792330717887266916.c:6:29: error: invalid operands to binary + (have 'double' and 'int *')
                 int * c = a + b;
                             ^

        */
        error("""
              volatile double foo();
              int * bar();
              int * x() {
                volatile double a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf21_22370576225349147680.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf21_22370576225349147680.c:6:39: error: invalid operands to binary + (have 'double' and 'int *')
                 volatile double c = a + b;
                                       ^

        */
        error("""
              volatile double foo();
              int * bar();
              volatile double x() {
                volatile double a = foo();
                int * b = bar();
                volatile double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf21_225448601949102624521.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf21_225448601949102624521.c:5:27: error: incompatible types when initializing type 'int *' using type 'double'
                 int * c = a + b;
                           ^

        */
        error("""
              volatile double foo();
              int * x() {
                volatile double a = foo();
                volatile double b = foo();
                int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf21_23() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf21_231397271334895006593.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf21_231397271334895006593.c:6:35: error: invalid operands to binary + (have 'double' and 'const int *')
                 const int * c = a + b;
                                   ^

        */
        error("""
              volatile double foo();
              const int * bar();
              const int * x() {
                volatile double a = foo();
                const int * b = bar();
                const int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf21_23361802871232218817.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf21_23361802871232218817.c:6:39: error: invalid operands to binary + (have 'double' and 'const int *')
                 volatile double c = a + b;
                                       ^

        */
        error("""
              volatile double foo();
              const int * bar();
              volatile double x() {
                volatile double a = foo();
                const int * b = bar();
                volatile double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf21_23477961080368250286.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf21_23477961080368250286.c:5:33: error: incompatible types when initializing type 'const int *' using type 'double'
                 const int * c = a + b;
                                 ^

        */
        error("""
              volatile double foo();
              const int * x() {
                volatile double a = foo();
                volatile double b = foo();
                const int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf21_24() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf21_246056284036948716501.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf21_246056284036948716501.c:6:38: error: invalid operands to binary + (have 'double' and 'volatile int *')
                 volatile int * c = a + b;
                                      ^

        */
        error("""
              volatile double foo();
              volatile int * bar();
              volatile int * x() {
                volatile double a = foo();
                volatile int * b = bar();
                volatile int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf21_244153791655436540892.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf21_244153791655436540892.c:6:39: error: invalid operands to binary + (have 'double' and 'volatile int *')
                 volatile double c = a + b;
                                       ^

        */
        error("""
              volatile double foo();
              volatile int * bar();
              volatile double x() {
                volatile double a = foo();
                volatile int * b = bar();
                volatile double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf21_242928804817296398390.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf21_242928804817296398390.c:5:36: error: incompatible types when initializing type 'volatile int *' using type 'double'
                 volatile int * c = a + b;
                                    ^

        */
        error("""
              volatile double foo();
              volatile int * x() {
                volatile double a = foo();
                volatile double b = foo();
                volatile int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf22_0() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_06154548345342865377.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_06154548345342865377.c:6:26: warning: initialization makes integer from pointer without a cast
                 char c = a + b;
                          ^

        */
        warning("""
              int * foo();
              char bar();
              char x() {
                int * a = foo();
                char b = bar();
                char c = a + b;
                return c;
              }
                """)
        correct("""
              int * foo();
              char bar();
              int * x() {
                int * a = foo();
                char b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_01954098949539199617.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_01954098949539199617.c:5:28: error: invalid operands to binary + (have 'int *' and 'int *')
                 char c = a + b;
                            ^

        */
        error("""
              int * foo();
              char x() {
                int * a = foo();
                int * b = foo();
                char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf22_1() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_17826890491401514043.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_17826890491401514043.c:6:33: warning: initialization makes integer from pointer without a cast
                 signed char c = a + b;
                                 ^

        */
        warning("""
              int * foo();
              signed char bar();
              signed char x() {
                int * a = foo();
                signed char b = bar();
                signed char c = a + b;
                return c;
              }
                """)
        correct("""
              int * foo();
              signed char bar();
              int * x() {
                int * a = foo();
                signed char b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_17421794827208804616.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_17421794827208804616.c:5:35: error: invalid operands to binary + (have 'int *' and 'int *')
                 signed char c = a + b;
                                   ^

        */
        error("""
              int * foo();
              signed char x() {
                int * a = foo();
                int * b = foo();
                signed char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf22_2() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_25427012026933889971.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_25427012026933889971.c:6:35: warning: initialization makes integer from pointer without a cast
                 unsigned char c = a + b;
                                   ^

        */
        warning("""
              int * foo();
              unsigned char bar();
              unsigned char x() {
                int * a = foo();
                unsigned char b = bar();
                unsigned char c = a + b;
                return c;
              }
                """)
        correct("""
              int * foo();
              unsigned char bar();
              int * x() {
                int * a = foo();
                unsigned char b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_22321642282839098989.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_22321642282839098989.c:5:37: error: invalid operands to binary + (have 'int *' and 'int *')
                 unsigned char c = a + b;
                                     ^

        */
        error("""
              int * foo();
              unsigned char x() {
                int * a = foo();
                int * b = foo();
                unsigned char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf22_3() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_35252761868489752748.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_35252761868489752748.c:6:34: warning: initialization makes integer from pointer without a cast
                 unsigned int c = a + b;
                                  ^

        */
        warning("""
              int * foo();
              unsigned int bar();
              unsigned int x() {
                int * a = foo();
                unsigned int b = bar();
                unsigned int c = a + b;
                return c;
              }
                """)
        correct("""
              int * foo();
              unsigned int bar();
              int * x() {
                int * a = foo();
                unsigned int b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_37922086050853078033.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_37922086050853078033.c:5:36: error: invalid operands to binary + (have 'int *' and 'int *')
                 unsigned int c = a + b;
                                    ^

        */
        error("""
              int * foo();
              unsigned int x() {
                int * a = foo();
                int * b = foo();
                unsigned int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf22_4() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_44980125218096138114.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_44980125218096138114.c:6:32: warning: initialization makes integer from pointer without a cast
                 signed int c = a + b;
                                ^

        */
        warning("""
              int * foo();
              signed int bar();
              signed int x() {
                int * a = foo();
                signed int b = bar();
                signed int c = a + b;
                return c;
              }
                """)
        correct("""
              int * foo();
              signed int bar();
              int * x() {
                int * a = foo();
                signed int b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_41504855874507813360.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_41504855874507813360.c:5:34: error: invalid operands to binary + (have 'int *' and 'int *')
                 signed int c = a + b;
                                  ^

        */
        error("""
              int * foo();
              signed int x() {
                int * a = foo();
                int * b = foo();
                signed int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf22_5() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_55835509025631931021.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_55835509025631931021.c:6:26: warning: initialization makes integer from pointer without a cast
                 long c = a + b;
                          ^

        */
        warning("""
              int * foo();
              long bar();
              long x() {
                int * a = foo();
                long b = bar();
                long c = a + b;
                return c;
              }
                """)
        correct("""
              int * foo();
              long bar();
              int * x() {
                int * a = foo();
                long b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_53233631526602512766.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_53233631526602512766.c:5:28: error: invalid operands to binary + (have 'int *' and 'int *')
                 long c = a + b;
                            ^

        */
        error("""
              int * foo();
              long x() {
                int * a = foo();
                int * b = foo();
                long c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf22_6() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_64384280981818425663.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_64384280981818425663.c:6:29: error: invalid operands to binary + (have 'int *' and 'float')
                 float c = a + b;
                             ^

        */
        error("""
              int * foo();
              float bar();
              float x() {
                int * a = foo();
                float b = bar();
                float c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_66674005696810080715.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_66674005696810080715.c:6:29: error: invalid operands to binary + (have 'int *' and 'float')
                 int * c = a + b;
                             ^

        */
        error("""
              int * foo();
              float bar();
              int * x() {
                int * a = foo();
                float b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_62339310281949163657.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_62339310281949163657.c:5:29: error: invalid operands to binary + (have 'int *' and 'int *')
                 float c = a + b;
                             ^

        */
        error("""
              int * foo();
              float x() {
                int * a = foo();
                int * b = foo();
                float c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf22_7() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_7852441984450653479.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_7852441984450653479.c:6:30: error: invalid operands to binary + (have 'int *' and 'double')
                 double c = a + b;
                              ^

        */
        error("""
              int * foo();
              double bar();
              double x() {
                int * a = foo();
                double b = bar();
                double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_71902748121481760546.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_71902748121481760546.c:6:29: error: invalid operands to binary + (have 'int *' and 'double')
                 int * c = a + b;
                             ^

        */
        error("""
              int * foo();
              double bar();
              int * x() {
                int * a = foo();
                double b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_77992688961857683273.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_77992688961857683273.c:5:30: error: invalid operands to binary + (have 'int *' and 'int *')
                 double c = a + b;
                              ^

        */
        error("""
              int * foo();
              double x() {
                int * a = foo();
                int * b = foo();
                double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf22_8() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_84912373565837021405.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_84912373565837021405.c:6:35: error: invalid operands to binary + (have 'int *' and 'long double')
                 long double c = a + b;
                                   ^

        */
        error("""
              int * foo();
              long double bar();
              long double x() {
                int * a = foo();
                long double b = bar();
                long double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_81691901994447201620.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_81691901994447201620.c:6:29: error: invalid operands to binary + (have 'int *' and 'long double')
                 int * c = a + b;
                             ^

        */
        error("""
              int * foo();
              long double bar();
              int * x() {
                int * a = foo();
                long double b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_87554124466351964674.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_87554124466351964674.c:5:35: error: invalid operands to binary + (have 'int *' and 'int *')
                 long double c = a + b;
                                   ^

        */
        error("""
              int * foo();
              long double x() {
                int * a = foo();
                int * b = foo();
                long double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf22_9() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_91706600026549470256.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_91706600026549470256.c:6:29: error: invalid operands to binary + (have 'int *' and 'int *')
                 int * c = a + b;
                             ^

        */
        error("""
              int * foo();
              int * bar();
              int * x() {
                int * a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_96402059369493006415.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_96402059369493006415.c:6:29: error: invalid operands to binary + (have 'int *' and 'int *')
                 int * c = a + b;
                             ^

        */
        error("""
              int * foo();
              int * bar();
              int * x() {
                int * a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_91271060685003061659.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_91271060685003061659.c:5:29: error: invalid operands to binary + (have 'int *' and 'int *')
                 int * c = a + b;
                             ^

        */
        error("""
              int * foo();
              int * x() {
                int * a = foo();
                int * b = foo();
                int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf22_10() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_107048360289841733379.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_107048360289841733379.c:6:30: error: invalid operands to binary + (have 'int *' and 'int **')
                 int ** c = a + b;
                              ^

        */
        error("""
              int * foo();
              int ** bar();
              int ** x() {
                int * a = foo();
                int ** b = bar();
                int ** c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_103919108956792577474.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_103919108956792577474.c:6:29: error: invalid operands to binary + (have 'int *' and 'int **')
                 int * c = a + b;
                             ^

        */
        error("""
              int * foo();
              int ** bar();
              int * x() {
                int * a = foo();
                int ** b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_105515815290690572948.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_105515815290690572948.c:5:30: error: invalid operands to binary + (have 'int *' and 'int *')
                 int ** c = a + b;
                              ^

        */
        error("""
              int * foo();
              int ** x() {
                int * a = foo();
                int * b = foo();
                int ** c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf22_11() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_11285763824898887014.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_11285763824898887014.c:6:30: error: invalid operands to binary + (have 'int *' and 'char *')
                 char * c = a + b;
                              ^

        */
        error("""
              int * foo();
              char * bar();
              char * x() {
                int * a = foo();
                char * b = bar();
                char * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_115840556532579181940.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_115840556532579181940.c:6:29: error: invalid operands to binary + (have 'int *' and 'char *')
                 int * c = a + b;
                             ^

        */
        error("""
              int * foo();
              char * bar();
              int * x() {
                int * a = foo();
                char * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_117685839136455697431.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_117685839136455697431.c:5:30: error: invalid operands to binary + (have 'int *' and 'int *')
                 char * c = a + b;
                              ^

        */
        error("""
              int * foo();
              char * x() {
                int * a = foo();
                int * b = foo();
                char * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf22_12() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_126643917180790173187.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_126643917180790173187.c:6:32: error: invalid operands to binary + (have 'int *' and 'double *')
                 double * c = a + b;
                                ^

        */
        error("""
              int * foo();
              double * bar();
              double * x() {
                int * a = foo();
                double * b = bar();
                double * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_129134128243479885385.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_129134128243479885385.c:6:29: error: invalid operands to binary + (have 'int *' and 'double *')
                 int * c = a + b;
                             ^

        */
        error("""
              int * foo();
              double * bar();
              int * x() {
                int * a = foo();
                double * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_127882915649957545357.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_127882915649957545357.c:5:32: error: invalid operands to binary + (have 'int *' and 'int *')
                 double * c = a + b;
                                ^

        */
        error("""
              int * foo();
              double * x() {
                int * a = foo();
                int * b = foo();
                double * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf22_13() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_137259502185666952786.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_137259502185666952786.c:8:32: error: invalid operands to binary + (have 'int *' and 'struct S')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              int * foo();
              struct S bar();
              struct S x() {
                int * a = foo();
                struct S b = bar();
                struct S c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_137068758235775758597.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_137068758235775758597.c:8:29: error: invalid operands to binary + (have 'int *' and 'struct S')
                 int * c = a + b;
                             ^

        */
        error("""
              struct S { int x; int y; };

              int * foo();
              struct S bar();
              int * x() {
                int * a = foo();
                struct S b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_131847125020702879375.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_131847125020702879375.c:7:32: error: invalid operands to binary + (have 'int *' and 'int *')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              int * foo();
              struct S x() {
                int * a = foo();
                int * b = foo();
                struct S c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf22_14() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_143581620816302539513.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_143581620816302539513.c:8:32: error: invalid operands to binary + (have 'int *' and 'struct T')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              int * foo();
              struct T bar();
              struct T x() {
                int * a = foo();
                struct T b = bar();
                struct T c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_146952177973477551772.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_146952177973477551772.c:8:29: error: invalid operands to binary + (have 'int *' and 'struct T')
                 int * c = a + b;
                             ^

        */
        error("""
              struct T { int x; int y; int z; };

              int * foo();
              struct T bar();
              int * x() {
                int * a = foo();
                struct T b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_142867714134615423363.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_142867714134615423363.c:7:32: error: invalid operands to binary + (have 'int *' and 'int *')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              int * foo();
              struct T x() {
                int * a = foo();
                int * b = foo();
                struct T c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf22_15() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_15541471763625006265.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_15541471763625006265.c:8:40: error: invalid operands to binary + (have 'int *' and 'struct_anonymous')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              int * foo();
              struct_anonymous bar();
              struct_anonymous x() {
                int * a = foo();
                struct_anonymous b = bar();
                struct_anonymous c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_155324677802583032010.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_155324677802583032010.c:8:29: error: invalid operands to binary + (have 'int *' and 'struct_anonymous')
                 int * c = a + b;
                             ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              int * foo();
              struct_anonymous bar();
              int * x() {
                int * a = foo();
                struct_anonymous b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_153241148671906969371.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_153241148671906969371.c:7:40: error: invalid operands to binary + (have 'int *' and 'int *')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              int * foo();
              struct_anonymous x() {
                int * a = foo();
                int * b = foo();
                struct_anonymous c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf22_16() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_168699657095410878477.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_168699657095410878477.c:5:24: error: invalid initializer
                 struct { int a; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf22_168699657095410878477.c:6:41: error: invalid operands to binary + (have 'int *' and 'struct <anonymous>')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf22_168699657095410878477.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              int * foo();
              struct { int a; } bar();
              struct { int a; } x() {
                int * a = foo();
                struct { int a; } b = bar();
                struct { int a; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_163501755733771632947.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_163501755733771632947.c:5:24: error: invalid initializer
                 struct { int a; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf22_163501755733771632947.c:6:29: error: invalid operands to binary + (have 'int *' and 'struct <anonymous>')
                 int * c = a + b;
                             ^

        */
        error("""
              int * foo();
              struct { int a; } bar();
              int * x() {
                int * a = foo();
                struct { int a; } b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_161273952817857215440.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_161273952817857215440.c:5:41: error: invalid operands to binary + (have 'int *' and 'int *')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf22_161273952817857215440.c:6:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              int * foo();
              struct { int a; } x() {
                int * a = foo();
                int * b = foo();
                struct { int a; } c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf22_17() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_173107193291612542959.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_173107193291612542959.c:5:24: error: invalid initializer
                 struct { float b; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf22_173107193291612542959.c:6:43: error: invalid operands to binary + (have 'int *' and 'struct <anonymous>')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf22_173107193291612542959.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              int * foo();
              struct { float b; } bar();
              struct { float b; } x() {
                int * a = foo();
                struct { float b; } b = bar();
                struct { float b; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_175060220820907436079.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_175060220820907436079.c:5:24: error: invalid initializer
                 struct { float b; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf22_175060220820907436079.c:6:29: error: invalid operands to binary + (have 'int *' and 'struct <anonymous>')
                 int * c = a + b;
                             ^

        */
        error("""
              int * foo();
              struct { float b; } bar();
              int * x() {
                int * a = foo();
                struct { float b; } b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_17786269606475092995.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_17786269606475092995.c:5:43: error: invalid operands to binary + (have 'int *' and 'int *')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf22_17786269606475092995.c:6:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              int * foo();
              struct { float b; } x() {
                int * a = foo();
                int * b = foo();
                struct { float b; } c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf22_18() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_188375289998528822962.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_188375289998528822962.c:6:34: warning: initialization makes integer from pointer without a cast
                 volatile int c = a + b;
                                  ^

        */
        warning("""
              int * foo();
              volatile int bar();
              volatile int x() {
                int * a = foo();
                volatile int b = bar();
                volatile int c = a + b;
                return c;
              }
                """)
        correct("""
              int * foo();
              volatile int bar();
              int * x() {
                int * a = foo();
                volatile int b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_189029806386667333324.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_189029806386667333324.c:5:36: error: invalid operands to binary + (have 'int *' and 'int *')
                 volatile int c = a + b;
                                    ^

        */
        error("""
              int * foo();
              volatile int x() {
                int * a = foo();
                int * b = foo();
                volatile int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf22_19() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_194486499752376767894.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_194486499752376767894.c:6:31: warning: initialization makes integer from pointer without a cast
                 const int c = a + b;
                               ^

        */
        warning("""
              int * foo();
              const int bar();
              const int x() {
                int * a = foo();
                const int b = bar();
                const int c = a + b;
                return c;
              }
                """)
        correct("""
              int * foo();
              const int bar();
              int * x() {
                int * a = foo();
                const int b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_19467287287282241021.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_19467287287282241021.c:5:33: error: invalid operands to binary + (have 'int *' and 'int *')
                 const int c = a + b;
                                 ^

        */
        error("""
              int * foo();
              const int x() {
                int * a = foo();
                int * b = foo();
                const int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf22_20() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_205865400232206481954.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_205865400232206481954.c:6:36: error: invalid operands to binary + (have 'int *' and 'double')
                 const double c = a + b;
                                    ^

        */
        error("""
              int * foo();
              const double bar();
              const double x() {
                int * a = foo();
                const double b = bar();
                const double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_206299601679938201547.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_206299601679938201547.c:6:29: error: invalid operands to binary + (have 'int *' and 'double')
                 int * c = a + b;
                             ^

        */
        error("""
              int * foo();
              const double bar();
              int * x() {
                int * a = foo();
                const double b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_208697915073010545450.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_208697915073010545450.c:5:36: error: invalid operands to binary + (have 'int *' and 'int *')
                 const double c = a + b;
                                    ^

        */
        error("""
              int * foo();
              const double x() {
                int * a = foo();
                int * b = foo();
                const double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf22_21() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_21698244238186868129.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_21698244238186868129.c:6:39: error: invalid operands to binary + (have 'int *' and 'double')
                 volatile double c = a + b;
                                       ^

        */
        error("""
              int * foo();
              volatile double bar();
              volatile double x() {
                int * a = foo();
                volatile double b = bar();
                volatile double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_216058762166275521055.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_216058762166275521055.c:6:29: error: invalid operands to binary + (have 'int *' and 'double')
                 int * c = a + b;
                             ^

        */
        error("""
              int * foo();
              volatile double bar();
              int * x() {
                int * a = foo();
                volatile double b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_216561953038218570188.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_216561953038218570188.c:5:39: error: invalid operands to binary + (have 'int *' and 'int *')
                 volatile double c = a + b;
                                       ^

        */
        error("""
              int * foo();
              volatile double x() {
                int * a = foo();
                int * b = foo();
                volatile double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf22_22() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_223398734544415281926.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_223398734544415281926.c:6:29: error: invalid operands to binary + (have 'int *' and 'int *')
                 int * c = a + b;
                             ^

        */
        error("""
              int * foo();
              int * bar();
              int * x() {
                int * a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_225217083088479155303.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_225217083088479155303.c:6:29: error: invalid operands to binary + (have 'int *' and 'int *')
                 int * c = a + b;
                             ^

        */
        error("""
              int * foo();
              int * bar();
              int * x() {
                int * a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_223369659145971485603.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_223369659145971485603.c:5:29: error: invalid operands to binary + (have 'int *' and 'int *')
                 int * c = a + b;
                             ^

        */
        error("""
              int * foo();
              int * x() {
                int * a = foo();
                int * b = foo();
                int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf22_23() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_234468812594181903703.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_234468812594181903703.c:6:35: error: invalid operands to binary + (have 'int *' and 'const int *')
                 const int * c = a + b;
                                   ^

        */
        error("""
              int * foo();
              const int * bar();
              const int * x() {
                int * a = foo();
                const int * b = bar();
                const int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_236742416676624728705.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_236742416676624728705.c:6:29: error: invalid operands to binary + (have 'int *' and 'const int *')
                 int * c = a + b;
                             ^

        */
        error("""
              int * foo();
              const int * bar();
              int * x() {
                int * a = foo();
                const int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_235892248757334119804.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_235892248757334119804.c:5:35: error: invalid operands to binary + (have 'int *' and 'int *')
                 const int * c = a + b;
                                   ^

        */
        error("""
              int * foo();
              const int * x() {
                int * a = foo();
                int * b = foo();
                const int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf22_24() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_246534077158972526865.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_246534077158972526865.c:6:38: error: invalid operands to binary + (have 'int *' and 'volatile int *')
                 volatile int * c = a + b;
                                      ^

        */
        error("""
              int * foo();
              volatile int * bar();
              volatile int * x() {
                int * a = foo();
                volatile int * b = bar();
                volatile int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_245934889721724468683.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_245934889721724468683.c:6:29: error: invalid operands to binary + (have 'int *' and 'volatile int *')
                 int * c = a + b;
                             ^

        */
        error("""
              int * foo();
              volatile int * bar();
              int * x() {
                int * a = foo();
                volatile int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf22_247480700552538000806.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf22_247480700552538000806.c:5:38: error: invalid operands to binary + (have 'int *' and 'int *')
                 volatile int * c = a + b;
                                      ^

        */
        error("""
              int * foo();
              volatile int * x() {
                int * a = foo();
                int * b = foo();
                volatile int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf23_0() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_0444928888240388793.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_0444928888240388793.c:6:26: warning: initialization makes integer from pointer without a cast
                 char c = a + b;
                          ^

        */
        warning("""
              const int * foo();
              char bar();
              char x() {
                const int * a = foo();
                char b = bar();
                char c = a + b;
                return c;
              }
                """)
        correct("""
              const int * foo();
              char bar();
              const int * x() {
                const int * a = foo();
                char b = bar();
                const int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_0491249834117037499.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_0491249834117037499.c:5:28: error: invalid operands to binary + (have 'const int *' and 'const int *')
                 char c = a + b;
                            ^

        */
        error("""
              const int * foo();
              char x() {
                const int * a = foo();
                const int * b = foo();
                char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf23_1() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_11243964902544404335.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_11243964902544404335.c:6:33: warning: initialization makes integer from pointer without a cast
                 signed char c = a + b;
                                 ^

        */
        warning("""
              const int * foo();
              signed char bar();
              signed char x() {
                const int * a = foo();
                signed char b = bar();
                signed char c = a + b;
                return c;
              }
                """)
        correct("""
              const int * foo();
              signed char bar();
              const int * x() {
                const int * a = foo();
                signed char b = bar();
                const int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_17767602305784184750.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_17767602305784184750.c:5:35: error: invalid operands to binary + (have 'const int *' and 'const int *')
                 signed char c = a + b;
                                   ^

        */
        error("""
              const int * foo();
              signed char x() {
                const int * a = foo();
                const int * b = foo();
                signed char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf23_2() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_21669882978172991075.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_21669882978172991075.c:6:35: warning: initialization makes integer from pointer without a cast
                 unsigned char c = a + b;
                                   ^

        */
        warning("""
              const int * foo();
              unsigned char bar();
              unsigned char x() {
                const int * a = foo();
                unsigned char b = bar();
                unsigned char c = a + b;
                return c;
              }
                """)
        correct("""
              const int * foo();
              unsigned char bar();
              const int * x() {
                const int * a = foo();
                unsigned char b = bar();
                const int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_26148016255272917638.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_26148016255272917638.c:5:37: error: invalid operands to binary + (have 'const int *' and 'const int *')
                 unsigned char c = a + b;
                                     ^

        */
        error("""
              const int * foo();
              unsigned char x() {
                const int * a = foo();
                const int * b = foo();
                unsigned char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf23_3() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_35932802770860294377.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_35932802770860294377.c:6:34: warning: initialization makes integer from pointer without a cast
                 unsigned int c = a + b;
                                  ^

        */
        warning("""
              const int * foo();
              unsigned int bar();
              unsigned int x() {
                const int * a = foo();
                unsigned int b = bar();
                unsigned int c = a + b;
                return c;
              }
                """)
        correct("""
              const int * foo();
              unsigned int bar();
              const int * x() {
                const int * a = foo();
                unsigned int b = bar();
                const int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_34889234200977421043.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_34889234200977421043.c:5:36: error: invalid operands to binary + (have 'const int *' and 'const int *')
                 unsigned int c = a + b;
                                    ^

        */
        error("""
              const int * foo();
              unsigned int x() {
                const int * a = foo();
                const int * b = foo();
                unsigned int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf23_4() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_48413999917151292016.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_48413999917151292016.c:6:32: warning: initialization makes integer from pointer without a cast
                 signed int c = a + b;
                                ^

        */
        warning("""
              const int * foo();
              signed int bar();
              signed int x() {
                const int * a = foo();
                signed int b = bar();
                signed int c = a + b;
                return c;
              }
                """)
        correct("""
              const int * foo();
              signed int bar();
              const int * x() {
                const int * a = foo();
                signed int b = bar();
                const int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_47464283329926730568.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_47464283329926730568.c:5:34: error: invalid operands to binary + (have 'const int *' and 'const int *')
                 signed int c = a + b;
                                  ^

        */
        error("""
              const int * foo();
              signed int x() {
                const int * a = foo();
                const int * b = foo();
                signed int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf23_5() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_57480179355040458147.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_57480179355040458147.c:6:26: warning: initialization makes integer from pointer without a cast
                 long c = a + b;
                          ^

        */
        warning("""
              const int * foo();
              long bar();
              long x() {
                const int * a = foo();
                long b = bar();
                long c = a + b;
                return c;
              }
                """)
        correct("""
              const int * foo();
              long bar();
              const int * x() {
                const int * a = foo();
                long b = bar();
                const int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_53565005981586487202.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_53565005981586487202.c:5:28: error: invalid operands to binary + (have 'const int *' and 'const int *')
                 long c = a + b;
                            ^

        */
        error("""
              const int * foo();
              long x() {
                const int * a = foo();
                const int * b = foo();
                long c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf23_6() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_6397503100845378467.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_6397503100845378467.c:6:29: error: invalid operands to binary + (have 'const int *' and 'float')
                 float c = a + b;
                             ^

        */
        error("""
              const int * foo();
              float bar();
              float x() {
                const int * a = foo();
                float b = bar();
                float c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_63206085110491319311.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_63206085110491319311.c:6:35: error: invalid operands to binary + (have 'const int *' and 'float')
                 const int * c = a + b;
                                   ^

        */
        error("""
              const int * foo();
              float bar();
              const int * x() {
                const int * a = foo();
                float b = bar();
                const int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_67356429133097879347.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_67356429133097879347.c:5:29: error: invalid operands to binary + (have 'const int *' and 'const int *')
                 float c = a + b;
                             ^

        */
        error("""
              const int * foo();
              float x() {
                const int * a = foo();
                const int * b = foo();
                float c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf23_7() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_75413241356203758926.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_75413241356203758926.c:6:30: error: invalid operands to binary + (have 'const int *' and 'double')
                 double c = a + b;
                              ^

        */
        error("""
              const int * foo();
              double bar();
              double x() {
                const int * a = foo();
                double b = bar();
                double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_76628662117699108649.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_76628662117699108649.c:6:35: error: invalid operands to binary + (have 'const int *' and 'double')
                 const int * c = a + b;
                                   ^

        */
        error("""
              const int * foo();
              double bar();
              const int * x() {
                const int * a = foo();
                double b = bar();
                const int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_74955928696364209021.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_74955928696364209021.c:5:30: error: invalid operands to binary + (have 'const int *' and 'const int *')
                 double c = a + b;
                              ^

        */
        error("""
              const int * foo();
              double x() {
                const int * a = foo();
                const int * b = foo();
                double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf23_8() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_84632778182584837070.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_84632778182584837070.c:6:35: error: invalid operands to binary + (have 'const int *' and 'long double')
                 long double c = a + b;
                                   ^

        */
        error("""
              const int * foo();
              long double bar();
              long double x() {
                const int * a = foo();
                long double b = bar();
                long double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_88127165601826720047.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_88127165601826720047.c:6:35: error: invalid operands to binary + (have 'const int *' and 'long double')
                 const int * c = a + b;
                                   ^

        */
        error("""
              const int * foo();
              long double bar();
              const int * x() {
                const int * a = foo();
                long double b = bar();
                const int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_8710706852237665177.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_8710706852237665177.c:5:35: error: invalid operands to binary + (have 'const int *' and 'const int *')
                 long double c = a + b;
                                   ^

        */
        error("""
              const int * foo();
              long double x() {
                const int * a = foo();
                const int * b = foo();
                long double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf23_9() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_9723373252491741545.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_9723373252491741545.c:6:29: error: invalid operands to binary + (have 'const int *' and 'int *')
                 int * c = a + b;
                             ^

        */
        error("""
              const int * foo();
              int * bar();
              int * x() {
                const int * a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_92249772676528243850.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_92249772676528243850.c:6:35: error: invalid operands to binary + (have 'const int *' and 'int *')
                 const int * c = a + b;
                                   ^

        */
        error("""
              const int * foo();
              int * bar();
              const int * x() {
                const int * a = foo();
                int * b = bar();
                const int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_98814213784715183754.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_98814213784715183754.c:5:29: error: invalid operands to binary + (have 'const int *' and 'const int *')
                 int * c = a + b;
                             ^

        */
        error("""
              const int * foo();
              int * x() {
                const int * a = foo();
                const int * b = foo();
                int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf23_10() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_10831941915358588503.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_10831941915358588503.c:6:30: error: invalid operands to binary + (have 'const int *' and 'int **')
                 int ** c = a + b;
                              ^

        */
        error("""
              const int * foo();
              int ** bar();
              int ** x() {
                const int * a = foo();
                int ** b = bar();
                int ** c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_10999251657726471348.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_10999251657726471348.c:6:35: error: invalid operands to binary + (have 'const int *' and 'int **')
                 const int * c = a + b;
                                   ^

        */
        error("""
              const int * foo();
              int ** bar();
              const int * x() {
                const int * a = foo();
                int ** b = bar();
                const int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_10383813849295582281.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_10383813849295582281.c:5:30: error: invalid operands to binary + (have 'const int *' and 'const int *')
                 int ** c = a + b;
                              ^

        */
        error("""
              const int * foo();
              int ** x() {
                const int * a = foo();
                const int * b = foo();
                int ** c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf23_11() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_116568111348852164172.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_116568111348852164172.c:6:30: error: invalid operands to binary + (have 'const int *' and 'char *')
                 char * c = a + b;
                              ^

        */
        error("""
              const int * foo();
              char * bar();
              char * x() {
                const int * a = foo();
                char * b = bar();
                char * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_117895599906158422482.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_117895599906158422482.c:6:35: error: invalid operands to binary + (have 'const int *' and 'char *')
                 const int * c = a + b;
                                   ^

        */
        error("""
              const int * foo();
              char * bar();
              const int * x() {
                const int * a = foo();
                char * b = bar();
                const int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_118934630916244453645.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_118934630916244453645.c:5:30: error: invalid operands to binary + (have 'const int *' and 'const int *')
                 char * c = a + b;
                              ^

        */
        error("""
              const int * foo();
              char * x() {
                const int * a = foo();
                const int * b = foo();
                char * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf23_12() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_122932325234307302887.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_122932325234307302887.c:6:32: error: invalid operands to binary + (have 'const int *' and 'double *')
                 double * c = a + b;
                                ^

        */
        error("""
              const int * foo();
              double * bar();
              double * x() {
                const int * a = foo();
                double * b = bar();
                double * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_12887193964335353329.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_12887193964335353329.c:6:35: error: invalid operands to binary + (have 'const int *' and 'double *')
                 const int * c = a + b;
                                   ^

        */
        error("""
              const int * foo();
              double * bar();
              const int * x() {
                const int * a = foo();
                double * b = bar();
                const int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_122819189313452606894.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_122819189313452606894.c:5:32: error: invalid operands to binary + (have 'const int *' and 'const int *')
                 double * c = a + b;
                                ^

        */
        error("""
              const int * foo();
              double * x() {
                const int * a = foo();
                const int * b = foo();
                double * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf23_13() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_139034821437699644911.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_139034821437699644911.c:8:32: error: invalid operands to binary + (have 'const int *' and 'struct S')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              const int * foo();
              struct S bar();
              struct S x() {
                const int * a = foo();
                struct S b = bar();
                struct S c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_13145954699949499175.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_13145954699949499175.c:8:35: error: invalid operands to binary + (have 'const int *' and 'struct S')
                 const int * c = a + b;
                                   ^

        */
        error("""
              struct S { int x; int y; };

              const int * foo();
              struct S bar();
              const int * x() {
                const int * a = foo();
                struct S b = bar();
                const int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_135123617103533993051.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_135123617103533993051.c:7:32: error: invalid operands to binary + (have 'const int *' and 'const int *')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              const int * foo();
              struct S x() {
                const int * a = foo();
                const int * b = foo();
                struct S c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf23_14() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_143458463823765934454.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_143458463823765934454.c:8:32: error: invalid operands to binary + (have 'const int *' and 'struct T')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              const int * foo();
              struct T bar();
              struct T x() {
                const int * a = foo();
                struct T b = bar();
                struct T c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_148769382279194989975.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_148769382279194989975.c:8:35: error: invalid operands to binary + (have 'const int *' and 'struct T')
                 const int * c = a + b;
                                   ^

        */
        error("""
              struct T { int x; int y; int z; };

              const int * foo();
              struct T bar();
              const int * x() {
                const int * a = foo();
                struct T b = bar();
                const int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_145251246825196177197.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_145251246825196177197.c:7:32: error: invalid operands to binary + (have 'const int *' and 'const int *')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              const int * foo();
              struct T x() {
                const int * a = foo();
                const int * b = foo();
                struct T c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf23_15() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_153935855400055488745.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_153935855400055488745.c:8:40: error: invalid operands to binary + (have 'const int *' and 'struct_anonymous')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              const int * foo();
              struct_anonymous bar();
              struct_anonymous x() {
                const int * a = foo();
                struct_anonymous b = bar();
                struct_anonymous c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_158458725984515520412.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_158458725984515520412.c:8:35: error: invalid operands to binary + (have 'const int *' and 'struct_anonymous')
                 const int * c = a + b;
                                   ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              const int * foo();
              struct_anonymous bar();
              const int * x() {
                const int * a = foo();
                struct_anonymous b = bar();
                const int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_154106405202165859833.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_154106405202165859833.c:7:40: error: invalid operands to binary + (have 'const int *' and 'const int *')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              const int * foo();
              struct_anonymous x() {
                const int * a = foo();
                const int * b = foo();
                struct_anonymous c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf23_16() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_161566397713265400786.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_161566397713265400786.c:5:24: error: invalid initializer
                 struct { int a; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf23_161566397713265400786.c:6:41: error: invalid operands to binary + (have 'const int *' and 'struct <anonymous>')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf23_161566397713265400786.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              const int * foo();
              struct { int a; } bar();
              struct { int a; } x() {
                const int * a = foo();
                struct { int a; } b = bar();
                struct { int a; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_164476353846329211.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_164476353846329211.c:5:24: error: invalid initializer
                 struct { int a; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf23_164476353846329211.c:6:35: error: invalid operands to binary + (have 'const int *' and 'struct <anonymous>')
                 const int * c = a + b;
                                   ^

        */
        error("""
              const int * foo();
              struct { int a; } bar();
              const int * x() {
                const int * a = foo();
                struct { int a; } b = bar();
                const int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_163351515139661040901.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_163351515139661040901.c:5:41: error: invalid operands to binary + (have 'const int *' and 'const int *')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf23_163351515139661040901.c:6:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              const int * foo();
              struct { int a; } x() {
                const int * a = foo();
                const int * b = foo();
                struct { int a; } c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf23_17() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_178582930980064498152.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_178582930980064498152.c:5:24: error: invalid initializer
                 struct { float b; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf23_178582930980064498152.c:6:43: error: invalid operands to binary + (have 'const int *' and 'struct <anonymous>')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf23_178582930980064498152.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              const int * foo();
              struct { float b; } bar();
              struct { float b; } x() {
                const int * a = foo();
                struct { float b; } b = bar();
                struct { float b; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_179160752015171252027.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_179160752015171252027.c:5:24: error: invalid initializer
                 struct { float b; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf23_179160752015171252027.c:6:35: error: invalid operands to binary + (have 'const int *' and 'struct <anonymous>')
                 const int * c = a + b;
                                   ^

        */
        error("""
              const int * foo();
              struct { float b; } bar();
              const int * x() {
                const int * a = foo();
                struct { float b; } b = bar();
                const int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_177940813314128139195.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_177940813314128139195.c:5:43: error: invalid operands to binary + (have 'const int *' and 'const int *')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf23_177940813314128139195.c:6:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              const int * foo();
              struct { float b; } x() {
                const int * a = foo();
                const int * b = foo();
                struct { float b; } c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf23_18() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_188048034891140800360.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_188048034891140800360.c:6:34: warning: initialization makes integer from pointer without a cast
                 volatile int c = a + b;
                                  ^

        */
        warning("""
              const int * foo();
              volatile int bar();
              volatile int x() {
                const int * a = foo();
                volatile int b = bar();
                volatile int c = a + b;
                return c;
              }
                """)
        correct("""
              const int * foo();
              volatile int bar();
              const int * x() {
                const int * a = foo();
                volatile int b = bar();
                const int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_185340419306574260576.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_185340419306574260576.c:5:36: error: invalid operands to binary + (have 'const int *' and 'const int *')
                 volatile int c = a + b;
                                    ^

        */
        error("""
              const int * foo();
              volatile int x() {
                const int * a = foo();
                const int * b = foo();
                volatile int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf23_19() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_19127572211118912941.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_19127572211118912941.c:6:31: warning: initialization makes integer from pointer without a cast
                 const int c = a + b;
                               ^

        */
        warning("""
              const int * foo();
              const int bar();
              const int x() {
                const int * a = foo();
                const int b = bar();
                const int c = a + b;
                return c;
              }
                """)
        correct("""
              const int * foo();
              const int bar();
              const int * x() {
                const int * a = foo();
                const int b = bar();
                const int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_198208509721682905666.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_198208509721682905666.c:5:33: error: invalid operands to binary + (have 'const int *' and 'const int *')
                 const int c = a + b;
                                 ^

        */
        error("""
              const int * foo();
              const int x() {
                const int * a = foo();
                const int * b = foo();
                const int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf23_20() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_201635851000809391896.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_201635851000809391896.c:6:36: error: invalid operands to binary + (have 'const int *' and 'double')
                 const double c = a + b;
                                    ^

        */
        error("""
              const int * foo();
              const double bar();
              const double x() {
                const int * a = foo();
                const double b = bar();
                const double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_20857774249654486172.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_20857774249654486172.c:6:35: error: invalid operands to binary + (have 'const int *' and 'double')
                 const int * c = a + b;
                                   ^

        */
        error("""
              const int * foo();
              const double bar();
              const int * x() {
                const int * a = foo();
                const double b = bar();
                const int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_204136615842484055423.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_204136615842484055423.c:5:36: error: invalid operands to binary + (have 'const int *' and 'const int *')
                 const double c = a + b;
                                    ^

        */
        error("""
              const int * foo();
              const double x() {
                const int * a = foo();
                const int * b = foo();
                const double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf23_21() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_211407202625257208461.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_211407202625257208461.c:6:39: error: invalid operands to binary + (have 'const int *' and 'double')
                 volatile double c = a + b;
                                       ^

        */
        error("""
              const int * foo();
              volatile double bar();
              volatile double x() {
                const int * a = foo();
                volatile double b = bar();
                volatile double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_214579951847240461606.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_214579951847240461606.c:6:35: error: invalid operands to binary + (have 'const int *' and 'double')
                 const int * c = a + b;
                                   ^

        */
        error("""
              const int * foo();
              volatile double bar();
              const int * x() {
                const int * a = foo();
                volatile double b = bar();
                const int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_217180975220769781465.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_217180975220769781465.c:5:39: error: invalid operands to binary + (have 'const int *' and 'const int *')
                 volatile double c = a + b;
                                       ^

        */
        error("""
              const int * foo();
              volatile double x() {
                const int * a = foo();
                const int * b = foo();
                volatile double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf23_22() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_221251142725606899817.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_221251142725606899817.c:6:29: error: invalid operands to binary + (have 'const int *' and 'int *')
                 int * c = a + b;
                             ^

        */
        error("""
              const int * foo();
              int * bar();
              int * x() {
                const int * a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_227198583646221231467.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_227198583646221231467.c:6:35: error: invalid operands to binary + (have 'const int *' and 'int *')
                 const int * c = a + b;
                                   ^

        */
        error("""
              const int * foo();
              int * bar();
              const int * x() {
                const int * a = foo();
                int * b = bar();
                const int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_224543309253188997850.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_224543309253188997850.c:5:29: error: invalid operands to binary + (have 'const int *' and 'const int *')
                 int * c = a + b;
                             ^

        */
        error("""
              const int * foo();
              int * x() {
                const int * a = foo();
                const int * b = foo();
                int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf23_23() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_234889709227037576202.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_234889709227037576202.c:6:35: error: invalid operands to binary + (have 'const int *' and 'const int *')
                 const int * c = a + b;
                                   ^

        */
        error("""
              const int * foo();
              const int * bar();
              const int * x() {
                const int * a = foo();
                const int * b = bar();
                const int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_233311451853810320463.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_233311451853810320463.c:6:35: error: invalid operands to binary + (have 'const int *' and 'const int *')
                 const int * c = a + b;
                                   ^

        */
        error("""
              const int * foo();
              const int * bar();
              const int * x() {
                const int * a = foo();
                const int * b = bar();
                const int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_235458829583166851408.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_235458829583166851408.c:5:35: error: invalid operands to binary + (have 'const int *' and 'const int *')
                 const int * c = a + b;
                                   ^

        */
        error("""
              const int * foo();
              const int * x() {
                const int * a = foo();
                const int * b = foo();
                const int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf23_24() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_245101093561775527375.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_245101093561775527375.c:6:38: error: invalid operands to binary + (have 'const int *' and 'volatile int *')
                 volatile int * c = a + b;
                                      ^

        */
        error("""
              const int * foo();
              volatile int * bar();
              volatile int * x() {
                const int * a = foo();
                volatile int * b = bar();
                volatile int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_242250820911348154635.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_242250820911348154635.c:6:35: error: invalid operands to binary + (have 'const int *' and 'volatile int *')
                 const int * c = a + b;
                                   ^

        */
        error("""
              const int * foo();
              volatile int * bar();
              const int * x() {
                const int * a = foo();
                volatile int * b = bar();
                const int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf23_241309080854543785494.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf23_241309080854543785494.c:5:38: error: invalid operands to binary + (have 'const int *' and 'const int *')
                 volatile int * c = a + b;
                                      ^

        */
        error("""
              const int * foo();
              volatile int * x() {
                const int * a = foo();
                const int * b = foo();
                volatile int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf24_0() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_06398387702208171551.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_06398387702208171551.c:6:26: warning: initialization makes integer from pointer without a cast
                 char c = a + b;
                          ^

        */
        warning("""
              volatile int * foo();
              char bar();
              char x() {
                volatile int * a = foo();
                char b = bar();
                char c = a + b;
                return c;
              }
                """)
        correct("""
              volatile int * foo();
              char bar();
              volatile int * x() {
                volatile int * a = foo();
                char b = bar();
                volatile int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_06332216554526179968.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_06332216554526179968.c:5:28: error: invalid operands to binary + (have 'volatile int *' and 'volatile int *')
                 char c = a + b;
                            ^

        */
        error("""
              volatile int * foo();
              char x() {
                volatile int * a = foo();
                volatile int * b = foo();
                char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf24_1() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_17071259017292373654.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_17071259017292373654.c:6:33: warning: initialization makes integer from pointer without a cast
                 signed char c = a + b;
                                 ^

        */
        warning("""
              volatile int * foo();
              signed char bar();
              signed char x() {
                volatile int * a = foo();
                signed char b = bar();
                signed char c = a + b;
                return c;
              }
                """)
        correct("""
              volatile int * foo();
              signed char bar();
              volatile int * x() {
                volatile int * a = foo();
                signed char b = bar();
                volatile int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_13128504884292425219.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_13128504884292425219.c:5:35: error: invalid operands to binary + (have 'volatile int *' and 'volatile int *')
                 signed char c = a + b;
                                   ^

        */
        error("""
              volatile int * foo();
              signed char x() {
                volatile int * a = foo();
                volatile int * b = foo();
                signed char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf24_2() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_28069366374698691589.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_28069366374698691589.c:6:35: warning: initialization makes integer from pointer without a cast
                 unsigned char c = a + b;
                                   ^

        */
        warning("""
              volatile int * foo();
              unsigned char bar();
              unsigned char x() {
                volatile int * a = foo();
                unsigned char b = bar();
                unsigned char c = a + b;
                return c;
              }
                """)
        correct("""
              volatile int * foo();
              unsigned char bar();
              volatile int * x() {
                volatile int * a = foo();
                unsigned char b = bar();
                volatile int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_23746781072343188613.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_23746781072343188613.c:5:37: error: invalid operands to binary + (have 'volatile int *' and 'volatile int *')
                 unsigned char c = a + b;
                                     ^

        */
        error("""
              volatile int * foo();
              unsigned char x() {
                volatile int * a = foo();
                volatile int * b = foo();
                unsigned char c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf24_3() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_31975764316319239204.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_31975764316319239204.c:6:34: warning: initialization makes integer from pointer without a cast
                 unsigned int c = a + b;
                                  ^

        */
        warning("""
              volatile int * foo();
              unsigned int bar();
              unsigned int x() {
                volatile int * a = foo();
                unsigned int b = bar();
                unsigned int c = a + b;
                return c;
              }
                """)
        correct("""
              volatile int * foo();
              unsigned int bar();
              volatile int * x() {
                volatile int * a = foo();
                unsigned int b = bar();
                volatile int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_3596134160453369398.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_3596134160453369398.c:5:36: error: invalid operands to binary + (have 'volatile int *' and 'volatile int *')
                 unsigned int c = a + b;
                                    ^

        */
        error("""
              volatile int * foo();
              unsigned int x() {
                volatile int * a = foo();
                volatile int * b = foo();
                unsigned int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf24_4() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_44195065061825424559.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_44195065061825424559.c:6:32: warning: initialization makes integer from pointer without a cast
                 signed int c = a + b;
                                ^

        */
        warning("""
              volatile int * foo();
              signed int bar();
              signed int x() {
                volatile int * a = foo();
                signed int b = bar();
                signed int c = a + b;
                return c;
              }
                """)
        correct("""
              volatile int * foo();
              signed int bar();
              volatile int * x() {
                volatile int * a = foo();
                signed int b = bar();
                volatile int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_45949978745329476867.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_45949978745329476867.c:5:34: error: invalid operands to binary + (have 'volatile int *' and 'volatile int *')
                 signed int c = a + b;
                                  ^

        */
        error("""
              volatile int * foo();
              signed int x() {
                volatile int * a = foo();
                volatile int * b = foo();
                signed int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf24_5() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_53716493349797323873.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_53716493349797323873.c:6:26: warning: initialization makes integer from pointer without a cast
                 long c = a + b;
                          ^

        */
        warning("""
              volatile int * foo();
              long bar();
              long x() {
                volatile int * a = foo();
                long b = bar();
                long c = a + b;
                return c;
              }
                """)
        correct("""
              volatile int * foo();
              long bar();
              volatile int * x() {
                volatile int * a = foo();
                long b = bar();
                volatile int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_57744843500356201152.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_57744843500356201152.c:5:28: error: invalid operands to binary + (have 'volatile int *' and 'volatile int *')
                 long c = a + b;
                            ^

        */
        error("""
              volatile int * foo();
              long x() {
                volatile int * a = foo();
                volatile int * b = foo();
                long c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf24_6() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_65181906515308292782.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_65181906515308292782.c:6:29: error: invalid operands to binary + (have 'volatile int *' and 'float')
                 float c = a + b;
                             ^

        */
        error("""
              volatile int * foo();
              float bar();
              float x() {
                volatile int * a = foo();
                float b = bar();
                float c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_64914277069711189910.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_64914277069711189910.c:6:38: error: invalid operands to binary + (have 'volatile int *' and 'float')
                 volatile int * c = a + b;
                                      ^

        */
        error("""
              volatile int * foo();
              float bar();
              volatile int * x() {
                volatile int * a = foo();
                float b = bar();
                volatile int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_6639370333476002493.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_6639370333476002493.c:5:29: error: invalid operands to binary + (have 'volatile int *' and 'volatile int *')
                 float c = a + b;
                             ^

        */
        error("""
              volatile int * foo();
              float x() {
                volatile int * a = foo();
                volatile int * b = foo();
                float c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf24_7() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_78371698309182687068.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_78371698309182687068.c:6:30: error: invalid operands to binary + (have 'volatile int *' and 'double')
                 double c = a + b;
                              ^

        */
        error("""
              volatile int * foo();
              double bar();
              double x() {
                volatile int * a = foo();
                double b = bar();
                double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_7290666863940324970.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_7290666863940324970.c:6:38: error: invalid operands to binary + (have 'volatile int *' and 'double')
                 volatile int * c = a + b;
                                      ^

        */
        error("""
              volatile int * foo();
              double bar();
              volatile int * x() {
                volatile int * a = foo();
                double b = bar();
                volatile int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_77557579125074640139.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_77557579125074640139.c:5:30: error: invalid operands to binary + (have 'volatile int *' and 'volatile int *')
                 double c = a + b;
                              ^

        */
        error("""
              volatile int * foo();
              double x() {
                volatile int * a = foo();
                volatile int * b = foo();
                double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf24_8() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_81010097349510759564.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_81010097349510759564.c:6:35: error: invalid operands to binary + (have 'volatile int *' and 'long double')
                 long double c = a + b;
                                   ^

        */
        error("""
              volatile int * foo();
              long double bar();
              long double x() {
                volatile int * a = foo();
                long double b = bar();
                long double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_87334129204174785830.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_87334129204174785830.c:6:38: error: invalid operands to binary + (have 'volatile int *' and 'long double')
                 volatile int * c = a + b;
                                      ^

        */
        error("""
              volatile int * foo();
              long double bar();
              volatile int * x() {
                volatile int * a = foo();
                long double b = bar();
                volatile int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_83820498449898142805.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_83820498449898142805.c:5:35: error: invalid operands to binary + (have 'volatile int *' and 'volatile int *')
                 long double c = a + b;
                                   ^

        */
        error("""
              volatile int * foo();
              long double x() {
                volatile int * a = foo();
                volatile int * b = foo();
                long double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf24_9() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_95910878171733751161.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_95910878171733751161.c:6:29: error: invalid operands to binary + (have 'volatile int *' and 'int *')
                 int * c = a + b;
                             ^

        */
        error("""
              volatile int * foo();
              int * bar();
              int * x() {
                volatile int * a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_98097291160257239266.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_98097291160257239266.c:6:38: error: invalid operands to binary + (have 'volatile int *' and 'int *')
                 volatile int * c = a + b;
                                      ^

        */
        error("""
              volatile int * foo();
              int * bar();
              volatile int * x() {
                volatile int * a = foo();
                int * b = bar();
                volatile int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_93367897070860777526.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_93367897070860777526.c:5:29: error: invalid operands to binary + (have 'volatile int *' and 'volatile int *')
                 int * c = a + b;
                             ^

        */
        error("""
              volatile int * foo();
              int * x() {
                volatile int * a = foo();
                volatile int * b = foo();
                int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf24_10() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_103255077026356351357.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_103255077026356351357.c:6:30: error: invalid operands to binary + (have 'volatile int *' and 'int **')
                 int ** c = a + b;
                              ^

        */
        error("""
              volatile int * foo();
              int ** bar();
              int ** x() {
                volatile int * a = foo();
                int ** b = bar();
                int ** c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_103695221778407499563.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_103695221778407499563.c:6:38: error: invalid operands to binary + (have 'volatile int *' and 'int **')
                 volatile int * c = a + b;
                                      ^

        */
        error("""
              volatile int * foo();
              int ** bar();
              volatile int * x() {
                volatile int * a = foo();
                int ** b = bar();
                volatile int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_105260276266909916559.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_105260276266909916559.c:5:30: error: invalid operands to binary + (have 'volatile int *' and 'volatile int *')
                 int ** c = a + b;
                              ^

        */
        error("""
              volatile int * foo();
              int ** x() {
                volatile int * a = foo();
                volatile int * b = foo();
                int ** c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf24_11() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_113746905703006489426.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_113746905703006489426.c:6:30: error: invalid operands to binary + (have 'volatile int *' and 'char *')
                 char * c = a + b;
                              ^

        */
        error("""
              volatile int * foo();
              char * bar();
              char * x() {
                volatile int * a = foo();
                char * b = bar();
                char * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_111694859148764562425.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_111694859148764562425.c:6:38: error: invalid operands to binary + (have 'volatile int *' and 'char *')
                 volatile int * c = a + b;
                                      ^

        */
        error("""
              volatile int * foo();
              char * bar();
              volatile int * x() {
                volatile int * a = foo();
                char * b = bar();
                volatile int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_113012609782391268414.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_113012609782391268414.c:5:30: error: invalid operands to binary + (have 'volatile int *' and 'volatile int *')
                 char * c = a + b;
                              ^

        */
        error("""
              volatile int * foo();
              char * x() {
                volatile int * a = foo();
                volatile int * b = foo();
                char * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf24_12() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_122935328660263635376.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_122935328660263635376.c:6:32: error: invalid operands to binary + (have 'volatile int *' and 'double *')
                 double * c = a + b;
                                ^

        */
        error("""
              volatile int * foo();
              double * bar();
              double * x() {
                volatile int * a = foo();
                double * b = bar();
                double * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_12788515750738837271.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_12788515750738837271.c:6:38: error: invalid operands to binary + (have 'volatile int *' and 'double *')
                 volatile int * c = a + b;
                                      ^

        */
        error("""
              volatile int * foo();
              double * bar();
              volatile int * x() {
                volatile int * a = foo();
                double * b = bar();
                volatile int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_127957145381112210455.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_127957145381112210455.c:5:32: error: invalid operands to binary + (have 'volatile int *' and 'volatile int *')
                 double * c = a + b;
                                ^

        */
        error("""
              volatile int * foo();
              double * x() {
                volatile int * a = foo();
                volatile int * b = foo();
                double * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf24_13() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_134277092967800646325.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_134277092967800646325.c:8:32: error: invalid operands to binary + (have 'volatile int *' and 'struct S')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              volatile int * foo();
              struct S bar();
              struct S x() {
                volatile int * a = foo();
                struct S b = bar();
                struct S c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_136756146417409994212.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_136756146417409994212.c:8:38: error: invalid operands to binary + (have 'volatile int *' and 'struct S')
                 volatile int * c = a + b;
                                      ^

        */
        error("""
              struct S { int x; int y; };

              volatile int * foo();
              struct S bar();
              volatile int * x() {
                volatile int * a = foo();
                struct S b = bar();
                volatile int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_136859853575448261154.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_136859853575448261154.c:7:32: error: invalid operands to binary + (have 'volatile int *' and 'volatile int *')
                 struct S c = a + b;
                                ^

        */
        error("""
              struct S { int x; int y; };

              volatile int * foo();
              struct S x() {
                volatile int * a = foo();
                volatile int * b = foo();
                struct S c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf24_14() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_144268250199067473754.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_144268250199067473754.c:8:32: error: invalid operands to binary + (have 'volatile int *' and 'struct T')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              volatile int * foo();
              struct T bar();
              struct T x() {
                volatile int * a = foo();
                struct T b = bar();
                struct T c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_147836278233183073199.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_147836278233183073199.c:8:38: error: invalid operands to binary + (have 'volatile int *' and 'struct T')
                 volatile int * c = a + b;
                                      ^

        */
        error("""
              struct T { int x; int y; int z; };

              volatile int * foo();
              struct T bar();
              volatile int * x() {
                volatile int * a = foo();
                struct T b = bar();
                volatile int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_142875815545169160674.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_142875815545169160674.c:7:32: error: invalid operands to binary + (have 'volatile int *' and 'volatile int *')
                 struct T c = a + b;
                                ^

        */
        error("""
              struct T { int x; int y; int z; };

              volatile int * foo();
              struct T x() {
                volatile int * a = foo();
                volatile int * b = foo();
                struct T c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf24_15() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_153764564972662023057.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_153764564972662023057.c:8:40: error: invalid operands to binary + (have 'volatile int *' and 'struct_anonymous')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              volatile int * foo();
              struct_anonymous bar();
              struct_anonymous x() {
                volatile int * a = foo();
                struct_anonymous b = bar();
                struct_anonymous c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_155741508098611497345.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_155741508098611497345.c:8:38: error: invalid operands to binary + (have 'volatile int *' and 'struct_anonymous')
                 volatile int * c = a + b;
                                      ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              volatile int * foo();
              struct_anonymous bar();
              volatile int * x() {
                volatile int * a = foo();
                struct_anonymous b = bar();
                volatile int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_154441210248571422416.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_154441210248571422416.c:7:40: error: invalid operands to binary + (have 'volatile int *' and 'volatile int *')
                 struct_anonymous c = a + b;
                                        ^

        */
        error("""
              typedef struct { int x; } struct_anonymous;

              volatile int * foo();
              struct_anonymous x() {
                volatile int * a = foo();
                volatile int * b = foo();
                struct_anonymous c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf24_16() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_163652467531700666502.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_163652467531700666502.c:5:24: error: invalid initializer
                 struct { int a; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf24_163652467531700666502.c:6:41: error: invalid operands to binary + (have 'volatile int *' and 'struct <anonymous>')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf24_163652467531700666502.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              volatile int * foo();
              struct { int a; } bar();
              struct { int a; } x() {
                volatile int * a = foo();
                struct { int a; } b = bar();
                struct { int a; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_168622381773098952292.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_168622381773098952292.c:5:24: error: invalid initializer
                 struct { int a; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf24_168622381773098952292.c:6:38: error: invalid operands to binary + (have 'volatile int *' and 'struct <anonymous>')
                 volatile int * c = a + b;
                                      ^

        */
        error("""
              volatile int * foo();
              struct { int a; } bar();
              volatile int * x() {
                volatile int * a = foo();
                struct { int a; } b = bar();
                volatile int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_16838574870347011089.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_16838574870347011089.c:5:41: error: invalid operands to binary + (have 'volatile int *' and 'volatile int *')
                 struct { int a; } c = a + b;
                                         ^
C:\Users\ckaestne\AppData\Local\Temp\conf24_16838574870347011089.c:6:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              volatile int * foo();
              struct { int a; } x() {
                volatile int * a = foo();
                volatile int * b = foo();
                struct { int a; } c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf24_17() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_177511867674372146652.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_177511867674372146652.c:5:24: error: invalid initializer
                 struct { float b; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf24_177511867674372146652.c:6:43: error: invalid operands to binary + (have 'volatile int *' and 'struct <anonymous>')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf24_177511867674372146652.c:7:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              volatile int * foo();
              struct { float b; } bar();
              struct { float b; } x() {
                volatile int * a = foo();
                struct { float b; } b = bar();
                struct { float b; } c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_17895683292562978074.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_17895683292562978074.c:5:24: error: invalid initializer
                 struct { float b; } b = bar();
                        ^
C:\Users\ckaestne\AppData\Local\Temp\conf24_17895683292562978074.c:6:38: error: invalid operands to binary + (have 'volatile int *' and 'struct <anonymous>')
                 volatile int * c = a + b;
                                      ^

        */
        error("""
              volatile int * foo();
              struct { float b; } bar();
              volatile int * x() {
                volatile int * a = foo();
                struct { float b; } b = bar();
                volatile int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_179118336272580782225.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_179118336272580782225.c:5:43: error: invalid operands to binary + (have 'volatile int *' and 'volatile int *')
                 struct { float b; } c = a + b;
                                           ^
C:\Users\ckaestne\AppData\Local\Temp\conf24_179118336272580782225.c:6:17: error: incompatible types when returning type 'struct <anonymous>' but 'struct <anonymous>' was expected
                 return c;
                 ^

        */
        error("""
              volatile int * foo();
              struct { float b; } x() {
                volatile int * a = foo();
                volatile int * b = foo();
                struct { float b; } c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf24_18() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_188036588505286984029.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_188036588505286984029.c:6:34: warning: initialization makes integer from pointer without a cast
                 volatile int c = a + b;
                                  ^

        */
        warning("""
              volatile int * foo();
              volatile int bar();
              volatile int x() {
                volatile int * a = foo();
                volatile int b = bar();
                volatile int c = a + b;
                return c;
              }
                """)
        correct("""
              volatile int * foo();
              volatile int bar();
              volatile int * x() {
                volatile int * a = foo();
                volatile int b = bar();
                volatile int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_184591258092291331950.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_184591258092291331950.c:5:36: error: invalid operands to binary + (have 'volatile int *' and 'volatile int *')
                 volatile int c = a + b;
                                    ^

        */
        error("""
              volatile int * foo();
              volatile int x() {
                volatile int * a = foo();
                volatile int * b = foo();
                volatile int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf24_19() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_196962737897976225568.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_196962737897976225568.c:6:31: warning: initialization makes integer from pointer without a cast
                 const int c = a + b;
                               ^

        */
        warning("""
              volatile int * foo();
              const int bar();
              const int x() {
                volatile int * a = foo();
                const int b = bar();
                const int c = a + b;
                return c;
              }
                """)
        correct("""
              volatile int * foo();
              const int bar();
              volatile int * x() {
                volatile int * a = foo();
                const int b = bar();
                volatile int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_194472768513822969480.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_194472768513822969480.c:5:33: error: invalid operands to binary + (have 'volatile int *' and 'volatile int *')
                 const int c = a + b;
                                 ^

        */
        error("""
              volatile int * foo();
              const int x() {
                volatile int * a = foo();
                volatile int * b = foo();
                const int c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf24_20() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_20964336790885611398.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_20964336790885611398.c:6:36: error: invalid operands to binary + (have 'volatile int *' and 'double')
                 const double c = a + b;
                                    ^

        */
        error("""
              volatile int * foo();
              const double bar();
              const double x() {
                volatile int * a = foo();
                const double b = bar();
                const double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_209035930839721814543.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_209035930839721814543.c:6:38: error: invalid operands to binary + (have 'volatile int *' and 'double')
                 volatile int * c = a + b;
                                      ^

        */
        error("""
              volatile int * foo();
              const double bar();
              volatile int * x() {
                volatile int * a = foo();
                const double b = bar();
                volatile int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_205441078599227369198.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_205441078599227369198.c:5:36: error: invalid operands to binary + (have 'volatile int *' and 'volatile int *')
                 const double c = a + b;
                                    ^

        */
        error("""
              volatile int * foo();
              const double x() {
                volatile int * a = foo();
                volatile int * b = foo();
                const double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf24_21() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_219081713127515158793.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_219081713127515158793.c:6:39: error: invalid operands to binary + (have 'volatile int *' and 'double')
                 volatile double c = a + b;
                                       ^

        */
        error("""
              volatile int * foo();
              volatile double bar();
              volatile double x() {
                volatile int * a = foo();
                volatile double b = bar();
                volatile double c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_212486522081175315207.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_212486522081175315207.c:6:38: error: invalid operands to binary + (have 'volatile int *' and 'double')
                 volatile int * c = a + b;
                                      ^

        */
        error("""
              volatile int * foo();
              volatile double bar();
              volatile int * x() {
                volatile int * a = foo();
                volatile double b = bar();
                volatile int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_216206096909278214976.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_216206096909278214976.c:5:39: error: invalid operands to binary + (have 'volatile int *' and 'volatile int *')
                 volatile double c = a + b;
                                       ^

        */
        error("""
              volatile int * foo();
              volatile double x() {
                volatile int * a = foo();
                volatile int * b = foo();
                volatile double c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf24_22() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_227027486757268257621.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_227027486757268257621.c:6:29: error: invalid operands to binary + (have 'volatile int *' and 'int *')
                 int * c = a + b;
                             ^

        */
        error("""
              volatile int * foo();
              int * bar();
              int * x() {
                volatile int * a = foo();
                int * b = bar();
                int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_228700673019628685273.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_228700673019628685273.c:6:38: error: invalid operands to binary + (have 'volatile int *' and 'int *')
                 volatile int * c = a + b;
                                      ^

        */
        error("""
              volatile int * foo();
              int * bar();
              volatile int * x() {
                volatile int * a = foo();
                int * b = bar();
                volatile int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_225817264092145190170.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_225817264092145190170.c:5:29: error: invalid operands to binary + (have 'volatile int *' and 'volatile int *')
                 int * c = a + b;
                             ^

        */
        error("""
              volatile int * foo();
              int * x() {
                volatile int * a = foo();
                volatile int * b = foo();
                int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf24_23() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_239090282653147401710.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_239090282653147401710.c:6:35: error: invalid operands to binary + (have 'volatile int *' and 'const int *')
                 const int * c = a + b;
                                   ^

        */
        error("""
              volatile int * foo();
              const int * bar();
              const int * x() {
                volatile int * a = foo();
                const int * b = bar();
                const int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_234372861494532932716.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_234372861494532932716.c:6:38: error: invalid operands to binary + (have 'volatile int *' and 'const int *')
                 volatile int * c = a + b;
                                      ^

        */
        error("""
              volatile int * foo();
              const int * bar();
              volatile int * x() {
                volatile int * a = foo();
                const int * b = bar();
                volatile int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_237977893179073036314.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_237977893179073036314.c:5:35: error: invalid operands to binary + (have 'volatile int *' and 'volatile int *')
                 const int * c = a + b;
                                   ^

        */
        error("""
              volatile int * foo();
              const int * x() {
                volatile int * a = foo();
                volatile int * b = foo();
                const int * c = a + b;
                return c;
              }
                """)
   }


   @Test def test_conf24_24() {
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_243755864883394067330.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_243755864883394067330.c:6:38: error: invalid operands to binary + (have 'volatile int *' and 'volatile int *')
                 volatile int * c = a + b;
                                      ^

        */
        error("""
              volatile int * foo();
              volatile int * bar();
              volatile int * x() {
                volatile int * a = foo();
                volatile int * b = bar();
                volatile int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_246983758085468363345.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_246983758085468363345.c:6:38: error: invalid operands to binary + (have 'volatile int *' and 'volatile int *')
                 volatile int * c = a + b;
                                      ^

        */
        error("""
              volatile int * foo();
              volatile int * bar();
              volatile int * x() {
                volatile int * a = foo();
                volatile int * b = bar();
                volatile int * c = a + b;
                return c;
              }
                """)
        /* gcc reports:
C:\Users\ckaestne\AppData\Local\Temp\conf24_245822079916312128908.c: In function 'x':
C:\Users\ckaestne\AppData\Local\Temp\conf24_245822079916312128908.c:5:38: error: invalid operands to binary + (have 'volatile int *' and 'volatile int *')
                 volatile int * c = a + b;
                                      ^

        */
        error("""
              volatile int * foo();
              volatile int * x() {
                volatile int * a = foo();
                volatile int * b = foo();
                volatile int * c = a + b;
                return c;
              }
                """)
   }




}